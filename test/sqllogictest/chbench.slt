# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE warehouse (
    w_id integer,
    w_name char(10),
    w_street_1 char(20),
    w_street_2 char(20),
    w_city char(20),
    w_state char(2),
    w_zip char(9),
    w_tax decimal(4, 4),
    w_ytd decimal(12, 2),
    PRIMARY KEY (w_id)
)

statement ok
CREATE TABLE district (
    -- should be smallint, see #4171
    d_id integer,
    d_w_id integer,
    d_name char(10),
    d_street_1 char(20),
    d_street_2 char(20),
    d_city char(20),
    d_state char(2),
    d_zip char(9),
    d_tax decimal(4, 4),
    d_ytd decimal(12, 2),
    d_next_o_id integer,
    PRIMARY KEY (d_w_id, d_id)
)

statement ok
CREATE INDEX fk_district_warehouse ON district (d_w_id ASC)

statement ok
CREATE TABLE customer (
    -- should be smallint, see #4171
    c_id integer,
    -- should be smallint, see #4171
    c_d_id integer,
    c_w_id integer,
    c_first char(16),
    c_middle char(2),
    c_last char(16),
    c_street_1 char(20),
    c_street_2 char(20),
    c_city char(20),
    c_state char(2),
    c_zip char(9),
    c_phone char(16),
    c_since DATE,
    c_credit char(2),
    c_credit_lim decimal(12, 2),
    c_discount decimal(4, 4),
    c_balance decimal(12, 2),
    c_ytd_payment decimal(12, 2),
    -- should be smallint, see #4171
    c_payment_cnt integer,
    -- should be smallint, see #4171
    c_delivery_cnt integer,
    c_data text,
    c_n_nationkey integer,
    PRIMARY KEY(c_w_id, c_d_id, c_id)
)

statement ok
CREATE INDEX fk_customer_district ON customer(c_w_id ASC, c_d_id ASC)

statement ok
CREATE INDEX fk_customer_nation ON customer(c_n_nationkey ASC)

statement ok
CREATE TABLE history (
    -- should be smallint, see #4171
    h_c_id integer,
    -- should be smallint, see #4171
    h_c_d_id integer,
    h_c_w_id integer,
    -- should be smallint, see #4171
    h_d_id integer,
    h_w_id integer,
    h_date date,
    h_amount decimal(6, 2),
    h_data char(24)
)

statement ok
CREATE INDEX fk_history_customer ON history (h_c_w_id ASC, h_c_d_id ASC, h_c_id ASC)

statement ok
CREATE INDEX fk_history_district ON history (h_w_id ASC, h_d_id ASC)

statement ok
CREATE TABLE neworder (
    no_o_id integer,
    -- should be smallint, see #4171
    no_d_id integer,
    no_w_id integer,
    PRIMARY KEY (no_w_id, no_d_id, no_o_id)
)

statement ok
CREATE TABLE "order" (
    o_id integer,
    -- should be smallint, see #4171
    o_d_id integer,
    o_w_id integer,
    -- should be smallint, see #4171
    o_c_id integer,
    o_entry_d date,
    -- should be smallint, see #4171
    o_carrier_id integer,
    -- should be smallint, see #4171
    o_ol_cnt integer,
    -- should be smallint, see #4171
    o_all_local integer,
    PRIMARY KEY (o_w_id, o_d_id, o_id)
)

statement ok
CREATE INDEX fk_order_customer ON order (o_w_id ASC, o_d_id ASC, o_c_id ASC)

statement ok
CREATE TABLE orderline (
    ol_o_id integer,
    -- should be smallint, see #4171
    ol_d_id integer,
    ol_w_id integer,
    -- should be smallint, see #4171
    ol_number integer,
    ol_i_id integer,
    ol_supply_w_id integer,
    ol_delivery_d date,
    -- should be smallint, see #4171
    ol_quantity integer,
    ol_amount decimal(6, 2),
    ol_dist_info char(24),
    PRIMARY KEY (ol_w_id, ol_d_id, ol_o_id, ol_number)
)

statement ok
CREATE INDEX fk_orderline_order ON orderline (ol_w_id ASC, ol_d_id ASC, ol_o_id ASC)

statement ok
CREATE INDEX fk_orderline_stock ON orderline (ol_supply_w_id ASC, ol_i_id ASC)

statement ok
CREATE INDEX fk_orderline_item ON orderline (ol_i_id ASC)

statement ok
CREATE TABLE item (
    i_id integer,
    -- should be smallint, see #4171
    i_im_id integer,
    i_name char(24),
    i_price decimal(5, 2),
    i_data char(50),
    PRIMARY KEY (i_id)
)

statement ok
CREATE TABLE stock (
    s_i_id integer,
    s_w_id integer,
    -- smallint
    s_quantity integer,
    s_dist_01 char(24),
    s_dist_02 char(24),
    s_dist_03 char(24),
    s_dist_04 char(24),
    s_dist_05 char(24),
    s_dist_06 char(24),
    s_dist_07 char(24),
    s_dist_08 char(24),
    s_dist_09 char(24),
    s_dist_10 char(24),
    s_ytd integer,
    -- should be smallint, see #4171
    s_order_cnt integer,
    -- should be smallint, see #4171
    s_remote_cnt integer,
    s_data char(50),
    s_su_suppkey integer NOT NULL,
    PRIMARY KEY (s_w_id, s_i_id)
)

statement ok
CREATE INDEX fk_stock_warehouse ON stock (s_w_id ASC)

statement ok
CREATE INDEX fk_stock_item ON stock (s_i_id ASC)

statement ok
CREATE INDEX fk_stock_supplier ON stock (s_su_suppkey ASC)

statement ok
CREATE TABLE nation (
    -- should be smallint, see #4171
    n_nationkey integer NOT NULL,
    n_name char(25) NOT NULL,
    -- should be smallint, see #4171
    n_regionkey integer NOT NULL,
    n_comment char(152) NOT NULL,
    PRIMARY KEY (n_nationkey)
)

statement ok
CREATE INDEX fk_nation_regionkey ON nation (n_regionkey ASC)

statement ok
CREATE TABLE supplier (
    -- should be smallint, see #4171
    su_suppkey integer NOT NULL,
    su_name char(25) NOT NULL,
    su_address char(40) NOT NULL,
    -- should be smallint, see #4171
    su_nationkey integer NOT NULL,
    su_phone char(15) NOT NULL,
    su_acctbal decimal(12, 2) NOT NULL,
    su_comment char(101) NOT NULL,
    PRIMARY KEY (su_suppkey)
)

statement ok
CREATE INDEX fk_supplier_nationkey ON supplier (su_nationkey ASC)

statement ok
CREATE TABLE region (
    -- should be smallint, see #4171
    r_regionkey integer NOT NULL,
    r_name char(55) NOT NULL,
    r_comment char(152) NOT NULL,
    PRIMARY KEY (r_regionkey)
)

# Query 01
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    ol_number,
    sum(ol_quantity) AS sum_qty,
    sum(ol_amount) AS sum_amount,
    avg(ol_quantity) AS avg_qty,
    avg(ol_amount) AS avg_amount,
    count(*) AS count_order
FROM orderline
WHERE ol_delivery_d > TIMESTAMP '2007-01-02 00:00:00.000000'
GROUP BY ol_number
ORDER BY ol_number
----
{
  "Mfp": {
    "input": {
      "Reduce": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 13
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 2
                    },
                    {
                      "Column": 1
                    },
                    {
                      "Column": 0
                    }
                  ],
                  {
                    "0": 2,
                    "1": 1,
                    "2": 0,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9
                  },
                  [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                  ]
                ]
              ]
            },
            "plan": {
              "Arrangement": [
                [
                  {
                    "Column": 2
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 0
                  }
                ],
                null,
                {
                  "expressions": [],
                  "predicates": [
                    [
                      7,
                      {
                        "CallBinary": {
                          "func": "Gt",
                          "expr1": {
                            "CallUnary": {
                              "func": {
                                "CastDateToTimestamp": null
                              },
                              "expr": {
                                "Column": 6
                              }
                            }
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    12,
                                    215,
                                    7,
                                    0,
                                    0,
                                    2,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Timestamp",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  ],
                  "projection": [
                    3,
                    7,
                    8
                  ],
                  "input_arity": 10
                }
              ]
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 3
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                }
              ],
              "predicates": [],
              "projection": [
                1,
                2,
                1,
                2,
                3
              ],
              "input_arity": 3
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumInt32",
                "expr": {
                  "Column": 1
                },
                "distinct": false
              },
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 2
                },
                "distinct": false
              },
              {
                "func": "Count",
                "expr": {
                  "Column": 1
                },
                "distinct": false
              },
              {
                "func": "Count",
                "expr": {
                  "Column": 2
                },
                "distinct": false
              },
              {
                "func": "Count",
                "expr": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumInt32",
                  "expr": {
                    "Column": 1
                  },
                  "distinct": false
                }
              ],
              [
                1,
                1,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 2
                  },
                  "distinct": false
                }
              ],
              [
                2,
                2,
                {
                  "func": "Count",
                  "expr": {
                    "Column": 1
                  },
                  "distinct": false
                }
              ],
              [
                3,
                3,
                {
                  "func": "Count",
                  "expr": {
                    "Column": 2
                  },
                  "distinct": false
                }
              ],
              [
                4,
                4,
                {
                  "func": "Count",
                  "expr": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            2
                          ]
                        }
                      },
                      {
                        "scalar_type": "Bool",
                        "nullable": false
                      }
                    ]
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "mfp": {
      "expressions": [
        {
          "CallBinary": {
            "func": "DivFloat64",
            "expr1": {
              "CallUnary": {
                "func": {
                  "CastInt64ToFloat64": null
                },
                "expr": {
                  "Column": 1
                }
              }
            },
            "expr2": {
              "CallUnary": {
                "func": {
                  "CastInt64ToFloat64": null
                },
                "expr": {
                  "If": {
                    "cond": {
                      "CallBinary": {
                        "func": "Eq",
                        "expr1": {
                          "Column": 3
                        },
                        "expr2": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  5,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": "Int64",
                              "nullable": false
                            }
                          ]
                        }
                      }
                    },
                    "then": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": "Int64",
                          "nullable": true
                        }
                      ]
                    },
                    "els": {
                      "Column": 3
                    }
                  }
                }
              }
            }
          }
        },
        {
          "CallBinary": {
            "func": "DivFloat64",
            "expr1": {
              "CallUnary": {
                "func": {
                  "CastNumericToFloat64": null
                },
                "expr": {
                  "Column": 2
                }
              }
            },
            "expr2": {
              "CallUnary": {
                "func": {
                  "CastInt64ToFloat64": null
                },
                "expr": {
                  "If": {
                    "cond": {
                      "CallBinary": {
                        "func": "Eq",
                        "expr1": {
                          "Column": 4
                        },
                        "expr2": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  5,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": "Int64",
                              "nullable": false
                            }
                          ]
                        }
                      }
                    },
                    "then": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": "Int64",
                          "nullable": true
                        }
                      ]
                    },
                    "els": {
                      "Column": 4
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "predicates": [],
      "projection": [
        0,
        1,
        2,
        6,
        7,
        5
      ],
      "input_arity": 6
    },
    "input_key_val": [
      [
        {
          "Column": 0
        }
      ],
      null
    ]
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0..=#5)

EOF

# Query 02
query T multiline
EXPLAIN physical PLAN FOR
SELECT su_suppkey, su_name, n_name, i_id, i_name, su_address, su_phone, su_comment
FROM
    item, supplier, stock, nation, region,
    (
        SELECT
            s_i_id AS m_i_id,
            min(s_quantity) AS m_s_quantity
        FROM stock, supplier, nation, region
        WHERE s_su_suppkey = su_suppkey
        AND su_nationkey = n_nationkey
        AND n_regionkey = r_regionkey
        AND r_name like 'EUROP%'
        GROUP BY s_i_id
    ) m
WHERE i_id = s_i_id
AND s_su_suppkey = su_suppkey
AND su_nationkey = n_nationkey
AND n_regionkey = r_regionkey
AND i_data like '%b'
AND r_name like 'EUROP%'
AND i_id = m_i_id
AND s_quantity = m_s_quantity
ORDER BY n_name, su_name, i_id
----
Source materialize.public.item (u17):
{
  "expressions": [],
  "predicates": [
    [
      5,
      {
        "CallUnary": {
          "func": {
            "IsLikeMatch": {
              "pattern": "%b",
              "case_insensitive": false,
              "matcher_impl": {
                "String": [
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": "b"
                  }
                ]
              }
            }
          },
          "expr": {
            "CallUnary": {
              "func": {
                "PadChar": {
                  "length": 50
                }
              },
              "expr": {
                "Column": 4
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0,
    2
  ],
  "input_arity": 5
}

Source materialize.public.region (u26):
{
  "expressions": [],
  "predicates": [
    [
      2,
      {
        "CallUnary": {
          "func": {
            "IsLikeMatch": {
              "pattern": "EUROP%",
              "case_insensitive": false,
              "matcher_impl": {
                "String": [
                  {
                    "consume": 0,
                    "many": false,
                    "suffix": "EUROP"
                  },
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": ""
                  }
                ]
              }
            }
          },
          "expr": {
            "CallUnary": {
              "func": {
                "PadChar": {
                  "length": 55
                }
              },
              "expr": {
                "Column": 1
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 3
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "ArrangeBy": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 26
              }
            },
            "keys": {
              "raw": true,
              "arranged": []
            },
            "plan": {
              "Collection": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        },
        "forms": {
          "raw": true,
          "arranged": [
            [
              [
                {
                  "Column": 0
                }
              ],
              {
                "0": 0
              },
              []
            ]
          ]
        },
        "input_key": null,
        "input_mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            0
          ],
          "input_arity": 1
        }
      }
    },
    "body": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 17
                    }
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1
                      ],
                      "input_arity": 2
                    }
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 24
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          2,
                          3,
                          0,
                          4,
                          6
                        ],
                        "input_arity": 7
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5
                    },
                    [
                      1,
                      2,
                      3,
                      4,
                      5
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "input_arity": 6
              }
            }
          },
          {
            "Get": {
              "id": {
                "Global": {
                  "User": 18
                }
              },
              "keys": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 17
                      }
                    ],
                    {
                      "0": 1,
                      "1": 2,
                      "2": 3,
                      "3": 4,
                      "4": 5,
                      "5": 6,
                      "6": 7,
                      "7": 8,
                      "8": 9,
                      "9": 10,
                      "10": 11,
                      "11": 12,
                      "12": 13,
                      "13": 14,
                      "14": 15,
                      "15": 16,
                      "16": 17,
                      "17": 0
                    },
                    [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15,
                      16
                    ]
                  ]
                ]
              },
              "plan": {
                "Arrangement": [
                  [
                    {
                      "Column": 17
                    }
                  ],
                  null,
                  {
                    "expressions": [],
                    "predicates": [
                      [
                        4,
                        {
                          "CallUnary": {
                            "func": {
                              "Not": null
                            },
                            "expr": {
                              "CallUnary": {
                                "func": {
                                  "IsNull": null
                                },
                                "expr": {
                                  "Column": 3
                                }
                              }
                            }
                          }
                        }
                      ]
                    ],
                    "projection": [
                      1,
                      3,
                      0
                    ],
                    "input_arity": 18
                  }
                ]
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 22
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          2,
                          0
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2
                    },
                    [
                      1,
                      2
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2
                ],
                "input_arity": 3
              }
            }
          },
          {
            "Get": {
              "id": {
                "Local": 0
              },
              "keys": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "plan": "PassArrangements"
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Mfp": {
                  "input": {
                    "Reduce": {
                      "input": {
                        "Join": {
                          "inputs": [
                            {
                              "ArrangeBy": {
                                "input": {
                                  "Get": {
                                    "id": {
                                      "Global": {
                                        "User": 18
                                      }
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 17
                                            }
                                          ],
                                          {
                                            "0": 1,
                                            "1": 2,
                                            "2": 3,
                                            "3": 4,
                                            "4": 5,
                                            "5": 6,
                                            "6": 7,
                                            "7": 8,
                                            "8": 9,
                                            "9": 10,
                                            "10": 11,
                                            "11": 12,
                                            "12": 13,
                                            "13": 14,
                                            "14": 15,
                                            "15": 16,
                                            "16": 17,
                                            "17": 0
                                          },
                                          [
                                            0,
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": "PassArrangements"
                                  }
                                },
                                "forms": {
                                  "raw": false,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 17
                                        }
                                      ],
                                      {
                                        "0": 1,
                                        "1": 2,
                                        "2": 3,
                                        "3": 4,
                                        "4": 5,
                                        "5": 6,
                                        "6": 7,
                                        "7": 8,
                                        "8": 9,
                                        "9": 10,
                                        "10": 11,
                                        "11": 12,
                                        "12": 13,
                                        "13": 14,
                                        "14": 15,
                                        "15": 16,
                                        "16": 17,
                                        "17": 0
                                      },
                                      [
                                        0,
                                        1,
                                        2,
                                        3,
                                        4,
                                        5,
                                        6,
                                        7,
                                        8,
                                        9,
                                        10,
                                        11,
                                        12,
                                        13,
                                        14,
                                        15,
                                        16
                                      ]
                                    ]
                                  ]
                                },
                                "input_key": [
                                  {
                                    "Column": 17
                                  }
                                ],
                                "input_mfp": {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9,
                                    10,
                                    11,
                                    12,
                                    13,
                                    14,
                                    15,
                                    16,
                                    17,
                                    0
                                  ],
                                  "input_arity": 18
                                }
                              }
                            },
                            {
                              "ArrangeBy": {
                                "input": {
                                  "Get": {
                                    "id": {
                                      "Global": {
                                        "User": 24
                                      }
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 3
                                            }
                                          ],
                                          {
                                            "0": 1,
                                            "1": 2,
                                            "2": 3,
                                            "3": 0,
                                            "4": 4,
                                            "5": 5,
                                            "6": 6
                                          },
                                          [
                                            0,
                                            1,
                                            2,
                                            4,
                                            5,
                                            6
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": {
                                      "Arrangement": [
                                        [
                                          {
                                            "Column": 3
                                          }
                                        ],
                                        null,
                                        {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            1,
                                            0
                                          ],
                                          "input_arity": 7
                                        }
                                      ]
                                    }
                                  }
                                },
                                "forms": {
                                  "raw": true,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      {
                                        "0": 0,
                                        "1": 1
                                      },
                                      [
                                        1
                                      ]
                                    ]
                                  ]
                                },
                                "input_key": null,
                                "input_mfp": {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [
                                    0,
                                    1
                                  ],
                                  "input_arity": 2
                                }
                              }
                            },
                            {
                              "ArrangeBy": {
                                "input": {
                                  "Get": {
                                    "id": {
                                      "Global": {
                                        "User": 22
                                      }
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 2
                                            }
                                          ],
                                          {
                                            "0": 1,
                                            "1": 2,
                                            "2": 0,
                                            "3": 3
                                          },
                                          [
                                            0,
                                            1,
                                            3
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": {
                                      "Arrangement": [
                                        [
                                          {
                                            "Column": 2
                                          }
                                        ],
                                        null,
                                        {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            1,
                                            0
                                          ],
                                          "input_arity": 4
                                        }
                                      ]
                                    }
                                  }
                                },
                                "forms": {
                                  "raw": true,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      {
                                        "0": 0,
                                        "1": 1
                                      },
                                      [
                                        1
                                      ]
                                    ]
                                  ]
                                },
                                "input_key": null,
                                "input_mfp": {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [
                                    0,
                                    1
                                  ],
                                  "input_arity": 2
                                }
                              }
                            },
                            {
                              "Get": {
                                "id": {
                                  "Local": 0
                                },
                                "keys": {
                                  "raw": true,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      {
                                        "0": 0
                                      },
                                      []
                                    ]
                                  ]
                                },
                                "plan": "PassArrangements"
                              }
                            }
                          ],
                          "plan": {
                            "Linear": {
                              "source_relation": 0,
                              "source_key": [
                                {
                                  "Column": 17
                                }
                              ],
                              "initial_closure": {
                                "ready_equivalences": [],
                                "before": {
                                  "mfp": {
                                    "expressions": [],
                                    "predicates": [],
                                    "projection": [
                                      1,
                                      2,
                                      3,
                                      4,
                                      5,
                                      6,
                                      7,
                                      8,
                                      9,
                                      10,
                                      11,
                                      12,
                                      13,
                                      14,
                                      15,
                                      16,
                                      17,
                                      0
                                    ],
                                    "input_arity": 18
                                  }
                                }
                              },
                              "stage_plans": [
                                {
                                  "lookup_relation": 1,
                                  "stream_key": [
                                    {
                                      "Column": 17
                                    }
                                  ],
                                  "stream_thinning": [
                                    0,
                                    1,
                                    2,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9,
                                    10,
                                    11,
                                    12,
                                    13,
                                    14,
                                    15,
                                    16
                                  ],
                                  "lookup_key": [
                                    {
                                      "Column": 0
                                    }
                                  ],
                                  "closure": {
                                    "ready_equivalences": [],
                                    "before": {
                                      "mfp": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [
                                          1,
                                          3,
                                          18
                                        ],
                                        "input_arity": 19
                                      }
                                    }
                                  }
                                },
                                {
                                  "lookup_relation": 2,
                                  "stream_key": [
                                    {
                                      "Column": 2
                                    }
                                  ],
                                  "stream_thinning": [
                                    0,
                                    1
                                  ],
                                  "lookup_key": [
                                    {
                                      "Column": 0
                                    }
                                  ],
                                  "closure": {
                                    "ready_equivalences": [],
                                    "before": {
                                      "mfp": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [
                                          1,
                                          2,
                                          3
                                        ],
                                        "input_arity": 4
                                      }
                                    }
                                  }
                                },
                                {
                                  "lookup_relation": 3,
                                  "stream_key": [
                                    {
                                      "Column": 2
                                    }
                                  ],
                                  "stream_thinning": [
                                    0,
                                    1
                                  ],
                                  "lookup_key": [
                                    {
                                      "Column": 0
                                    }
                                  ],
                                  "closure": {
                                    "ready_equivalences": [],
                                    "before": {
                                      "mfp": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [
                                          1,
                                          2
                                        ],
                                        "input_arity": 3
                                      }
                                    }
                                  }
                                }
                              ],
                              "final_closure": null
                            }
                          }
                        }
                      },
                      "key_val_plan": {
                        "key_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              0
                            ],
                            "input_arity": 2
                          }
                        },
                        "val_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1
                            ],
                            "input_arity": 2
                          }
                        }
                      },
                      "plan": {
                        "Hierarchical": {
                          "Bucketed": {
                            "aggr_funcs": [
                              "MinInt32"
                            ],
                            "skips": [
                              0
                            ],
                            "buckets": [
                              268435456,
                              16777216,
                              1048576,
                              65536,
                              4096,
                              256,
                              16
                            ]
                          }
                        }
                      },
                      "input_key": null
                    }
                  },
                  "mfp": {
                    "expressions": [],
                    "predicates": [
                      [
                        2,
                        {
                          "CallUnary": {
                            "func": {
                              "Not": null
                            },
                            "expr": {
                              "CallUnary": {
                                "func": {
                                  "IsNull": null
                                },
                                "expr": {
                                  "Column": 1
                                }
                              }
                            }
                          }
                        }
                      ]
                    ],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  },
                  "input_key_val": [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    null
                  ]
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 2,
            "source_key": null,
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 5,
                "stream_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  }
                ],
                "stream_thinning": [
                  2
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        2
                      ],
                      "input_arity": 3
                    }
                  }
                }
              },
              {
                "lookup_relation": 0,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        2,
                        1
                      ],
                      "input_arity": 3
                    }
                  }
                }
              },
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  0,
                  1
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        0,
                        3,
                        4,
                        5,
                        6,
                        7
                      ],
                      "input_arity": 8
                    }
                  }
                }
              },
              {
                "lookup_relation": 3,
                "stream_key": [
                  {
                    "Column": 5
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  6,
                  7
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                      ],
                      "input_arity": 10
                    }
                  }
                }
              },
              {
                "lookup_relation": 4,
                "stream_key": [
                  {
                    "Column": 8
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        3,
                        4,
                        8,
                        1,
                        2,
                        5,
                        6,
                        7
                      ],
                      "input_arity": 9
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    }
  }
}

Finish order_by=(#2 asc nulls_last, #1 asc nulls_last, #3 asc nulls_last) limit=none offset=0 project=(#0..=#7)

EOF

# Query 03
query T multiline
EXPLAIN physical PLAN FOR
SELECT ol_o_id, ol_w_id, ol_d_id, sum(ol_amount) AS revenue, o_entry_d
FROM customer, neworder, "order", orderline
WHERE c_state LIKE 'A%'
AND c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND no_w_id = o_w_id
AND no_d_id = o_d_id
AND no_o_id = o_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND o_entry_d > TIMESTAMP '2007-01-02 00:00:00.000000'
GROUP BY ol_o_id, ol_w_id, ol_d_id, o_entry_d
ORDER BY revenue DESC, o_entry_d
----
Source materialize.public.neworder (u10):
{
  "expressions": [],
  "predicates": [],
  "projection": [
    0,
    1,
    2
  ],
  "input_arity": 3
}

Query:
{
  "Mfp": {
    "input": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 2,
                              "1": 1,
                              "2": 0,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15,
                              "16": 16,
                              "17": 17,
                              "18": 18,
                              "19": 19,
                              "20": 20,
                              "21": 21
                            },
                            [
                              0,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15,
                              16,
                              17,
                              18,
                              19,
                              20,
                              21
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                10,
                                {
                                  "CallUnary": {
                                    "func": {
                                      "IsLikeMatch": {
                                        "pattern": "A%",
                                        "case_insensitive": false,
                                        "matcher_impl": {
                                          "String": [
                                            {
                                              "consume": 0,
                                              "many": false,
                                              "suffix": "A"
                                            },
                                            {
                                              "consume": 0,
                                              "many": true,
                                              "suffix": ""
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "expr": {
                                      "CallUnary": {
                                        "func": {
                                          "PadChar": {
                                            "length": 2
                                          }
                                        },
                                        "expr": {
                                          "Column": 9
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              2,
                              1,
                              0
                            ],
                            "input_arity": 22
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2
                    ],
                    "input_arity": 3
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 10
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2
                    ],
                    "input_arity": 3
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 11
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              },
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 3,
                              "1": 1,
                              "2": 0,
                              "3": 2,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            },
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                3,
                                {
                                  "CallUnary": {
                                    "func": {
                                      "Not": null
                                    },
                                    "expr": {
                                      "CallUnary": {
                                        "func": {
                                          "IsNull": null
                                        },
                                        "expr": {
                                          "Column": 2
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              [
                                5,
                                {
                                  "CallBinary": {
                                    "func": "Gt",
                                    "expr1": {
                                      "CallUnary": {
                                        "func": {
                                          "CastDateToTimestamp": null
                                        },
                                        "expr": {
                                          "Column": 4
                                        }
                                      }
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              12,
                                              215,
                                              7,
                                              0,
                                              0,
                                              2,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Timestamp",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              3,
                              1,
                              0,
                              2,
                              4
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4
                        },
                        [
                          3,
                          4
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "input_arity": 5
                  }
                }
              },
              {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 13
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 2,
                          "1": 1,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9
                        },
                        [
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        },
                        {
                          "Column": 0
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          2,
                          1,
                          0,
                          8
                        ],
                        "input_arity": 10
                      }
                    ]
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 3,
                "source_key": null,
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            0,
                            1,
                            2,
                            3
                          ],
                          "input_arity": 4
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 2,
                    "stream_key": [
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      },
                      {
                        "Column": 3
                      }
                    ],
                    "stream_thinning": [
                      0,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            3,
                            5,
                            6,
                            1,
                            2,
                            4
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 1
                      },
                      {
                        "Column": 3
                      },
                      {
                        "Column": 4
                      }
                    ],
                    "stream_thinning": [
                      0,
                      2,
                      5
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                2,
                1,
                0,
                3
              ],
              "input_arity": 5
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                4
              ],
              "input_arity": 5
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 4
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 4
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "mfp": {
      "expressions": [],
      "predicates": [],
      "projection": [
        0,
        1,
        2,
        4,
        3
      ],
      "input_arity": 5
    },
    "input_key_val": [
      [
        {
          "Column": 0
        },
        {
          "Column": 1
        },
        {
          "Column": 2
        },
        {
          "Column": 3
        }
      ],
      null
    ]
  }
}

Finish order_by=(#3 desc nulls_first, #4 asc nulls_last) limit=none offset=0 project=(#0..=#4)

EOF

# Query 04
query T multiline
EXPLAIN physical PLAN FOR
SELECT o_ol_cnt, count(*) AS order_count
FROM "order"
WHERE o_entry_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
AND o_entry_d < TIMESTAMP '2012-01-02 00:00:00.000000'
AND EXISTS (
    SELECT *
    FROM orderline
    WHERE o_id = ol_o_id
    AND o_w_id = ol_w_id
    AND o_d_id = ol_d_id
    AND ol_delivery_d >= o_entry_d
)
GROUP BY o_ol_cnt
ORDER BY o_ol_cnt
----
{
  "Let": {
    "id": 0,
    "value": {
      "Get": {
        "id": {
          "Global": {
            "User": 11
          }
        },
        "keys": {
          "raw": false,
          "arranged": [
            [
              [
                {
                  "Column": 2
                },
                {
                  "Column": 1
                },
                {
                  "Column": 3
                }
              ],
              {
                "0": 3,
                "1": 1,
                "2": 0,
                "3": 2,
                "4": 4,
                "5": 5,
                "6": 6,
                "7": 7
              },
              [
                0,
                4,
                5,
                6,
                7
              ]
            ]
          ]
        },
        "plan": {
          "Arrangement": [
            [
              {
                "Column": 2
              },
              {
                "Column": 1
              },
              {
                "Column": 3
              }
            ],
            null,
            {
              "expressions": [
                {
                  "CallUnary": {
                    "func": {
                      "CastDateToTimestamp": null
                    },
                    "expr": {
                      "Column": 4
                    }
                  }
                }
              ],
              "predicates": [
                [
                  9,
                  {
                    "CallBinary": {
                      "func": "Lt",
                      "expr1": {
                        "Column": 8
                      },
                      "expr2": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                12,
                                220,
                                7,
                                0,
                                0,
                                2,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Timestamp",
                            "nullable": false
                          }
                        ]
                      }
                    }
                  }
                ],
                [
                  9,
                  {
                    "CallBinary": {
                      "func": "Gte",
                      "expr1": {
                        "Column": 8
                      },
                      "expr2": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                12,
                                215,
                                7,
                                0,
                                0,
                                2,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Timestamp",
                            "nullable": false
                          }
                        ]
                      }
                    }
                  }
                ]
              ],
              "projection": [
                3,
                1,
                0,
                2,
                4,
                5,
                6,
                7,
                8
              ],
              "input_arity": 8
            }
          ]
        }
      }
    },
    "body": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        4,
                        6
                      ],
                      "input_arity": 9
                    }
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Reduce": {
                      "input": {
                        "Join": {
                          "inputs": [
                            {
                              "ArrangeBy": {
                                "input": {
                                  "Get": {
                                    "id": {
                                      "Local": 0
                                    },
                                    "keys": {
                                      "raw": true,
                                      "arranged": []
                                    },
                                    "plan": {
                                      "Collection": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [
                                          0,
                                          1,
                                          2,
                                          4
                                        ],
                                        "input_arity": 9
                                      }
                                    }
                                  }
                                },
                                "forms": {
                                  "raw": true,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 0
                                        },
                                        {
                                          "Column": 1
                                        },
                                        {
                                          "Column": 2
                                        }
                                      ],
                                      {
                                        "0": 0,
                                        "1": 1,
                                        "2": 2,
                                        "3": 3
                                      },
                                      [
                                        3
                                      ]
                                    ]
                                  ]
                                },
                                "input_key": null,
                                "input_mfp": {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [
                                    0,
                                    1,
                                    2,
                                    3
                                  ],
                                  "input_arity": 4
                                }
                              }
                            },
                            {
                              "ArrangeBy": {
                                "input": {
                                  "Get": {
                                    "id": {
                                      "Global": {
                                        "User": 13
                                      }
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 2
                                            },
                                            {
                                              "Column": 1
                                            },
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 2,
                                            "1": 1,
                                            "2": 0,
                                            "3": 3,
                                            "4": 4,
                                            "5": 5,
                                            "6": 6,
                                            "7": 7,
                                            "8": 8,
                                            "9": 9
                                          },
                                          [
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": "PassArrangements"
                                  }
                                },
                                "forms": {
                                  "raw": false,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 2
                                        },
                                        {
                                          "Column": 1
                                        },
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      {
                                        "0": 2,
                                        "1": 1,
                                        "2": 0,
                                        "3": 3,
                                        "4": 4,
                                        "5": 5,
                                        "6": 6,
                                        "7": 7,
                                        "8": 8,
                                        "9": 9
                                      },
                                      [
                                        3,
                                        4,
                                        5,
                                        6,
                                        7,
                                        8,
                                        9
                                      ]
                                    ]
                                  ]
                                },
                                "input_key": [
                                  {
                                    "Column": 2
                                  },
                                  {
                                    "Column": 1
                                  },
                                  {
                                    "Column": 0
                                  }
                                ],
                                "input_mfp": {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [
                                    2,
                                    1,
                                    0,
                                    3,
                                    4,
                                    5,
                                    6,
                                    7,
                                    8,
                                    9
                                  ],
                                  "input_arity": 10
                                }
                              }
                            }
                          ],
                          "plan": {
                            "Delta": {
                              "path_plans": [
                                {
                                  "source_relation": 0,
                                  "source_key": [
                                    {
                                      "Column": 0
                                    },
                                    {
                                      "Column": 1
                                    },
                                    {
                                      "Column": 2
                                    }
                                  ],
                                  "initial_closure": {
                                    "ready_equivalences": [],
                                    "before": {
                                      "mfp": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [
                                          0,
                                          1,
                                          2,
                                          3
                                        ],
                                        "input_arity": 4
                                      }
                                    }
                                  },
                                  "stage_plans": [
                                    {
                                      "lookup_relation": 1,
                                      "stream_key": [
                                        {
                                          "Column": 2
                                        },
                                        {
                                          "Column": 1
                                        },
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "stream_thinning": [
                                        3
                                      ],
                                      "lookup_key": [
                                        {
                                          "Column": 2
                                        },
                                        {
                                          "Column": 1
                                        },
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [
                                              [
                                                8,
                                                {
                                                  "CallBinary": {
                                                    "func": "Gte",
                                                    "expr1": {
                                                      "Column": 7
                                                    },
                                                    "expr2": {
                                                      "Column": 3
                                                    }
                                                  }
                                                }
                                              ]
                                            ],
                                            "projection": [
                                              2,
                                              1,
                                              0,
                                              3
                                            ],
                                            "input_arity": 11
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "final_closure": null
                                },
                                {
                                  "source_relation": 1,
                                  "source_key": [
                                    {
                                      "Column": 2
                                    },
                                    {
                                      "Column": 1
                                    },
                                    {
                                      "Column": 0
                                    }
                                  ],
                                  "initial_closure": {
                                    "ready_equivalences": [],
                                    "before": {
                                      "mfp": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [
                                          2,
                                          1,
                                          0,
                                          6
                                        ],
                                        "input_arity": 10
                                      }
                                    }
                                  },
                                  "stage_plans": [
                                    {
                                      "lookup_relation": 0,
                                      "stream_key": [
                                        {
                                          "Column": 0
                                        },
                                        {
                                          "Column": 1
                                        },
                                        {
                                          "Column": 2
                                        }
                                      ],
                                      "stream_thinning": [
                                        3
                                      ],
                                      "lookup_key": [
                                        {
                                          "Column": 0
                                        },
                                        {
                                          "Column": 1
                                        },
                                        {
                                          "Column": 2
                                        }
                                      ],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [
                                              [
                                                5,
                                                {
                                                  "CallBinary": {
                                                    "func": "Gte",
                                                    "expr1": {
                                                      "Column": 3
                                                    },
                                                    "expr2": {
                                                      "Column": 4
                                                    }
                                                  }
                                                }
                                              ]
                                            ],
                                            "projection": [
                                              0,
                                              1,
                                              2,
                                              4
                                            ],
                                            "input_arity": 5
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "final_closure": null
                                }
                              ]
                            }
                          }
                        }
                      },
                      "key_val_plan": {
                        "key_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              0,
                              1,
                              2,
                              3
                            ],
                            "input_arity": 4
                          }
                        },
                        "val_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [],
                            "input_arity": 4
                          }
                        }
                      },
                      "plan": "Distinct",
                      "input_key": null
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          },
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 0
                    },
                    {
                      "Column": 1
                    },
                    {
                      "Column": 2
                    },
                    {
                      "Column": 3
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3
                    ],
                    "input_arity": 4
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 0,
                "source_key": null,
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      },
                      {
                        "Column": 3
                      }
                    ],
                    "stream_thinning": [
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      },
                      {
                        "Column": 3
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            4
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 1
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                }
              ],
              "predicates": [],
              "projection": [
                1
              ],
              "input_arity": 1
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "Count",
                "expr": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "Count",
                  "expr": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            2
                          ]
                        }
                      },
                      {
                        "scalar_type": "Bool",
                        "nullable": false
                      }
                    ]
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    }
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0, #1)

EOF

# Query 05
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    n_name,
    sum(ol_amount) AS revenue
FROM customer, "order", orderline, stock, supplier, nation, region
WHERE c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND ol_o_id = o_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_w_id = s_w_id
AND ol_i_id = s_i_id
AND s_su_suppkey = su_suppkey
AND c_n_nationkey = su_nationkey
AND su_nationkey = n_nationkey
AND n_regionkey = r_regionkey
AND r_name = 'EUROPE'
AND o_entry_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
GROUP BY n_name
ORDER BY revenue DESC
----
Source materialize.public.region (u26):
{
  "expressions": [],
  "predicates": [
    [
      2,
      {
        "CallBinary": {
          "func": "Eq",
          "expr1": {
            "Column": 1
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    19,
                    6,
                    69,
                    85,
                    82,
                    79,
                    80,
                    69
                  ]
                }
              },
              {
                "scalar_type": {
                  "Char": {
                    "length": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 3
}

Query:
{
  "Reduce": {
    "input": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 4
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 2,
                          "1": 1,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15,
                          "16": 16,
                          "17": 17,
                          "18": 18,
                          "19": 19,
                          "20": 20,
                          "21": 21
                        },
                        [
                          0,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16,
                          17,
                          18,
                          19,
                          20,
                          21
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            22,
                            {
                              "CallUnary": {
                                "func": {
                                  "Not": null
                                },
                                "expr": {
                                  "CallUnary": {
                                    "func": {
                                      "IsNull": null
                                    },
                                    "expr": {
                                      "Column": 21
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          2,
                          1,
                          0,
                          21
                        ],
                        "input_arity": 22
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3
                    },
                    [
                      3
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3
                ],
                "input_arity": 4
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 11
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 3,
                          "1": 1,
                          "2": 0,
                          "3": 2,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7
                        },
                        [
                          0,
                          4,
                          5,
                          6,
                          7
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        },
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            3,
                            {
                              "CallUnary": {
                                "func": {
                                  "Not": null
                                },
                                "expr": {
                                  "CallUnary": {
                                    "func": {
                                      "IsNull": null
                                    },
                                    "expr": {
                                      "Column": 2
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          [
                            5,
                            {
                              "CallBinary": {
                                "func": "Gte",
                                "expr1": {
                                  "CallUnary": {
                                    "func": {
                                      "CastDateToTimestamp": null
                                    },
                                    "expr": {
                                      "Column": 4
                                    }
                                  }
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          12,
                                          215,
                                          7,
                                          0,
                                          0,
                                          2,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Timestamp",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          3,
                          1,
                          0,
                          2
                        ],
                        "input_arity": 8
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3
                    },
                    [
                      3
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3
                ],
                "input_arity": 4
              }
            }
          },
          {
            "Get": {
              "id": {
                "Global": {
                  "User": 13
                }
              },
              "keys": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 2,
                      "1": 1,
                      "2": 0,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9
                    },
                    [
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9
                    ]
                  ]
                ]
              },
              "plan": {
                "Arrangement": [
                  [
                    {
                      "Column": 2
                    },
                    {
                      "Column": 1
                    },
                    {
                      "Column": 0
                    }
                  ],
                  null,
                  {
                    "expressions": [],
                    "predicates": [
                      [
                        5,
                        {
                          "CallUnary": {
                            "func": {
                              "Not": null
                            },
                            "expr": {
                              "CallUnary": {
                                "func": {
                                  "IsNull": null
                                },
                                "expr": {
                                  "Column": 4
                                }
                              }
                            }
                          }
                        }
                      ]
                    ],
                    "projection": [
                      2,
                      1,
                      0,
                      4,
                      8
                    ],
                    "input_arity": 10
                  }
                ]
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 18
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15,
                          "16": 16,
                          "17": 17
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16,
                          17
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 1
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0,
                          17
                        ],
                        "input_arity": 18
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2
                    },
                    [
                      2
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2
                ],
                "input_arity": 3
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 24
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0
                        ],
                        "input_arity": 7
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 22
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          2,
                          0
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2
                    },
                    [
                      1,
                      2
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2
                ],
                "input_arity": 3
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 26
                    }
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 1
                    }
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 2,
            "source_key": null,
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  3,
                  4
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        5,
                        1,
                        2,
                        3,
                        4
                      ],
                      "input_arity": 6
                    }
                  }
                }
              },
              {
                "lookup_relation": 0,
                "stream_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  3,
                  4
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        5,
                        2,
                        3,
                        4
                      ],
                      "input_arity": 6
                    }
                  }
                }
              },
              {
                "lookup_relation": 3,
                "stream_key": [
                  {
                    "Column": 2
                  },
                  {
                    "Column": 1
                  }
                ],
                "stream_thinning": [
                  0,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        2,
                        3,
                        4
                      ],
                      "input_arity": 5
                    }
                  }
                }
              },
              {
                "lookup_relation": 4,
                "stream_key": [
                  {
                    "Column": 2
                  },
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2
                      ],
                      "input_arity": 3
                    }
                  }
                }
              },
              {
                "lookup_relation": 5,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                }
              },
              {
                "lookup_relation": 6,
                "stream_key": [
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  0,
                  1
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2
                      ],
                      "input_arity": 3
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    },
    "key_val_plan": {
      "key_plan": {
        "mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            1
          ],
          "input_arity": 2
        }
      },
      "val_plan": {
        "mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            0
          ],
          "input_arity": 2
        }
      }
    },
    "plan": {
      "Accumulable": {
        "full_aggrs": [
          {
            "func": "SumNumeric",
            "expr": {
              "Column": 0
            },
            "distinct": false
          }
        ],
        "simple_aggrs": [
          [
            0,
            0,
            {
              "func": "SumNumeric",
              "expr": {
                "Column": 0
              },
              "distinct": false
            }
          ]
        ],
        "distinct_aggrs": []
      }
    },
    "input_key": null
  }
}

Finish order_by=(#1 desc nulls_first) limit=none offset=0 project=(#0, #1)

EOF

# Query 06
query T multiline
EXPLAIN physical PLAN FOR
SELECT sum(ol_amount) AS revenue
FROM orderline
WHERE ol_delivery_d >= TIMESTAMP '1999-01-01 00:00:00.000000'
AND ol_delivery_d < TIMESTAMP '2020-01-01 00:00:00.000000'
AND ol_quantity BETWEEN 1 AND 100000
----
{
  "Let": {
    "id": 0,
    "value": {
      "Reduce": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 13
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 2
                    },
                    {
                      "Column": 1
                    },
                    {
                      "Column": 0
                    }
                  ],
                  {
                    "0": 2,
                    "1": 1,
                    "2": 0,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9
                  },
                  [
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                  ]
                ]
              ]
            },
            "plan": {
              "Arrangement": [
                [
                  {
                    "Column": 2
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 0
                  }
                ],
                null,
                {
                  "expressions": [
                    {
                      "CallUnary": {
                        "func": {
                          "CastDateToTimestamp": null
                        },
                        "expr": {
                          "Column": 6
                        }
                      }
                    }
                  ],
                  "predicates": [
                    [
                      8,
                      {
                        "CallBinary": {
                          "func": "Lte",
                          "expr1": {
                            "Column": 7
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    160,
                                    134,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ],
                    [
                      8,
                      {
                        "CallBinary": {
                          "func": "Gte",
                          "expr1": {
                            "Column": 7
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    1,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ],
                    [
                      11,
                      {
                        "CallBinary": {
                          "func": "Lt",
                          "expr1": {
                            "Column": 10
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    12,
                                    228,
                                    7,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Timestamp",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ],
                    [
                      11,
                      {
                        "CallBinary": {
                          "func": "Gte",
                          "expr1": {
                            "Column": 10
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    12,
                                    207,
                                    7,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Timestamp",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  ],
                  "projection": [
                    8
                  ],
                  "input_arity": 10
                }
              ]
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [],
              "input_arity": 1
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 1
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 0
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 0
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "body": {
      "Union": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [],
                        {
                          "0": 0
                        },
                        [
                          0
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": true,
                "arranged": []
              },
              "input_key": [],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          },
          {
            "Mfp": {
              "input": {
                "Union": {
                  "inputs": [
                    {
                      "Negate": {
                        "input": {
                          "Get": {
                            "id": {
                              "Local": 0
                            },
                            "keys": {
                              "raw": false,
                              "arranged": [
                                [
                                  [],
                                  {
                                    "0": 0
                                  },
                                  [
                                    0
                                  ]
                                ]
                              ]
                            },
                            "plan": {
                              "Arrangement": [
                                [],
                                null,
                                {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [],
                                  "input_arity": 1
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "Constant": {
                        "rows": {
                          "Ok": [
                            [
                              {
                                "data": []
                              },
                              0,
                              1
                            ]
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "mfp": {
                "expressions": [
                  {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": {
                          "Numeric": {
                            "max_scale": 2
                          }
                        },
                        "nullable": true
                      }
                    ]
                  }
                ],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 0
              },
              "input_key_val": null
            }
          }
        ]
      }
    }
  }
}

EOF

# Query 07
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    su_nationkey AS supp_nation,
    substr(c_state, 1, 1) AS cust_nation,
    EXTRACT(year FROM o_entry_d) AS l_year,
    sum(ol_amount) AS revenue
FROM supplier, stock, orderline, "order", customer, nation n1, nation n2
WHERE ol_supply_w_id = s_w_id
AND ol_i_id = s_i_id
AND s_su_suppkey = su_suppkey
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND su_nationkey = n1.n_nationkey
AND c_n_nationkey = n2.n_nationkey
AND (
    (n1.n_name = 'GERMANY' AND n2.n_name = 'CAMBODIA')
    OR
    (n1.n_name = 'CAMBODIA' AND n2.n_name = 'GERMANY')
)
AND ol_delivery_d BETWEEN TIMESTAMP '2007-01-02 00:00:00.000000' AND TIMESTAMP '2012-01-02 00:00:00.000000'
GROUP BY su_nationkey, substr(c_state, 1, 1), EXTRACT(year FROM o_entry_d)
ORDER BY su_nationkey, cust_nation, l_year
----
{
  "Let": {
    "id": 0,
    "value": {
      "ArrangeBy": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 22
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 2
                    }
                  ],
                  {
                    "0": 1,
                    "1": 2,
                    "2": 0,
                    "3": 3
                  },
                  [
                    0,
                    1,
                    3
                  ]
                ]
              ]
            },
            "plan": {
              "Arrangement": [
                [
                  {
                    "Column": 2
                  }
                ],
                null,
                {
                  "expressions": [],
                  "predicates": [
                    [
                      3,
                      {
                        "CallVariadic": {
                          "func": "Or",
                          "exprs": [
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          7,
                                          71,
                                          69,
                                          82,
                                          77,
                                          65,
                                          78,
                                          89
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          8,
                                          67,
                                          65,
                                          77,
                                          66,
                                          79,
                                          68,
                                          73,
                                          65
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  ],
                  "projection": [
                    1,
                    2
                  ],
                  "input_arity": 4
                }
              ]
            }
          }
        },
        "forms": {
          "raw": true,
          "arranged": [
            [
              [
                {
                  "Column": 0
                }
              ],
              {
                "0": 0,
                "1": 1
              },
              [
                1
              ]
            ]
          ]
        },
        "input_key": null,
        "input_mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            0,
            1
          ],
          "input_arity": 2
        }
      }
    },
    "body": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 24
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 7
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 18
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15,
                              "16": 16,
                              "17": 17
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15,
                              16,
                              17
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0,
                              17
                            ],
                            "input_arity": 18
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2
                        },
                        [
                          2
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2
                    ],
                    "input_arity": 3
                  }
                }
              },
              {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 13
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 2,
                          "1": 1,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9
                        },
                        [
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        },
                        {
                          "Column": 0
                        }
                      ],
                      null,
                      {
                        "expressions": [
                          {
                            "CallUnary": {
                              "func": {
                                "CastDateToTimestamp": null
                              },
                              "expr": {
                                "Column": 6
                              }
                            }
                          }
                        ],
                        "predicates": [
                          [
                            5,
                            {
                              "CallUnary": {
                                "func": {
                                  "Not": null
                                },
                                "expr": {
                                  "CallUnary": {
                                    "func": {
                                      "IsNull": null
                                    },
                                    "expr": {
                                      "Column": 4
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          [
                            6,
                            {
                              "CallUnary": {
                                "func": {
                                  "Not": null
                                },
                                "expr": {
                                  "CallUnary": {
                                    "func": {
                                      "IsNull": null
                                    },
                                    "expr": {
                                      "Column": 5
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          [
                            11,
                            {
                              "CallBinary": {
                                "func": "Lte",
                                "expr1": {
                                  "Column": 10
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          12,
                                          220,
                                          7,
                                          0,
                                          0,
                                          2,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Timestamp",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          [
                            11,
                            {
                              "CallBinary": {
                                "func": "Gte",
                                "expr1": {
                                  "Column": 10
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          12,
                                          215,
                                          7,
                                          0,
                                          0,
                                          2,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Timestamp",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          2,
                          1,
                          0,
                          4,
                          5,
                          8
                        ],
                        "input_arity": 10
                      }
                    ]
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 11
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              },
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 3,
                              "1": 1,
                              "2": 0,
                              "3": 2,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            },
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                3,
                                {
                                  "CallUnary": {
                                    "func": {
                                      "Not": null
                                    },
                                    "expr": {
                                      "CallUnary": {
                                        "func": {
                                          "IsNull": null
                                        },
                                        "expr": {
                                          "Column": 2
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              3,
                              1,
                              0,
                              2,
                              4
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4
                        },
                        [
                          3,
                          4
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "input_arity": 5
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 2,
                              "1": 1,
                              "2": 0,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15,
                              "16": 16,
                              "17": 17,
                              "18": 18,
                              "19": 19,
                              "20": 20,
                              "21": 21
                            },
                            [
                              0,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15,
                              16,
                              17,
                              18,
                              19,
                              20,
                              21
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                22,
                                {
                                  "CallUnary": {
                                    "func": {
                                      "Not": null
                                    },
                                    "expr": {
                                      "CallUnary": {
                                        "func": {
                                          "IsNull": null
                                        },
                                        "expr": {
                                          "Column": 21
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              2,
                              1,
                              0,
                              9,
                              21
                            ],
                            "input_arity": 22
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4
                        },
                        [
                          3,
                          4
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "input_arity": 5
                  }
                }
              },
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 2,
                "source_key": null,
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 3,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      3,
                      4,
                      5
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7
                          ],
                          "input_arity": 8
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 4,
                    "stream_key": [
                      {
                        "Column": 5
                      },
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      2,
                      3,
                      4,
                      6
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            3,
                            4,
                            5,
                            6,
                            7,
                            8
                          ],
                          "input_arity": 9
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      2,
                      3,
                      4,
                      5
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            6,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            5,
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 5,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 6,
                    "stream_key": [
                      {
                        "Column": 4
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2,
                      3,
                      5
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              7,
                              {
                                "CallVariadic": {
                                  "func": "Or",
                                  "exprs": [
                                    {
                                      "CallVariadic": {
                                        "func": "And",
                                        "exprs": [
                                          {
                                            "CallBinary": {
                                              "func": "Eq",
                                              "expr1": {
                                                "Column": 5
                                              },
                                              "expr2": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        19,
                                                        7,
                                                        71,
                                                        69,
                                                        82,
                                                        77,
                                                        65,
                                                        78,
                                                        89
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": {
                                                      "Char": {
                                                        "length": null
                                                      }
                                                    },
                                                    "nullable": false
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "CallBinary": {
                                              "func": "Eq",
                                              "expr1": {
                                                "Column": 6
                                              },
                                              "expr2": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        19,
                                                        8,
                                                        67,
                                                        65,
                                                        77,
                                                        66,
                                                        79,
                                                        68,
                                                        73,
                                                        65
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": {
                                                      "Char": {
                                                        "length": null
                                                      }
                                                    },
                                                    "nullable": false
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "CallVariadic": {
                                        "func": "And",
                                        "exprs": [
                                          {
                                            "CallBinary": {
                                              "func": "Eq",
                                              "expr1": {
                                                "Column": 5
                                              },
                                              "expr2": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        19,
                                                        8,
                                                        67,
                                                        65,
                                                        77,
                                                        66,
                                                        79,
                                                        68,
                                                        73,
                                                        65
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": {
                                                      "Char": {
                                                        "length": null
                                                      }
                                                    },
                                                    "nullable": false
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "CallBinary": {
                                              "func": "Eq",
                                              "expr1": {
                                                "Column": 6
                                              },
                                              "expr2": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        19,
                                                        7,
                                                        71,
                                                        69,
                                                        82,
                                                        77,
                                                        65,
                                                        78,
                                                        89
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": {
                                                      "Char": {
                                                        "length": null
                                                      }
                                                    },
                                                    "nullable": false
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          ],
                          "projection": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallVariadic": {
                    "func": "Substr",
                    "exprs": [
                      {
                        "CallUnary": {
                          "func": {
                            "CastCharToString": null
                          },
                          "expr": {
                            "Column": 3
                          }
                        }
                      },
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                5,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Int64",
                            "nullable": false
                          }
                        ]
                      },
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                5,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Int64",
                            "nullable": false
                          }
                        ]
                      }
                    ]
                  }
                },
                {
                  "CallUnary": {
                    "func": {
                      "ExtractDate": "Year"
                    },
                    "expr": {
                      "Column": 2
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                0,
                4,
                5
              ],
              "input_arity": 4
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                1
              ],
              "input_arity": 4
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 1
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 1
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    }
  }
}

Finish order_by=(#0 asc nulls_last, #1 asc nulls_last, #2 asc nulls_last) limit=none offset=0 project=(#0..=#3)

EOF

# Query 08
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    EXTRACT(year FROM o_entry_d) AS l_year,
    sum(CASE WHEN n2.n_name = 'GERMANY' THEN ol_amount ELSE 0 END) / CASE WHEN sum(ol_amount) = 0 THEN 1 ELSE sum(ol_amount) END AS mkt_share
FROM item, supplier, stock, orderline, "order", customer, nation n1, nation n2, region
WHERE i_id = s_i_id
AND ol_i_id = s_i_id
AND ol_supply_w_id = s_w_id
AND s_su_suppkey = su_suppkey
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND n1.n_nationkey = c_n_nationkey
AND n1.n_regionkey = r_regionkey
AND ol_i_id < 1000
AND r_name = 'EUROPE'
AND su_nationkey = n2.n_nationkey
AND o_entry_d BETWEEN TIMESTAMP '2007-01-02 00:00:00.000000' AND TIMESTAMP '2012-01-02 00:00:00.000000'
AND i_data like '%b'
AND i_id = ol_i_id
GROUP BY EXTRACT(year FROM o_entry_d)
ORDER BY l_year
----
Source materialize.public.item (u17):
{
  "expressions": [],
  "predicates": [
    [
      1,
      {
        "CallBinary": {
          "func": "Lt",
          "expr1": {
            "Column": 0
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    4,
                    232,
                    3,
                    0,
                    0
                  ]
                }
              },
              {
                "scalar_type": "Int32",
                "nullable": false
              }
            ]
          }
        }
      }
    ],
    [
      5,
      {
        "CallUnary": {
          "func": {
            "IsLikeMatch": {
              "pattern": "%b",
              "case_insensitive": false,
              "matcher_impl": {
                "String": [
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": "b"
                  }
                ]
              }
            }
          },
          "expr": {
            "CallUnary": {
              "func": {
                "PadChar": {
                  "length": 50
                }
              },
              "expr": {
                "Column": 4
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 5
}

Source materialize.public.region (u26):
{
  "expressions": [],
  "predicates": [
    [
      2,
      {
        "CallBinary": {
          "func": "Eq",
          "expr1": {
            "Column": 1
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    19,
                    6,
                    69,
                    85,
                    82,
                    79,
                    80,
                    69
                  ]
                }
              },
              {
                "scalar_type": {
                  "Char": {
                    "length": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 3
}

Query:
{
  "Mfp": {
    "input": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 17
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0
                          ],
                          "input_arity": 1
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 24
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 7
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 18
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15,
                              "16": 16,
                              "17": 17
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15,
                              16,
                              17
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                2,
                                {
                                  "CallBinary": {
                                    "func": "Lt",
                                    "expr1": {
                                      "Column": 1
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              4,
                                              232,
                                              3,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Int32",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              1,
                              0,
                              17
                            ],
                            "input_arity": 18
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2
                        },
                        [
                          2
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2
                    ],
                    "input_arity": 3
                  }
                }
              },
              {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 13
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 2,
                          "1": 1,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9
                        },
                        [
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        },
                        {
                          "Column": 0
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            5,
                            {
                              "CallBinary": {
                                "func": "Lt",
                                "expr1": {
                                  "Column": 4
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          4,
                                          232,
                                          3,
                                          0,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Int32",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          [
                            6,
                            {
                              "CallUnary": {
                                "func": {
                                  "Not": null
                                },
                                "expr": {
                                  "CallUnary": {
                                    "func": {
                                      "IsNull": null
                                    },
                                    "expr": {
                                      "Column": 5
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          2,
                          1,
                          0,
                          4,
                          5,
                          8
                        ],
                        "input_arity": 10
                      }
                    ]
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 11
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              },
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 3,
                              "1": 1,
                              "2": 0,
                              "3": 2,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            },
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [
                              {
                                "CallUnary": {
                                  "func": {
                                    "CastDateToTimestamp": null
                                  },
                                  "expr": {
                                    "Column": 4
                                  }
                                }
                              }
                            ],
                            "predicates": [
                              [
                                3,
                                {
                                  "CallUnary": {
                                    "func": {
                                      "Not": null
                                    },
                                    "expr": {
                                      "CallUnary": {
                                        "func": {
                                          "IsNull": null
                                        },
                                        "expr": {
                                          "Column": 2
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              [
                                9,
                                {
                                  "CallBinary": {
                                    "func": "Lte",
                                    "expr1": {
                                      "Column": 8
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              12,
                                              220,
                                              7,
                                              0,
                                              0,
                                              2,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Timestamp",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ],
                              [
                                9,
                                {
                                  "CallBinary": {
                                    "func": "Gte",
                                    "expr1": {
                                      "Column": 8
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              12,
                                              215,
                                              7,
                                              0,
                                              0,
                                              2,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Timestamp",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              3,
                              1,
                              0,
                              2,
                              4
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4
                        },
                        [
                          3,
                          4
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "input_arity": 5
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 2,
                              "1": 1,
                              "2": 0,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15,
                              "16": 16,
                              "17": 17,
                              "18": 18,
                              "19": 19,
                              "20": 20,
                              "21": 21
                            },
                            [
                              0,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15,
                              16,
                              17,
                              18,
                              19,
                              20,
                              21
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                22,
                                {
                                  "CallUnary": {
                                    "func": {
                                      "Not": null
                                    },
                                    "expr": {
                                      "CallUnary": {
                                        "func": {
                                          "IsNull": null
                                        },
                                        "expr": {
                                          "Column": 21
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              2,
                              1,
                              0,
                              21
                            ],
                            "input_arity": 22
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3
                        },
                        [
                          3
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3
                    ],
                    "input_arity": 4
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 22
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 0,
                              "3": 3
                            },
                            [
                              0,
                              1,
                              3
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 4
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 22
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 0,
                              "3": 3
                            },
                            [
                              0,
                              1,
                              3
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              2
                            ],
                            "input_arity": 4
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 26
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0
                          ],
                          "input_arity": 1
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 3,
                "source_key": null,
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 4,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      3,
                      4,
                      5
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7
                          ],
                          "input_arity": 8
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 5,
                    "stream_key": [
                      {
                        "Column": 5
                      },
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      2,
                      3,
                      4,
                      6
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            3,
                            4,
                            5,
                            6,
                            7
                          ],
                          "input_arity": 8
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 2,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            5,
                            0,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      0,
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            4,
                            1,
                            2,
                            3
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 6,
                    "stream_key": [
                      {
                        "Column": 3
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 7,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 8,
                    "stream_key": [
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3
                          ],
                          "input_arity": 4
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallUnary": {
                    "func": {
                      "ExtractDate": "Year"
                    },
                    "expr": {
                      "Column": 1
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                3
              ],
              "input_arity": 3
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "If": {
                    "cond": {
                      "CallBinary": {
                        "func": "Eq",
                        "expr1": {
                          "Column": 2
                        },
                        "expr2": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  19,
                                  7,
                                  71,
                                  69,
                                  82,
                                  77,
                                  65,
                                  78,
                                  89
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Char": {
                                  "length": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        }
                      }
                    },
                    "then": {
                      "Column": 0
                    },
                    "els": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                3,
                0
              ],
              "input_arity": 3
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "If": {
                    "cond": {
                      "CallBinary": {
                        "func": "Eq",
                        "expr1": {
                          "Column": 2
                        },
                        "expr2": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  19,
                                  7,
                                  71,
                                  69,
                                  82,
                                  77,
                                  65,
                                  78,
                                  89
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Char": {
                                  "length": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        }
                      }
                    },
                    "then": {
                      "Column": 0
                    },
                    "els": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                },
                "distinct": false
              },
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 0
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "If": {
                      "cond": {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 2
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    7,
                                    71,
                                    69,
                                    82,
                                    77,
                                    65,
                                    78,
                                    89
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      "then": {
                        "Column": 0
                      },
                      "els": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                29,
                                1,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Numeric": {
                                "max_scale": null
                              }
                            },
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  "distinct": false
                }
              ],
              [
                1,
                1,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 0
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "mfp": {
      "expressions": [
        {
          "CallBinary": {
            "func": "DivNumeric",
            "expr1": {
              "Column": 1
            },
            "expr2": {
              "If": {
                "cond": {
                  "CallBinary": {
                    "func": "Eq",
                    "expr1": {
                      "Column": 2
                    },
                    "expr2": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          29,
                          1,
                          0,
                          0,
                          1,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": {
                        "Numeric": {
                          "max_scale": null
                        }
                      },
                      "nullable": false
                    }
                  ]
                },
                "els": {
                  "Column": 2
                }
              }
            }
          }
        }
      ],
      "predicates": [],
      "projection": [
        0,
        3
      ],
      "input_arity": 3
    },
    "input_key_val": [
      [
        {
          "Column": 0
        }
      ],
      null
    ]
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0, #1)

EOF

# Query 09
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    n_name, EXTRACT(year FROM o_entry_d) AS l_year,
    sum(ol_amount) AS sum_profit
FROM item, stock, supplier, orderline, "order", nation
WHERE ol_i_id = s_i_id
AND ol_supply_w_id = s_w_id
AND s_su_suppkey = su_suppkey
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND ol_i_id = i_id
AND su_nationkey = n_nationkey
AND i_data like '%BB'
GROUP BY n_name, EXTRACT(year FROM o_entry_d)
ORDER BY n_name, l_year DESC
----
Source materialize.public.item (u17):
{
  "expressions": [],
  "predicates": [
    [
      5,
      {
        "CallUnary": {
          "func": {
            "IsLikeMatch": {
              "pattern": "%BB",
              "case_insensitive": false,
              "matcher_impl": {
                "String": [
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": "BB"
                  }
                ]
              }
            }
          },
          "expr": {
            "CallUnary": {
              "func": {
                "PadChar": {
                  "length": 50
                }
              },
              "expr": {
                "Column": 4
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 5
}

Query:
{
  "Reduce": {
    "input": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 17
                    }
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 1
                    }
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 18
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15,
                          "16": 16,
                          "17": 17
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16,
                          17
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 1
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0,
                          17
                        ],
                        "input_arity": 18
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2
                    },
                    [
                      2
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2
                ],
                "input_arity": 3
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 24
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0
                        ],
                        "input_arity": 7
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "Get": {
              "id": {
                "Global": {
                  "User": 13
                }
              },
              "keys": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 2,
                      "1": 1,
                      "2": 0,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9
                    },
                    [
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9
                    ]
                  ]
                ]
              },
              "plan": {
                "Arrangement": [
                  [
                    {
                      "Column": 2
                    },
                    {
                      "Column": 1
                    },
                    {
                      "Column": 0
                    }
                  ],
                  null,
                  {
                    "expressions": [],
                    "predicates": [
                      [
                        5,
                        {
                          "CallUnary": {
                            "func": {
                              "Not": null
                            },
                            "expr": {
                              "CallUnary": {
                                "func": {
                                  "IsNull": null
                                },
                                "expr": {
                                  "Column": 4
                                }
                              }
                            }
                          }
                        }
                      ],
                      [
                        6,
                        {
                          "CallUnary": {
                            "func": {
                              "Not": null
                            },
                            "expr": {
                              "CallUnary": {
                                "func": {
                                  "IsNull": null
                                },
                                "expr": {
                                  "Column": 5
                                }
                              }
                            }
                          }
                        }
                      ]
                    ],
                    "projection": [
                      2,
                      1,
                      0,
                      4,
                      5,
                      8
                    ],
                    "input_arity": 10
                  }
                ]
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 11
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 3,
                          "1": 1,
                          "2": 0,
                          "3": 2,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7
                        },
                        [
                          0,
                          4,
                          5,
                          6,
                          7
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        },
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          3,
                          1,
                          0,
                          4
                        ],
                        "input_arity": 8
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3
                    },
                    [
                      3
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3
                ],
                "input_arity": 4
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 22
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          2
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 3,
            "source_key": null,
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 4,
                "stream_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  3,
                  4,
                  5
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        3,
                        4,
                        5,
                        6
                      ],
                      "input_arity": 7
                    }
                  }
                }
              },
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  }
                ],
                "stream_thinning": [
                  2,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        4,
                        0,
                        2,
                        3
                      ],
                      "input_arity": 5
                    }
                  }
                }
              },
              {
                "lookup_relation": 0,
                "stream_key": [
                  {
                    "Column": 1
                  }
                ],
                "stream_thinning": [
                  0,
                  2,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                }
              },
              {
                "lookup_relation": 2,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1,
                  2
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        3,
                        1,
                        2
                      ],
                      "input_arity": 4
                    }
                  }
                }
              },
              {
                "lookup_relation": 5,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1,
                  2
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    },
    "key_val_plan": {
      "key_plan": {
        "mfp": {
          "expressions": [
            {
              "CallUnary": {
                "func": {
                  "ExtractDate": "Year"
                },
                "expr": {
                  "Column": 1
                }
              }
            }
          ],
          "predicates": [],
          "projection": [
            2,
            3
          ],
          "input_arity": 3
        }
      },
      "val_plan": {
        "mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            0
          ],
          "input_arity": 3
        }
      }
    },
    "plan": {
      "Accumulable": {
        "full_aggrs": [
          {
            "func": "SumNumeric",
            "expr": {
              "Column": 0
            },
            "distinct": false
          }
        ],
        "simple_aggrs": [
          [
            0,
            0,
            {
              "func": "SumNumeric",
              "expr": {
                "Column": 0
              },
              "distinct": false
            }
          ]
        ],
        "distinct_aggrs": []
      }
    },
    "input_key": null
  }
}

Finish order_by=(#0 asc nulls_last, #1 desc nulls_first) limit=none offset=0 project=(#0..=#2)

EOF

# Query 10
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    c_id, c_last, sum(ol_amount) AS revenue, c_city, c_phone, n_name
FROM customer, "order", orderline, nation
WHERE c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND o_entry_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
AND o_entry_d <= ol_delivery_d
AND n_nationkey = c_n_nationkey
GROUP BY c_id, c_last, c_city, c_phone, n_name
ORDER BY revenue DESC
----
{
  "Mfp": {
    "input": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 2,
                              "1": 1,
                              "2": 0,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15,
                              "16": 16,
                              "17": 17,
                              "18": 18,
                              "19": 19,
                              "20": 20,
                              "21": 21
                            },
                            [
                              0,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15,
                              16,
                              17,
                              18,
                              19,
                              20,
                              21
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                22,
                                {
                                  "CallUnary": {
                                    "func": {
                                      "Not": null
                                    },
                                    "expr": {
                                      "CallUnary": {
                                        "func": {
                                          "IsNull": null
                                        },
                                        "expr": {
                                          "Column": 21
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              2,
                              1,
                              0,
                              5,
                              8,
                              11,
                              21
                            ],
                            "input_arity": 22
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          3,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      6
                    ],
                    "input_arity": 7
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 11
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              },
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 3,
                              "1": 1,
                              "2": 0,
                              "3": 2,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            },
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                3,
                                {
                                  "CallUnary": {
                                    "func": {
                                      "Not": null
                                    },
                                    "expr": {
                                      "CallUnary": {
                                        "func": {
                                          "IsNull": null
                                        },
                                        "expr": {
                                          "Column": 2
                                        }
                                      }
                                    }
                                  }
                                }
                              ],
                              [
                                5,
                                {
                                  "CallBinary": {
                                    "func": "Gte",
                                    "expr1": {
                                      "CallUnary": {
                                        "func": {
                                          "CastDateToTimestamp": null
                                        },
                                        "expr": {
                                          "Column": 4
                                        }
                                      }
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              12,
                                              215,
                                              7,
                                              0,
                                              0,
                                              2,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Timestamp",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              3,
                              1,
                              0,
                              2,
                              4
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4
                        },
                        [
                          3,
                          4
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "input_arity": 5
                  }
                }
              },
              {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 13
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 2,
                          "1": 1,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9
                        },
                        [
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        },
                        {
                          "Column": 0
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          2,
                          1,
                          0,
                          6,
                          8
                        ],
                        "input_arity": 10
                      }
                    ]
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 22
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 0,
                              "3": 3
                            },
                            [
                              0,
                              1,
                              3
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              2
                            ],
                            "input_arity": 4
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 2,
                "source_key": null,
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              7,
                              {
                                "CallBinary": {
                                  "func": "Lte",
                                  "expr1": {
                                    "Column": 6
                                  },
                                  "expr2": {
                                    "Column": 3
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            5,
                            1,
                            2,
                            4
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            4,
                            5,
                            6,
                            7,
                            3
                          ],
                          "input_arity": 8
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 3,
                    "stream_key": [
                      {
                        "Column": 4
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2,
                      3,
                      5
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0,
                1,
                2,
                3,
                5
              ],
              "input_arity": 6
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                4
              ],
              "input_arity": 6
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 4
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 4
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "mfp": {
      "expressions": [],
      "predicates": [],
      "projection": [
        0,
        1,
        5,
        2,
        3,
        4
      ],
      "input_arity": 6
    },
    "input_key_val": [
      [
        {
          "Column": 0
        },
        {
          "Column": 1
        },
        {
          "Column": 2
        },
        {
          "Column": 3
        },
        {
          "Column": 4
        }
      ],
      null
    ]
  }
}

Finish order_by=(#2 desc nulls_first) limit=none offset=0 project=(#0..=#5)

EOF

# Query 11
query T multiline
EXPLAIN physical PLAN FOR
SELECT s_i_id, sum(s_order_cnt) AS ordercount
FROM stock, supplier, nation
WHERE s_su_suppkey = su_suppkey
AND su_nationkey = n_nationkey
AND n_name = 'GERMANY'
GROUP BY s_i_id
HAVING sum(s_order_cnt) > (
    SELECT sum(s_order_cnt) * 0.005
    FROM stock, supplier, nation
    WHERE s_su_suppkey = su_suppkey
    AND su_nationkey = n_nationkey
    AND n_name = 'GERMANY'
)
ORDER BY ordercount DESC
----
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 18
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 17
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 4,
                          "4": 5,
                          "5": 6,
                          "6": 7,
                          "7": 8,
                          "8": 9,
                          "9": 10,
                          "10": 11,
                          "11": 12,
                          "12": 13,
                          "13": 14,
                          "14": 15,
                          "15": 16,
                          "16": 17,
                          "17": 0
                        },
                        [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 17
                      }
                    ],
                    {
                      "0": 1,
                      "1": 2,
                      "2": 3,
                      "3": 4,
                      "4": 5,
                      "5": 6,
                      "6": 7,
                      "7": 8,
                      "8": 9,
                      "9": 10,
                      "10": 11,
                      "11": 12,
                      "12": 13,
                      "13": 14,
                      "14": 15,
                      "15": 16,
                      "16": 17,
                      "17": 0
                    },
                    [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15,
                      16
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 17
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15,
                  16,
                  17,
                  0
                ],
                "input_arity": 18
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 24
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0
                        ],
                        "input_arity": 7
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 22
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            3,
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          7,
                                          71,
                                          69,
                                          82,
                                          77,
                                          65,
                                          78,
                                          89
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          1
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 0,
            "source_key": [
              {
                "Column": 17
              }
            ],
            "initial_closure": {
              "ready_equivalences": [],
              "before": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    0
                  ],
                  "input_arity": 18
                }
              }
            },
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 17
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15,
                  16
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        15,
                        18
                      ],
                      "input_arity": 19
                    }
                  }
                }
              },
              {
                "lookup_relation": 2,
                "stream_key": [
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  0,
                  1
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2
                      ],
                      "input_arity": 3
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    },
    "body": {
      "Join": {
        "inputs": [
          {
            "Reduce": {
              "input": {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": "PassArrangements"
                }
              },
              "key_val_plan": {
                "key_plan": {
                  "mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 2
                  }
                },
                "val_plan": {
                  "mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              "plan": {
                "Accumulable": {
                  "full_aggrs": [
                    {
                      "func": "SumInt32",
                      "expr": {
                        "Column": 1
                      },
                      "distinct": false
                    }
                  ],
                  "simple_aggrs": [
                    [
                      0,
                      0,
                      {
                        "func": "SumInt32",
                        "expr": {
                          "Column": 1
                        },
                        "distinct": false
                      }
                    ]
                  ],
                  "distinct_aggrs": []
                }
              },
              "input_key": null
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Reduce": {
                  "input": {
                    "Get": {
                      "id": {
                        "Local": 0
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1
                          ],
                          "input_arity": 2
                        }
                      }
                    }
                  },
                  "key_val_plan": {
                    "key_plan": {
                      "mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [],
                        "input_arity": 1
                      }
                    },
                    "val_plan": {
                      "mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0
                        ],
                        "input_arity": 1
                      }
                    }
                  },
                  "plan": {
                    "Accumulable": {
                      "full_aggrs": [
                        {
                          "func": "SumInt32",
                          "expr": {
                            "Column": 0
                          },
                          "distinct": false
                        }
                      ],
                      "simple_aggrs": [
                        [
                          0,
                          0,
                          {
                            "func": "SumInt32",
                            "expr": {
                              "Column": 0
                            },
                            "distinct": false
                          }
                        ]
                      ],
                      "distinct_aggrs": []
                    }
                  },
                  "input_key": null
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [],
                    {
                      "0": 0
                    },
                    [
                      0
                    ]
                  ]
                ]
              },
              "input_key": [],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 0,
            "source_key": [
              {
                "Column": 0
              }
            ],
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [],
                "stream_thinning": [
                  0,
                  1
                ],
                "lookup_key": [],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [
                        [
                          3,
                          {
                            "CallBinary": {
                              "func": "Gt",
                              "expr1": {
                                "CallUnary": {
                                  "func": {
                                    "CastInt64ToNumeric": null
                                  },
                                  "expr": {
                                    "Column": 1
                                  }
                                }
                              },
                              "expr2": {
                                "CallBinary": {
                                  "func": "MulNumeric",
                                  "expr1": {
                                    "CallUnary": {
                                      "func": {
                                        "CastInt64ToNumeric": null
                                      },
                                      "expr": {
                                        "Column": 2
                                      }
                                    }
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            29,
                                            1,
                                            253,
                                            0,
                                            5,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": {
                                          "Numeric": {
                                            "max_scale": null
                                          }
                                        },
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      ],
                      "projection": [
                        0,
                        1
                      ],
                      "input_arity": 3
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    }
  }
}

Finish order_by=(#1 desc nulls_first) limit=none offset=0 project=(#0, #1)

EOF

# Query 12
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    o_ol_cnt,
    sum(CASE WHEN o_carrier_id = 1 OR o_carrier_id = 2 THEN 1 ELSE 0 END) AS high_line_count,
    sum(CASE WHEN o_carrier_id <> 1 AND o_carrier_id <> 2 THEN 1 ELSE 0 END) AS low_line_count
FROM
    "order", orderline
WHERE ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
AND o_entry_d <= ol_delivery_d
AND ol_delivery_d < TIMESTAMP '2020-01-01 00:00:00.000000'
GROUP BY o_ol_cnt
ORDER BY o_ol_cnt
----
{
  "Reduce": {
    "input": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 11
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 3,
                          "1": 1,
                          "2": 0,
                          "3": 2,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7
                        },
                        [
                          0,
                          4,
                          5,
                          6,
                          7
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        },
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          3,
                          1,
                          0,
                          4,
                          5,
                          6
                        ],
                        "input_arity": 8
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5
                    },
                    [
                      3,
                      4,
                      5
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "input_arity": 6
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 13
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 2,
                          "1": 1,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9
                        },
                        [
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 2,
                      "1": 1,
                      "2": 0,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9
                    },
                    [
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 2
                },
                {
                  "Column": 1
                },
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  2,
                  1,
                  0,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9
                ],
                "input_arity": 10
              }
            }
          }
        ],
        "plan": {
          "Delta": {
            "path_plans": [
              {
                "source_relation": 0,
                "source_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "input_arity": 6
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      3,
                      4,
                      5
                    ],
                    "lookup_key": [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              10,
                              {
                                "CallBinary": {
                                  "func": "Lt",
                                  "expr1": {
                                    "CallUnary": {
                                      "func": {
                                        "CastDateToTimestamp": null
                                      },
                                      "expr": {
                                        "Column": 9
                                      }
                                    }
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            12,
                                            228,
                                            7,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Timestamp",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            [
                              10,
                              {
                                "CallBinary": {
                                  "func": "Lte",
                                  "expr1": {
                                    "Column": 3
                                  },
                                  "expr2": {
                                    "Column": 9
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            4,
                            5
                          ],
                          "input_arity": 13
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              },
              {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 2
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [
                        [
                          7,
                          {
                            "CallBinary": {
                              "func": "Lt",
                              "expr1": {
                                "CallUnary": {
                                  "func": {
                                    "CastDateToTimestamp": null
                                  },
                                  "expr": {
                                    "Column": 6
                                  }
                                }
                              },
                              "expr2": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        12,
                                        228,
                                        7,
                                        0,
                                        0,
                                        1,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Timestamp",
                                    "nullable": false
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      ],
                      "projection": [
                        2,
                        1,
                        0,
                        6
                      ],
                      "input_arity": 10
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              5,
                              {
                                "CallBinary": {
                                  "func": "Lte",
                                  "expr1": {
                                    "Column": 4
                                  },
                                  "expr2": {
                                    "Column": 3
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            5,
                            6
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            ]
          }
        }
      }
    },
    "key_val_plan": {
      "key_plan": {
        "mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            1
          ],
          "input_arity": 2
        }
      },
      "val_plan": {
        "mfp": {
          "expressions": [
            {
              "If": {
                "cond": {
                  "CallVariadic": {
                    "func": "Or",
                    "exprs": [
                      {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    1,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    2,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          1,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                },
                "els": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          0,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            {
              "If": {
                "cond": {
                  "CallVariadic": {
                    "func": "And",
                    "exprs": [
                      {
                        "CallBinary": {
                          "func": "NotEq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    1,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "CallBinary": {
                          "func": "NotEq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    2,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          1,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                },
                "els": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          0,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            }
          ],
          "predicates": [],
          "projection": [
            2,
            3
          ],
          "input_arity": 2
        }
      }
    },
    "plan": {
      "Accumulable": {
        "full_aggrs": [
          {
            "func": "SumInt32",
            "expr": {
              "If": {
                "cond": {
                  "CallVariadic": {
                    "func": "Or",
                    "exprs": [
                      {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    1,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    2,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          1,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                },
                "els": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          0,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            "distinct": false
          },
          {
            "func": "SumInt32",
            "expr": {
              "If": {
                "cond": {
                  "CallVariadic": {
                    "func": "And",
                    "exprs": [
                      {
                        "CallBinary": {
                          "func": "NotEq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    1,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "CallBinary": {
                          "func": "NotEq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    4,
                                    2,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int32",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          1,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                },
                "els": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          0,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            "distinct": false
          }
        ],
        "simple_aggrs": [
          [
            0,
            0,
            {
              "func": "SumInt32",
              "expr": {
                "If": {
                  "cond": {
                    "CallVariadic": {
                      "func": "Or",
                      "exprs": [
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 0
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      4,
                                      1,
                                      0,
                                      0,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": "Int32",
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 0
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      4,
                                      2,
                                      0,
                                      0,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": "Int32",
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "then": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            4,
                            1,
                            0,
                            0,
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": "Int32",
                        "nullable": false
                      }
                    ]
                  },
                  "els": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            4,
                            0,
                            0,
                            0,
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": "Int32",
                        "nullable": false
                      }
                    ]
                  }
                }
              },
              "distinct": false
            }
          ],
          [
            1,
            1,
            {
              "func": "SumInt32",
              "expr": {
                "If": {
                  "cond": {
                    "CallVariadic": {
                      "func": "And",
                      "exprs": [
                        {
                          "CallBinary": {
                            "func": "NotEq",
                            "expr1": {
                              "Column": 0
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      4,
                                      1,
                                      0,
                                      0,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": "Int32",
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "NotEq",
                            "expr1": {
                              "Column": 0
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      4,
                                      2,
                                      0,
                                      0,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": "Int32",
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "then": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            4,
                            1,
                            0,
                            0,
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": "Int32",
                        "nullable": false
                      }
                    ]
                  },
                  "els": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            4,
                            0,
                            0,
                            0,
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": "Int32",
                        "nullable": false
                      }
                    ]
                  }
                }
              },
              "distinct": false
            }
          ]
        ],
        "distinct_aggrs": []
      }
    },
    "input_key": null
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0..=#2)

EOF

# Query 13
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    c_count, count(*) AS custdist
FROM (
    SELECT c_id, count(o_id) as c_count
    FROM customer
    LEFT OUTER JOIN "order" ON (
        c_w_id = o_w_id AND c_d_id = o_d_id AND c_id = o_c_id AND o_carrier_id > 8
    )
    GROUP BY c_id
) AS c_orders
GROUP BY c_count
ORDER BY custdist DESC, c_count DESC
----
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 4
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 2,
                          "1": 1,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15,
                          "16": 16,
                          "17": 17,
                          "18": 18,
                          "19": 19,
                          "20": 20,
                          "21": 21
                        },
                        [
                          0,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16,
                          17,
                          18,
                          19,
                          20,
                          21
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9,
                      "10": 10,
                      "11": 11,
                      "12": 12,
                      "13": 13,
                      "14": 14,
                      "15": 15,
                      "16": 16,
                      "17": 17,
                      "18": 18,
                      "19": 19,
                      "20": 20,
                      "21": 21
                    },
                    [
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15,
                      16,
                      17,
                      18,
                      19,
                      20,
                      21
                    ]
                  ],
                  [
                    [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 2,
                      "1": 1,
                      "2": 0,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9,
                      "10": 10,
                      "11": 11,
                      "12": 12,
                      "13": 13,
                      "14": 14,
                      "15": 15,
                      "16": 16,
                      "17": 17,
                      "18": 18,
                      "19": 19,
                      "20": 20,
                      "21": 21
                    },
                    [
                      0,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15,
                      16,
                      17,
                      18,
                      19,
                      20,
                      21
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 2
                },
                {
                  "Column": 1
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  2,
                  1,
                  0,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15,
                  16,
                  17,
                  18,
                  19,
                  20,
                  21
                ],
                "input_arity": 22
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 11
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 3,
                          "1": 1,
                          "2": 0,
                          "3": 2,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7
                        },
                        [
                          0,
                          4,
                          5,
                          6,
                          7
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 3
                      }
                    ],
                    {
                      "0": 3,
                      "1": 1,
                      "2": 0,
                      "3": 2,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7
                    },
                    [
                      0,
                      4,
                      5,
                      6,
                      7
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 2
                },
                {
                  "Column": 1
                },
                {
                  "Column": 3
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  3,
                  1,
                  0,
                  2,
                  4,
                  5,
                  6,
                  7
                ],
                "input_arity": 8
              }
            }
          }
        ],
        "plan": {
          "Delta": {
            "path_plans": [
              {
                "source_relation": 0,
                "source_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21
                      ],
                      "input_arity": 22
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15,
                      16,
                      17,
                      18,
                      19,
                      20,
                      21
                    ],
                    "lookup_key": [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 3
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              25,
                              {
                                "CallBinary": {
                                  "func": "Gt",
                                  "expr1": {
                                    "Column": 24
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            4,
                                            8,
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Int32",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            2,
                            1,
                            0,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            17,
                            18,
                            19,
                            20,
                            21,
                            22
                          ],
                          "input_arity": 27
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              },
              {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 2
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 3
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [
                        [
                          6,
                          {
                            "CallBinary": {
                              "func": "Gt",
                              "expr1": {
                                "Column": 5
                              },
                              "expr2": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        4,
                                        8,
                                        0,
                                        0,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Int32",
                                    "nullable": false
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      ],
                      "projection": [
                        3,
                        1,
                        0,
                        2
                      ],
                      "input_arity": 8
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 3
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      0
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1,
                            2,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            17,
                            18,
                            19,
                            20,
                            21,
                            22,
                            3
                          ],
                          "input_arity": 23
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            ]
          }
        }
      }
    },
    "body": {
      "Reduce": {
        "input": {
          "Mfp": {
            "input": {
              "Reduce": {
                "input": {
                  "Union": {
                    "inputs": [
                      {
                        "Get": {
                          "id": {
                            "Local": 0
                          },
                          "keys": {
                            "raw": true,
                            "arranged": []
                          },
                          "plan": {
                            "Collection": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                22
                              ],
                              "input_arity": 23
                            }
                          }
                        }
                      },
                      {
                        "Mfp": {
                          "input": {
                            "Union": {
                              "inputs": [
                                {
                                  "Negate": {
                                    "input": {
                                      "Mfp": {
                                        "input": {
                                          "Reduce": {
                                            "input": {
                                              "Get": {
                                                "id": {
                                                  "Local": 0
                                                },
                                                "keys": {
                                                  "raw": true,
                                                  "arranged": []
                                                },
                                                "plan": {
                                                  "Collection": {
                                                    "expressions": [],
                                                    "predicates": [],
                                                    "projection": [
                                                      0,
                                                      1,
                                                      2,
                                                      3,
                                                      4,
                                                      5,
                                                      6,
                                                      7,
                                                      8,
                                                      9,
                                                      10,
                                                      11,
                                                      12,
                                                      13,
                                                      14,
                                                      15,
                                                      16,
                                                      17,
                                                      18,
                                                      19,
                                                      20,
                                                      21
                                                    ],
                                                    "input_arity": 23
                                                  }
                                                }
                                              }
                                            },
                                            "key_val_plan": {
                                              "key_plan": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [
                                                    0,
                                                    1,
                                                    2,
                                                    3,
                                                    4,
                                                    5,
                                                    6,
                                                    7,
                                                    8,
                                                    9,
                                                    10,
                                                    11,
                                                    12,
                                                    13,
                                                    14,
                                                    15,
                                                    16,
                                                    17,
                                                    18,
                                                    19,
                                                    20,
                                                    21
                                                  ],
                                                  "input_arity": 22
                                                }
                                              },
                                              "val_plan": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [],
                                                  "input_arity": 22
                                                }
                                              }
                                            },
                                            "plan": "Distinct",
                                            "input_key": null
                                          }
                                        },
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            0
                                          ],
                                          "input_arity": 22
                                        },
                                        "input_key_val": [
                                          [
                                            {
                                              "Column": 0
                                            },
                                            {
                                              "Column": 1
                                            },
                                            {
                                              "Column": 2
                                            },
                                            {
                                              "Column": 3
                                            },
                                            {
                                              "Column": 4
                                            },
                                            {
                                              "Column": 5
                                            },
                                            {
                                              "Column": 6
                                            },
                                            {
                                              "Column": 7
                                            },
                                            {
                                              "Column": 8
                                            },
                                            {
                                              "Column": 9
                                            },
                                            {
                                              "Column": 10
                                            },
                                            {
                                              "Column": 11
                                            },
                                            {
                                              "Column": 12
                                            },
                                            {
                                              "Column": 13
                                            },
                                            {
                                              "Column": 14
                                            },
                                            {
                                              "Column": 15
                                            },
                                            {
                                              "Column": 16
                                            },
                                            {
                                              "Column": 17
                                            },
                                            {
                                              "Column": 18
                                            },
                                            {
                                              "Column": 19
                                            },
                                            {
                                              "Column": 20
                                            },
                                            {
                                              "Column": 21
                                            }
                                          ],
                                          null
                                        ]
                                      }
                                    }
                                  }
                                },
                                {
                                  "Get": {
                                    "id": {
                                      "Global": {
                                        "User": 4
                                      }
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 2
                                            },
                                            {
                                              "Column": 1
                                            }
                                          ],
                                          {
                                            "0": 2,
                                            "1": 1,
                                            "2": 0,
                                            "3": 3,
                                            "4": 4,
                                            "5": 5,
                                            "6": 6,
                                            "7": 7,
                                            "8": 8,
                                            "9": 9,
                                            "10": 10,
                                            "11": 11,
                                            "12": 12,
                                            "13": 13,
                                            "14": 14,
                                            "15": 15,
                                            "16": 16,
                                            "17": 17,
                                            "18": 18,
                                            "19": 19,
                                            "20": 20,
                                            "21": 21
                                          },
                                          [
                                            0,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": {
                                      "Arrangement": [
                                        [
                                          {
                                            "Column": 2
                                          },
                                          {
                                            "Column": 1
                                          }
                                        ],
                                        null,
                                        {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            2
                                          ],
                                          "input_arity": 22
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "mfp": {
                            "expressions": [
                              {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Int32",
                                    "nullable": true
                                  }
                                ]
                              }
                            ],
                            "predicates": [],
                            "projection": [
                              0,
                              1
                            ],
                            "input_arity": 1
                          },
                          "input_key_val": null
                        }
                      }
                    ]
                  }
                },
                "key_val_plan": {
                  "key_plan": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 2
                    }
                  },
                  "val_plan": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1
                      ],
                      "input_arity": 2
                    }
                  }
                },
                "plan": {
                  "Accumulable": {
                    "full_aggrs": [
                      {
                        "func": "Count",
                        "expr": {
                          "Column": 1
                        },
                        "distinct": false
                      }
                    ],
                    "simple_aggrs": [
                      [
                        0,
                        0,
                        {
                          "func": "Count",
                          "expr": {
                            "Column": 1
                          },
                          "distinct": false
                        }
                      ]
                    ],
                    "distinct_aggrs": []
                  }
                },
                "input_key": null
              }
            },
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                1
              ],
              "input_arity": 2
            },
            "input_key_val": [
              [
                {
                  "Column": 0
                }
              ],
              null
            ]
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 1
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                }
              ],
              "predicates": [],
              "projection": [
                1
              ],
              "input_arity": 1
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "Count",
                "expr": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "Count",
                  "expr": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            2
                          ]
                        }
                      },
                      {
                        "scalar_type": "Bool",
                        "nullable": false
                      }
                    ]
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    }
  }
}

Finish order_by=(#1 desc nulls_first, #0 desc nulls_first) limit=none offset=0 project=(#0, #1)

EOF

# Query 14
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    100.00 * sum(CASE WHEN i_data LIKE 'PR%' THEN ol_amount ELSE 0 END) / (1 + sum(ol_amount)) AS promo_revenue
FROM orderline, item
WHERE ol_i_id = i_id
AND ol_delivery_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
AND ol_delivery_d < TIMESTAMP '2020-01-02 00:00:00.000000'
----
Source materialize.public.item (u17):
{
  "expressions": [],
  "predicates": [],
  "projection": [
    0,
    4
  ],
  "input_arity": 5
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 13
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 4
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 4,
                              "4": 0,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9
                            },
                            [
                              0,
                              1,
                              2,
                              3,
                              5,
                              6,
                              7,
                              8,
                              9
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 4
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 4,
                          "4": 0,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9
                        },
                        [
                          0,
                          1,
                          2,
                          3,
                          5,
                          6,
                          7,
                          8,
                          9
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 4
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1,
                      2,
                      3,
                      4,
                      0,
                      5,
                      6,
                      7,
                      8,
                      9
                    ],
                    "input_arity": 10
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 17
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1
                          ],
                          "input_arity": 2
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              }
            ],
            "plan": {
              "Delta": {
                "path_plans": [
                  {
                    "source_relation": 0,
                    "source_key": [
                      {
                        "Column": 4
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [
                            {
                              "CallUnary": {
                                "func": {
                                  "CastDateToTimestamp": null
                                },
                                "expr": {
                                  "Column": 6
                                }
                              }
                            }
                          ],
                          "predicates": [
                            [
                              11,
                              {
                                "CallBinary": {
                                  "func": "Lt",
                                  "expr1": {
                                    "Column": 10
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            12,
                                            228,
                                            7,
                                            0,
                                            0,
                                            2,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Timestamp",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            [
                              11,
                              {
                                "CallBinary": {
                                  "func": "Gte",
                                  "expr1": {
                                    "Column": 10
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            12,
                                            215,
                                            7,
                                            0,
                                            0,
                                            2,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Timestamp",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            0,
                            8
                          ],
                          "input_arity": 10
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                1,
                                2
                              ],
                              "input_arity": 3
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  },
                  {
                    "source_relation": 1,
                    "source_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1
                          ],
                          "input_arity": 2
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1
                        ],
                        "lookup_key": [
                          {
                            "Column": 4
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [
                                {
                                  "CallUnary": {
                                    "func": {
                                      "CastDateToTimestamp": null
                                    },
                                    "expr": {
                                      "Column": 7
                                    }
                                  }
                                }
                              ],
                              "predicates": [
                                [
                                  12,
                                  {
                                    "CallBinary": {
                                      "func": "Lt",
                                      "expr1": {
                                        "Column": 11
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                12,
                                                228,
                                                7,
                                                0,
                                                0,
                                                2,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": "Timestamp",
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                [
                                  12,
                                  {
                                    "CallBinary": {
                                      "func": "Gte",
                                      "expr1": {
                                        "Column": 11
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                12,
                                                215,
                                                7,
                                                0,
                                                0,
                                                2,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": "Timestamp",
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                9,
                                1
                              ],
                              "input_arity": 11
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                ]
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [],
              "input_arity": 2
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "If": {
                    "cond": {
                      "CallUnary": {
                        "func": {
                          "IsLikeMatch": {
                            "pattern": "PR%",
                            "case_insensitive": false,
                            "matcher_impl": {
                              "String": [
                                {
                                  "consume": 0,
                                  "many": false,
                                  "suffix": "PR"
                                },
                                {
                                  "consume": 0,
                                  "many": true,
                                  "suffix": ""
                                }
                              ]
                            }
                          }
                        },
                        "expr": {
                          "CallUnary": {
                            "func": {
                              "PadChar": {
                                "length": 50
                              }
                            },
                            "expr": {
                              "Column": 1
                            }
                          }
                        }
                      }
                    },
                    "then": {
                      "Column": 0
                    },
                    "els": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                2,
                0
              ],
              "input_arity": 2
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "If": {
                    "cond": {
                      "CallUnary": {
                        "func": {
                          "IsLikeMatch": {
                            "pattern": "PR%",
                            "case_insensitive": false,
                            "matcher_impl": {
                              "String": [
                                {
                                  "consume": 0,
                                  "many": false,
                                  "suffix": "PR"
                                },
                                {
                                  "consume": 0,
                                  "many": true,
                                  "suffix": ""
                                }
                              ]
                            }
                          }
                        },
                        "expr": {
                          "CallUnary": {
                            "func": {
                              "PadChar": {
                                "length": 50
                              }
                            },
                            "expr": {
                              "Column": 1
                            }
                          }
                        }
                      }
                    },
                    "then": {
                      "Column": 0
                    },
                    "els": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                },
                "distinct": false
              },
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 0
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "If": {
                      "cond": {
                        "CallUnary": {
                          "func": {
                            "IsLikeMatch": {
                              "pattern": "PR%",
                              "case_insensitive": false,
                              "matcher_impl": {
                                "String": [
                                  {
                                    "consume": 0,
                                    "many": false,
                                    "suffix": "PR"
                                  },
                                  {
                                    "consume": 0,
                                    "many": true,
                                    "suffix": ""
                                  }
                                ]
                              }
                            }
                          },
                          "expr": {
                            "CallUnary": {
                              "func": {
                                "PadChar": {
                                  "length": 50
                                }
                              },
                              "expr": {
                                "Column": 1
                              }
                            }
                          }
                        }
                      },
                      "then": {
                        "Column": 0
                      },
                      "els": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                29,
                                1,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Numeric": {
                                "max_scale": null
                              }
                            },
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  "distinct": false
                }
              ],
              [
                1,
                1,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 0
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "body": {
      "Mfp": {
        "input": {
          "Union": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Local": 0
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [],
                            {
                              "0": 0,
                              "1": 1
                            },
                            [
                              0,
                              1
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": []
                  },
                  "input_key": [],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "Mfp": {
                  "input": {
                    "Union": {
                      "inputs": [
                        {
                          "Negate": {
                            "input": {
                              "Get": {
                                "id": {
                                  "Local": 0
                                },
                                "keys": {
                                  "raw": false,
                                  "arranged": [
                                    [
                                      [],
                                      {
                                        "0": 0,
                                        "1": 1
                                      },
                                      [
                                        0,
                                        1
                                      ]
                                    ]
                                  ]
                                },
                                "plan": {
                                  "Arrangement": [
                                    [],
                                    null,
                                    {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [],
                                      "input_arity": 2
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "Constant": {
                            "rows": {
                              "Ok": [
                                [
                                  {
                                    "data": []
                                  },
                                  0,
                                  1
                                ]
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "mfp": {
                    "expressions": [
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Numeric": {
                                "max_scale": null
                              }
                            },
                            "nullable": true
                          }
                        ]
                      },
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Numeric": {
                                "max_scale": 2
                              }
                            },
                            "nullable": true
                          }
                        ]
                      }
                    ],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 0
                  },
                  "input_key_val": null
                }
              }
            ]
          }
        },
        "mfp": {
          "expressions": [
            {
              "CallBinary": {
                "func": "DivNumeric",
                "expr1": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              2,
                              0,
                              1,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    },
                    "expr2": {
                      "Column": 0
                    }
                  }
                },
                "expr2": {
                  "CallBinary": {
                    "func": "AddNumeric",
                    "expr1": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              1,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    },
                    "expr2": {
                      "Column": 1
                    }
                  }
                }
              }
            }
          ],
          "predicates": [],
          "projection": [
            2
          ],
          "input_arity": 2
        },
        "input_key_val": null
      }
    }
  }
}

EOF

# Query 15
query T multiline
EXPLAIN physical PLAN FOR
SELECT su_suppkey, su_name, su_address, su_phone, total_revenue
FROM
    supplier,
    (
        SELECT
            s_su_suppkey AS supplier_no,
            sum(ol_amount) AS total_revenue
        FROM orderline, stock
        WHERE ol_i_id = s_i_id
        AND ol_supply_w_id = s_w_id
        AND ol_delivery_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
        GROUP BY s_su_suppkey
    ) AS revenue
WHERE su_suppkey = supplier_no
AND total_revenue = (
    SELECT max(total_revenue)
    FROM (
        SELECT
            s_su_suppkey AS supplier_no,
            sum(ol_amount) AS total_revenue
            FROM orderline, stock
        WHERE ol_i_id = s_i_id
        AND ol_supply_w_id = s_w_id
        AND ol_delivery_d >= TIMESTAMP '2007-01-02 00:00:00.000000'
        GROUP BY s_su_suppkey
    ) AS revenue
)
ORDER BY su_suppkey
----
{
  "Let": {
    "id": 0,
    "value": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 13
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 5
                              },
                              {
                                "Column": 4
                              }
                            ],
                            {
                              "0": 2,
                              "1": 3,
                              "2": 4,
                              "3": 5,
                              "4": 1,
                              "5": 0,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9
                            },
                            [
                              0,
                              1,
                              2,
                              3,
                              6,
                              7,
                              8,
                              9
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 5
                          },
                          {
                            "Column": 4
                          }
                        ],
                        {
                          "0": 2,
                          "1": 3,
                          "2": 4,
                          "3": 5,
                          "4": 1,
                          "5": 0,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9
                        },
                        [
                          0,
                          1,
                          2,
                          3,
                          6,
                          7,
                          8,
                          9
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 5
                    },
                    {
                      "Column": 4
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      2,
                      3,
                      4,
                      5,
                      1,
                      0,
                      6,
                      7,
                      8,
                      9
                    ],
                    "input_arity": 10
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 18
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15,
                              "16": 16,
                              "17": 17
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15,
                              16,
                              17
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0,
                              17
                            ],
                            "input_arity": 18
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2
                        },
                        [
                          2
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2
                    ],
                    "input_arity": 3
                  }
                }
              }
            ],
            "plan": {
              "Delta": {
                "path_plans": [
                  {
                    "source_relation": 0,
                    "source_key": [
                      {
                        "Column": 5
                      },
                      {
                        "Column": 4
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              7,
                              {
                                "CallBinary": {
                                  "func": "Gte",
                                  "expr1": {
                                    "CallUnary": {
                                      "func": {
                                        "CastDateToTimestamp": null
                                      },
                                      "expr": {
                                        "Column": 6
                                      }
                                    }
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            12,
                                            215,
                                            7,
                                            0,
                                            0,
                                            2,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Timestamp",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            1,
                            0,
                            8
                          ],
                          "input_arity": 10
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          }
                        ],
                        "stream_thinning": [
                          2
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                2,
                                3
                              ],
                              "input_arity": 4
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  },
                  {
                    "source_relation": 1,
                    "source_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1,
                            2
                          ],
                          "input_arity": 3
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 1
                          },
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          2
                        ],
                        "lookup_key": [
                          {
                            "Column": 5
                          },
                          {
                            "Column": 4
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [
                                [
                                  8,
                                  {
                                    "CallBinary": {
                                      "func": "Gte",
                                      "expr1": {
                                        "CallUnary": {
                                          "func": {
                                            "CastDateToTimestamp": null
                                          },
                                          "expr": {
                                            "Column": 7
                                          }
                                        }
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                12,
                                                215,
                                                7,
                                                0,
                                                0,
                                                2,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": "Timestamp",
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                9,
                                2
                              ],
                              "input_arity": 11
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                ]
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                1
              ],
              "input_arity": 2
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 2
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 0
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 0
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "body": {
      "Join": {
        "inputs": [
          {
            "Get": {
              "id": {
                "Global": {
                  "User": 24
                }
              },
              "keys": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 3
                      }
                    ],
                    {
                      "0": 1,
                      "1": 2,
                      "2": 3,
                      "3": 0,
                      "4": 4,
                      "5": 5,
                      "6": 6
                    },
                    [
                      0,
                      1,
                      2,
                      4,
                      5,
                      6
                    ]
                  ]
                ]
              },
              "plan": {
                "Arrangement": [
                  [
                    {
                      "Column": 3
                    }
                  ],
                  null,
                  {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "input_arity": 7
                  }
                ]
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Mfp": {
                  "input": {
                    "Reduce": {
                      "input": {
                        "Get": {
                          "id": {
                            "Local": 0
                          },
                          "keys": {
                            "raw": false,
                            "arranged": [
                              [
                                [
                                  {
                                    "Column": 0
                                  }
                                ],
                                {
                                  "0": 0,
                                  "1": 1
                                },
                                [
                                  1
                                ]
                              ]
                            ]
                          },
                          "plan": {
                            "Arrangement": [
                              [
                                {
                                  "Column": 0
                                }
                              ],
                              null,
                              {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  1
                                ],
                                "input_arity": 2
                              }
                            ]
                          }
                        }
                      },
                      "key_val_plan": {
                        "key_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [],
                            "input_arity": 1
                          }
                        },
                        "val_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              0
                            ],
                            "input_arity": 1
                          }
                        }
                      },
                      "plan": {
                        "Hierarchical": {
                          "Bucketed": {
                            "aggr_funcs": [
                              "MaxNumeric"
                            ],
                            "skips": [
                              0
                            ],
                            "buckets": [
                              268435456,
                              16777216,
                              1048576,
                              65536,
                              4096,
                              256,
                              16
                            ]
                          }
                        }
                      },
                      "input_key": null
                    }
                  },
                  "mfp": {
                    "expressions": [],
                    "predicates": [
                      [
                        1,
                        {
                          "CallUnary": {
                            "func": {
                              "Not": null
                            },
                            "expr": {
                              "CallUnary": {
                                "func": {
                                  "IsNull": null
                                },
                                "expr": {
                                  "Column": 0
                                }
                              }
                            }
                          }
                        }
                      ]
                    ],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  },
                  "input_key_val": [
                    [],
                    null
                  ]
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 0,
            "source_key": null,
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1,
                  2,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        3,
                        4
                      ],
                      "input_arity": 5
                    }
                  }
                }
              },
              {
                "lookup_relation": 2,
                "stream_key": [
                  {
                    "Column": 4
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  2,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        4,
                        0
                      ],
                      "input_arity": 5
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    }
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0..=#4)

EOF

# Query 16
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    i_name,
    substr(i_data, 1, 3) AS brand,
    i_price,
    count(DISTINCT s_su_suppkey) AS supplier_cnt
FROM stock, item
WHERE i_id = s_i_id
AND i_data NOT LIKE 'zz%'
AND (
    s_su_suppkey NOT IN (SELECT su_suppkey FROM supplier WHERE su_comment like '%bad%')
)
GROUP BY i_name, substr(i_data, 1, 3), i_price
ORDER BY supplier_cnt DESC
----
Source materialize.public.item (u17):
{
  "expressions": [],
  "predicates": [
    [
      5,
      {
        "CallUnary": {
          "func": {
            "Not": null
          },
          "expr": {
            "CallUnary": {
              "func": {
                "IsLikeMatch": {
                  "pattern": "zz%",
                  "case_insensitive": false,
                  "matcher_impl": {
                    "String": [
                      {
                        "consume": 0,
                        "many": false,
                        "suffix": "zz"
                      },
                      {
                        "consume": 0,
                        "many": true,
                        "suffix": ""
                      }
                    ]
                  }
                }
              },
              "expr": {
                "CallUnary": {
                  "func": {
                    "PadChar": {
                      "length": 50
                    }
                  },
                  "expr": {
                    "Column": 4
                  }
                }
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0,
    2,
    3,
    4
  ],
  "input_arity": 5
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 18
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15,
                          "16": 16,
                          "17": 17
                        },
                        [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16,
                          17
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9,
                      "10": 10,
                      "11": 11,
                      "12": 12,
                      "13": 13,
                      "14": 14,
                      "15": 15,
                      "16": 16,
                      "17": 17
                    },
                    [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15,
                      16,
                      17
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15,
                  16,
                  17
                ],
                "input_arity": 18
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 17
                    }
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3
                    },
                    [
                      1,
                      2,
                      3
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3
                ],
                "input_arity": 4
              }
            }
          }
        ],
        "plan": {
          "Delta": {
            "path_plans": [
              {
                "source_relation": 0,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        17
                      ],
                      "input_arity": 18
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              },
              {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            20,
                            1,
                            2,
                            3
                          ],
                          "input_arity": 21
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            ]
          }
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "Reduce": {
            "input": {
              "Get": {
                "id": {
                  "Local": 0
                },
                "keys": {
                  "raw": true,
                  "arranged": []
                },
                "plan": {
                  "Collection": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 4
                  }
                }
              }
            },
            "key_val_plan": {
              "key_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    0
                  ],
                  "input_arity": 1
                }
              },
              "val_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [],
                  "input_arity": 1
                }
              }
            },
            "plan": "Distinct",
            "input_key": null
          }
        },
        "body": {
          "Reduce": {
            "input": {
              "Join": {
                "inputs": [
                  {
                    "ArrangeBy": {
                      "input": {
                        "Get": {
                          "id": {
                            "Local": 0
                          },
                          "keys": {
                            "raw": true,
                            "arranged": []
                          },
                          "plan": "PassArrangements"
                        }
                      },
                      "forms": {
                        "raw": true,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2,
                              "3": 3
                            },
                            [
                              1,
                              2,
                              3
                            ]
                          ]
                        ]
                      },
                      "input_key": null,
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1,
                          2,
                          3
                        ],
                        "input_arity": 4
                      }
                    }
                  },
                  {
                    "Union": {
                      "inputs": [
                        {
                          "Negate": {
                            "input": {
                              "Join": {
                                "inputs": [
                                  {
                                    "ArrangeBy": {
                                      "input": {
                                        "Get": {
                                          "id": {
                                            "Local": 1
                                          },
                                          "keys": {
                                            "raw": false,
                                            "arranged": [
                                              [
                                                [
                                                  {
                                                    "Column": 0
                                                  }
                                                ],
                                                {
                                                  "0": 0
                                                },
                                                []
                                              ]
                                            ]
                                          },
                                          "plan": "PassArrangements"
                                        }
                                      },
                                      "forms": {
                                        "raw": false,
                                        "arranged": [
                                          [
                                            [
                                              {
                                                "Column": 0
                                              }
                                            ],
                                            {
                                              "0": 0
                                            },
                                            []
                                          ]
                                        ]
                                      },
                                      "input_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "input_mfp": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [
                                          0
                                        ],
                                        "input_arity": 1
                                      }
                                    }
                                  },
                                  {
                                    "Get": {
                                      "id": {
                                        "Global": {
                                          "User": 24
                                        }
                                      },
                                      "keys": {
                                        "raw": false,
                                        "arranged": [
                                          [
                                            [
                                              {
                                                "Column": 3
                                              }
                                            ],
                                            {
                                              "0": 1,
                                              "1": 2,
                                              "2": 3,
                                              "3": 0,
                                              "4": 4,
                                              "5": 5,
                                              "6": 6
                                            },
                                            [
                                              0,
                                              1,
                                              2,
                                              4,
                                              5,
                                              6
                                            ]
                                          ]
                                        ]
                                      },
                                      "plan": {
                                        "Arrangement": [
                                          [
                                            {
                                              "Column": 3
                                            }
                                          ],
                                          null,
                                          {
                                            "expressions": [],
                                            "predicates": [
                                              [
                                                7,
                                                {
                                                  "CallUnary": {
                                                    "func": {
                                                      "IsLikeMatch": {
                                                        "pattern": "%bad%",
                                                        "case_insensitive": false,
                                                        "matcher_impl": {
                                                          "String": [
                                                            {
                                                              "consume": 0,
                                                              "many": true,
                                                              "suffix": "bad"
                                                            },
                                                            {
                                                              "consume": 0,
                                                              "many": true,
                                                              "suffix": ""
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    "expr": {
                                                      "CallUnary": {
                                                        "func": {
                                                          "PadChar": {
                                                            "length": 101
                                                          }
                                                        },
                                                        "expr": {
                                                          "Column": 6
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            ],
                                            "projection": [
                                              1
                                            ],
                                            "input_arity": 7
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                "plan": {
                                  "Linear": {
                                    "source_relation": 1,
                                    "source_key": null,
                                    "initial_closure": null,
                                    "stage_plans": [
                                      {
                                        "lookup_relation": 0,
                                        "stream_key": [
                                          {
                                            "Column": 0
                                          }
                                        ],
                                        "stream_thinning": [],
                                        "lookup_key": [
                                          {
                                            "Column": 0
                                          }
                                        ],
                                        "closure": {
                                          "ready_equivalences": [],
                                          "before": {
                                            "mfp": {
                                              "expressions": [],
                                              "predicates": [],
                                              "projection": [
                                                0
                                              ],
                                              "input_arity": 1
                                            }
                                          }
                                        }
                                      }
                                    ],
                                    "final_closure": null
                                  }
                                }
                              }
                            }
                          }
                        },
                        {
                          "ArrangeBy": {
                            "input": {
                              "Get": {
                                "id": {
                                  "Local": 1
                                },
                                "keys": {
                                  "raw": false,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      {
                                        "0": 0
                                      },
                                      []
                                    ]
                                  ]
                                },
                                "plan": "PassArrangements"
                              }
                            },
                            "forms": {
                              "raw": true,
                              "arranged": []
                            },
                            "input_key": [
                              {
                                "Column": 0
                              }
                            ],
                            "input_mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0
                              ],
                              "input_arity": 1
                            }
                          }
                        }
                      ]
                    }
                  }
                ],
                "plan": {
                  "Linear": {
                    "source_relation": 1,
                    "source_key": null,
                    "initial_closure": null,
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                1,
                                2,
                                3
                              ],
                              "input_arity": 4
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                }
              }
            },
            "key_val_plan": {
              "key_plan": {
                "mfp": {
                  "expressions": [
                    {
                      "CallVariadic": {
                        "func": "Substr",
                        "exprs": [
                          {
                            "CallUnary": {
                              "func": {
                                "CastCharToString": null
                              },
                              "expr": {
                                "Column": 3
                              }
                            }
                          },
                          {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    5,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int64",
                                "nullable": false
                              }
                            ]
                          },
                          {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    5,
                                    3,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Int64",
                                "nullable": false
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ],
                  "predicates": [],
                  "projection": [
                    1,
                    4,
                    2
                  ],
                  "input_arity": 4
                }
              },
              "val_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    0
                  ],
                  "input_arity": 4
                }
              }
            },
            "plan": {
              "Accumulable": {
                "full_aggrs": [
                  {
                    "func": "Count",
                    "expr": {
                      "Column": 0
                    },
                    "distinct": true
                  }
                ],
                "simple_aggrs": [],
                "distinct_aggrs": [
                  [
                    0,
                    0,
                    {
                      "func": "Count",
                      "expr": {
                        "Column": 0
                      },
                      "distinct": true
                    }
                  ]
                ]
              }
            },
            "input_key": null
          }
        }
      }
    }
  }
}

Finish order_by=(#3 desc nulls_first) limit=none offset=0 project=(#0..=#3)

EOF

# Query 17
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    sum(ol_amount) / 2.0 AS avg_yearly
FROM
    orderline,
    (
        SELECT i_id, avg(ol_quantity) AS a
        FROM item, orderline
        WHERE i_data LIKE '%b' AND ol_i_id = i_id
        GROUP BY i_id
    ) t
WHERE ol_i_id = t.i_id
AND ol_quantity < t.a
----
Source materialize.public.item (u17):
{
  "expressions": [],
  "predicates": [
    [
      5,
      {
        "CallUnary": {
          "func": {
            "IsLikeMatch": {
              "pattern": "%b",
              "case_insensitive": false,
              "matcher_impl": {
                "String": [
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": "b"
                  }
                ]
              }
            }
          },
          "expr": {
            "CallUnary": {
              "func": {
                "PadChar": {
                  "length": 50
                }
              },
              "expr": {
                "Column": 4
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 5
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "ArrangeBy": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 13
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 4
                    }
                  ],
                  {
                    "0": 1,
                    "1": 2,
                    "2": 3,
                    "3": 4,
                    "4": 0,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9
                  },
                  [
                    0,
                    1,
                    2,
                    3,
                    5,
                    6,
                    7,
                    8,
                    9
                  ]
                ]
              ]
            },
            "plan": "PassArrangements"
          }
        },
        "forms": {
          "raw": false,
          "arranged": [
            [
              [
                {
                  "Column": 4
                }
              ],
              {
                "0": 1,
                "1": 2,
                "2": 3,
                "3": 4,
                "4": 0,
                "5": 5,
                "6": 6,
                "7": 7,
                "8": 8,
                "9": 9
              },
              [
                0,
                1,
                2,
                3,
                5,
                6,
                7,
                8,
                9
              ]
            ]
          ]
        },
        "input_key": [
          {
            "Column": 4
          }
        ],
        "input_mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            1,
            2,
            3,
            4,
            0,
            5,
            6,
            7,
            8,
            9
          ],
          "input_arity": 10
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "Reduce": {
            "input": {
              "Join": {
                "inputs": [
                  {
                    "Get": {
                      "id": {
                        "Local": 0
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 4
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 4,
                              "4": 0,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9
                            },
                            [
                              0,
                              1,
                              2,
                              3,
                              5,
                              6,
                              7,
                              8,
                              9
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  {
                    "ArrangeBy": {
                      "input": {
                        "Reduce": {
                          "input": {
                            "Join": {
                              "inputs": [
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Global": {
                                            "User": 17
                                          }
                                        },
                                        "keys": {
                                          "raw": true,
                                          "arranged": []
                                        },
                                        "plan": {
                                          "Collection": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0
                                            ],
                                            "input_arity": 1
                                          }
                                        }
                                      }
                                    },
                                    "forms": {
                                      "raw": true,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0
                                          },
                                          []
                                        ]
                                      ]
                                    },
                                    "input_key": null,
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0
                                      ],
                                      "input_arity": 1
                                    }
                                  }
                                },
                                {
                                  "Get": {
                                    "id": {
                                      "Local": 0
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 4
                                            }
                                          ],
                                          {
                                            "0": 1,
                                            "1": 2,
                                            "2": 3,
                                            "3": 4,
                                            "4": 0,
                                            "5": 5,
                                            "6": 6,
                                            "7": 7,
                                            "8": 8,
                                            "9": 9
                                          },
                                          [
                                            0,
                                            1,
                                            2,
                                            3,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": "PassArrangements"
                                  }
                                }
                              ],
                              "plan": {
                                "Delta": {
                                  "path_plans": [
                                    {
                                      "source_relation": 0,
                                      "source_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "initial_closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0
                                            ],
                                            "input_arity": 1
                                          }
                                        }
                                      },
                                      "stage_plans": [
                                        {
                                          "lookup_relation": 1,
                                          "stream_key": [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          "stream_thinning": [],
                                          "lookup_key": [
                                            {
                                              "Column": 4
                                            }
                                          ],
                                          "closure": {
                                            "ready_equivalences": [],
                                            "before": {
                                              "mfp": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  0,
                                                  7
                                                ],
                                                "input_arity": 10
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "final_closure": null
                                    },
                                    {
                                      "source_relation": 1,
                                      "source_key": [
                                        {
                                          "Column": 4
                                        }
                                      ],
                                      "initial_closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0,
                                              7
                                            ],
                                            "input_arity": 10
                                          }
                                        }
                                      },
                                      "stage_plans": [
                                        {
                                          "lookup_relation": 0,
                                          "stream_key": [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          "stream_thinning": [
                                            1
                                          ],
                                          "lookup_key": [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          "closure": {
                                            "ready_equivalences": [],
                                            "before": {
                                              "mfp": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  0,
                                                  1
                                                ],
                                                "input_arity": 2
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "final_closure": null
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "key_val_plan": {
                            "key_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  0
                                ],
                                "input_arity": 2
                              }
                            },
                            "val_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  1,
                                  1
                                ],
                                "input_arity": 2
                              }
                            }
                          },
                          "plan": {
                            "Accumulable": {
                              "full_aggrs": [
                                {
                                  "func": "SumInt32",
                                  "expr": {
                                    "Column": 1
                                  },
                                  "distinct": false
                                },
                                {
                                  "func": "Count",
                                  "expr": {
                                    "Column": 1
                                  },
                                  "distinct": false
                                }
                              ],
                              "simple_aggrs": [
                                [
                                  0,
                                  0,
                                  {
                                    "func": "SumInt32",
                                    "expr": {
                                      "Column": 1
                                    },
                                    "distinct": false
                                  }
                                ],
                                [
                                  1,
                                  1,
                                  {
                                    "func": "Count",
                                    "expr": {
                                      "Column": 1
                                    },
                                    "distinct": false
                                  }
                                ]
                              ],
                              "distinct_aggrs": []
                            }
                          },
                          "input_key": null
                        }
                      },
                      "forms": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2
                            },
                            [
                              1,
                              2
                            ]
                          ]
                        ]
                      },
                      "input_key": [
                        {
                          "Column": 0
                        }
                      ],
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1,
                          2
                        ],
                        "input_arity": 3
                      }
                    }
                  }
                ],
                "plan": {
                  "Delta": {
                    "path_plans": [
                      {
                        "source_relation": 0,
                        "source_key": [
                          {
                            "Column": 4
                          }
                        ],
                        "initial_closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                7,
                                8
                              ],
                              "input_arity": 10
                            }
                          }
                        },
                        "stage_plans": [
                          {
                            "lookup_relation": 1,
                            "stream_key": [
                              {
                                "Column": 0
                              }
                            ],
                            "stream_thinning": [
                              1,
                              2
                            ],
                            "lookup_key": [
                              {
                                "Column": 0
                              }
                            ],
                            "closure": {
                              "ready_equivalences": [],
                              "before": {
                                "mfp": {
                                  "expressions": [],
                                  "predicates": [
                                    [
                                      5,
                                      {
                                        "CallBinary": {
                                          "func": "Lt",
                                          "expr1": {
                                            "CallUnary": {
                                              "func": {
                                                "CastInt32ToFloat64": null
                                              },
                                              "expr": {
                                                "Column": 1
                                              }
                                            }
                                          },
                                          "expr2": {
                                            "CallBinary": {
                                              "func": "DivFloat64",
                                              "expr1": {
                                                "CallUnary": {
                                                  "func": {
                                                    "CastInt64ToFloat64": null
                                                  },
                                                  "expr": {
                                                    "Column": 3
                                                  }
                                                }
                                              },
                                              "expr2": {
                                                "CallUnary": {
                                                  "func": {
                                                    "CastInt64ToFloat64": null
                                                  },
                                                  "expr": {
                                                    "If": {
                                                      "cond": {
                                                        "CallBinary": {
                                                          "func": "Eq",
                                                          "expr1": {
                                                            "Column": 4
                                                          },
                                                          "expr2": {
                                                            "Literal": [
                                                              {
                                                                "Ok": {
                                                                  "data": [
                                                                    5,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "scalar_type": "Int64",
                                                                "nullable": false
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      },
                                                      "then": {
                                                        "Literal": [
                                                          {
                                                            "Ok": {
                                                              "data": [
                                                                0
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "scalar_type": "Int64",
                                                            "nullable": true
                                                          }
                                                        ]
                                                      },
                                                      "els": {
                                                        "Column": 4
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  ],
                                  "projection": [
                                    2
                                  ],
                                  "input_arity": 5
                                }
                              }
                            }
                          }
                        ],
                        "final_closure": null
                      },
                      {
                        "source_relation": 1,
                        "source_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "initial_closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                1,
                                2
                              ],
                              "input_arity": 3
                            }
                          }
                        },
                        "stage_plans": [
                          {
                            "lookup_relation": 0,
                            "stream_key": [
                              {
                                "Column": 0
                              }
                            ],
                            "stream_thinning": [
                              1,
                              2
                            ],
                            "lookup_key": [
                              {
                                "Column": 4
                              }
                            ],
                            "closure": {
                              "ready_equivalences": [],
                              "before": {
                                "mfp": {
                                  "expressions": [],
                                  "predicates": [
                                    [
                                      10,
                                      {
                                        "CallBinary": {
                                          "func": "Lt",
                                          "expr1": {
                                            "CallUnary": {
                                              "func": {
                                                "CastInt32ToFloat64": null
                                              },
                                              "expr": {
                                                "Column": 9
                                              }
                                            }
                                          },
                                          "expr2": {
                                            "CallBinary": {
                                              "func": "DivFloat64",
                                              "expr1": {
                                                "CallUnary": {
                                                  "func": {
                                                    "CastInt64ToFloat64": null
                                                  },
                                                  "expr": {
                                                    "Column": 1
                                                  }
                                                }
                                              },
                                              "expr2": {
                                                "CallUnary": {
                                                  "func": {
                                                    "CastInt64ToFloat64": null
                                                  },
                                                  "expr": {
                                                    "If": {
                                                      "cond": {
                                                        "CallBinary": {
                                                          "func": "Eq",
                                                          "expr1": {
                                                            "Column": 2
                                                          },
                                                          "expr2": {
                                                            "Literal": [
                                                              {
                                                                "Ok": {
                                                                  "data": [
                                                                    5,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0,
                                                                    0
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "scalar_type": "Int64",
                                                                "nullable": false
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      },
                                                      "then": {
                                                        "Literal": [
                                                          {
                                                            "Ok": {
                                                              "data": [
                                                                0
                                                              ]
                                                            }
                                                          },
                                                          {
                                                            "scalar_type": "Int64",
                                                            "nullable": true
                                                          }
                                                        ]
                                                      },
                                                      "els": {
                                                        "Column": 2
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  ],
                                  "projection": [
                                    10
                                  ],
                                  "input_arity": 12
                                }
                              }
                            }
                          }
                        ],
                        "final_closure": null
                      }
                    ]
                  }
                }
              }
            },
            "key_val_plan": {
              "key_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [],
                  "input_arity": 1
                }
              },
              "val_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    0
                  ],
                  "input_arity": 1
                }
              }
            },
            "plan": {
              "Accumulable": {
                "full_aggrs": [
                  {
                    "func": "SumNumeric",
                    "expr": {
                      "Column": 0
                    },
                    "distinct": false
                  }
                ],
                "simple_aggrs": [
                  [
                    0,
                    0,
                    {
                      "func": "SumNumeric",
                      "expr": {
                        "Column": 0
                      },
                      "distinct": false
                    }
                  ]
                ],
                "distinct_aggrs": []
              }
            },
            "input_key": null
          }
        },
        "body": {
          "Mfp": {
            "input": {
              "Union": {
                "inputs": [
                  {
                    "ArrangeBy": {
                      "input": {
                        "Get": {
                          "id": {
                            "Local": 1
                          },
                          "keys": {
                            "raw": false,
                            "arranged": [
                              [
                                [],
                                {
                                  "0": 0
                                },
                                [
                                  0
                                ]
                              ]
                            ]
                          },
                          "plan": "PassArrangements"
                        }
                      },
                      "forms": {
                        "raw": true,
                        "arranged": []
                      },
                      "input_key": [],
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0
                        ],
                        "input_arity": 1
                      }
                    }
                  },
                  {
                    "Mfp": {
                      "input": {
                        "Union": {
                          "inputs": [
                            {
                              "Negate": {
                                "input": {
                                  "Get": {
                                    "id": {
                                      "Local": 1
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [],
                                          {
                                            "0": 0
                                          },
                                          [
                                            0
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": {
                                      "Arrangement": [
                                        [],
                                        null,
                                        {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [],
                                          "input_arity": 1
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "Constant": {
                                "rows": {
                                  "Ok": [
                                    [
                                      {
                                        "data": []
                                      },
                                      0,
                                      1
                                    ]
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "mfp": {
                        "expressions": [
                          {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": 2
                                  }
                                },
                                "nullable": true
                              }
                            ]
                          }
                        ],
                        "predicates": [],
                        "projection": [
                          0
                        ],
                        "input_arity": 0
                      },
                      "input_key_val": null
                    }
                  }
                ]
              }
            },
            "mfp": {
              "expressions": [
                {
                  "CallBinary": {
                    "func": "DivNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              2,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                1
              ],
              "input_arity": 1
            },
            "input_key_val": null
          }
        }
      }
    }
  }
}

EOF

# Query 18
query T multiline
EXPLAIN physical PLAN FOR
SELECT c_last, c_id, o_id, o_entry_d, o_ol_cnt, sum(ol_amount)
FROM customer, "order", orderline
WHERE c_id = o_c_id
AND c_w_id = o_w_id
AND c_d_id = o_d_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_o_id = o_id
GROUP BY o_id, o_w_id, o_d_id, c_id, c_last, o_entry_d, o_ol_cnt
HAVING sum(ol_amount) > 200
ORDER BY sum(ol_amount) DESC, o_entry_d
----
{
  "Mfp": {
    "input": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 2,
                              "1": 1,
                              "2": 0,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15,
                              "16": 16,
                              "17": 17,
                              "18": 18,
                              "19": 19,
                              "20": 20,
                              "21": 21
                            },
                            [
                              0,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15,
                              16,
                              17,
                              18,
                              19,
                              20,
                              21
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              2,
                              1,
                              0,
                              5
                            ],
                            "input_arity": 22
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3
                        },
                        [
                          3
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3
                    ],
                    "input_arity": 4
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 11
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              },
                              {
                                "Column": 1
                              },
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 3,
                              "1": 1,
                              "2": 0,
                              "3": 2,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            },
                            {
                              "Column": 1
                            },
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                3,
                                {
                                  "CallUnary": {
                                    "func": {
                                      "Not": null
                                    },
                                    "expr": {
                                      "CallUnary": {
                                        "func": {
                                          "IsNull": null
                                        },
                                        "expr": {
                                          "Column": 2
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              3,
                              1,
                              0,
                              2,
                              4,
                              6
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5
                        },
                        [
                          3,
                          4,
                          5
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "input_arity": 6
                  }
                }
              },
              {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 13
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 2,
                          "1": 1,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9
                        },
                        [
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        },
                        {
                          "Column": 0
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          2,
                          1,
                          0,
                          8
                        ],
                        "input_arity": 10
                      }
                    ]
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 2,
                "source_key": null,
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            4,
                            5,
                            6,
                            1,
                            2,
                            3
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 1
                      },
                      {
                        "Column": 4
                      },
                      {
                        "Column": 5
                      }
                    ],
                    "stream_thinning": [
                      0,
                      2,
                      3,
                      6
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1,
                            2,
                            7,
                            3,
                            4,
                            5,
                            6
                          ],
                          "input_arity": 8
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                4,
                2,
                1,
                0,
                3,
                5,
                6
              ],
              "input_arity": 8
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                7
              ],
              "input_arity": 8
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 7
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 7
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "mfp": {
      "expressions": [],
      "predicates": [
        [
          8,
          {
            "CallBinary": {
              "func": "Gt",
              "expr1": {
                "Column": 7
              },
              "expr2": {
                "Literal": [
                  {
                    "Ok": {
                      "data": [
                        29,
                        1,
                        2,
                        0,
                        2,
                        0
                      ]
                    }
                  },
                  {
                    "scalar_type": {
                      "Numeric": {
                        "max_scale": null
                      }
                    },
                    "nullable": false
                  }
                ]
              }
            }
          }
        ]
      ],
      "projection": [
        4,
        3,
        0,
        5,
        6,
        7
      ],
      "input_arity": 8
    },
    "input_key_val": [
      [
        {
          "Column": 0
        },
        {
          "Column": 1
        },
        {
          "Column": 2
        },
        {
          "Column": 3
        },
        {
          "Column": 4
        },
        {
          "Column": 5
        },
        {
          "Column": 6
        }
      ],
      null
    ]
  }
}

Finish order_by=(#5 desc nulls_first, #3 asc nulls_last) limit=none offset=0 project=(#0..=#5)

EOF

# Query 19
query T multiline
EXPLAIN physical PLAN FOR
SELECT sum(ol_amount) AS revenue
FROM orderline, item
WHERE (
    ol_i_id = i_id
    AND i_data LIKE '%a'
    AND ol_quantity >= 1
    AND ol_quantity <= 10
    AND i_price BETWEEN 1 AND 400000
    AND ol_w_id in (1, 2, 3)
) OR (
    ol_i_id = i_id
    AND i_data LIKE '%b'
    AND ol_quantity >= 1
    AND ol_quantity <= 10
    AND i_price BETWEEN 1 AND 400000
    AND ol_w_id IN (1, 2, 4)
) OR (
    ol_i_id = i_id
    AND i_data LIKE '%c'
    AND ol_quantity >= 1
    AND ol_quantity <= 10
    AND i_price BETWEEN 1 AND 400000
    AND ol_w_id in (1, 5, 3)
)
----
Source materialize.public.item (u17):
{
  "expressions": [
    {
      "CallUnary": {
        "func": {
          "PadChar": {
            "length": 50
          }
        },
        "expr": {
          "Column": 4
        }
      }
    }
  ],
  "predicates": [
    [
      4,
      {
        "CallBinary": {
          "func": "Lte",
          "expr1": {
            "Column": 3
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    29,
                    1,
                    5,
                    0,
                    4,
                    0
                  ]
                }
              },
              {
                "scalar_type": {
                  "Numeric": {
                    "max_scale": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ],
    [
      4,
      {
        "CallBinary": {
          "func": "Gte",
          "expr1": {
            "Column": 3
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    29,
                    1,
                    0,
                    0,
                    1,
                    0
                  ]
                }
              },
              {
                "scalar_type": {
                  "Numeric": {
                    "max_scale": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ],
    [
      6,
      {
        "CallVariadic": {
          "func": "Or",
          "exprs": [
            {
              "CallUnary": {
                "func": {
                  "IsLikeMatch": {
                    "pattern": "%a",
                    "case_insensitive": false,
                    "matcher_impl": {
                      "String": [
                        {
                          "consume": 0,
                          "many": true,
                          "suffix": "a"
                        }
                      ]
                    }
                  }
                },
                "expr": {
                  "Column": 5
                }
              }
            },
            {
              "CallUnary": {
                "func": {
                  "IsLikeMatch": {
                    "pattern": "%b",
                    "case_insensitive": false,
                    "matcher_impl": {
                      "String": [
                        {
                          "consume": 0,
                          "many": true,
                          "suffix": "b"
                        }
                      ]
                    }
                  }
                },
                "expr": {
                  "Column": 5
                }
              }
            },
            {
              "CallUnary": {
                "func": {
                  "IsLikeMatch": {
                    "pattern": "%c",
                    "case_insensitive": false,
                    "matcher_impl": {
                      "String": [
                        {
                          "consume": 0,
                          "many": true,
                          "suffix": "c"
                        }
                      ]
                    }
                  }
                },
                "expr": {
                  "Column": 5
                }
              }
            }
          ]
        }
      }
    ],
    [
      6,
      {
        "CallVariadic": {
          "func": "Or",
          "exprs": [
            {
              "CallUnary": {
                "func": {
                  "IsLikeMatch": {
                    "pattern": "%a",
                    "case_insensitive": false,
                    "matcher_impl": {
                      "String": [
                        {
                          "consume": 0,
                          "many": true,
                          "suffix": "a"
                        }
                      ]
                    }
                  }
                },
                "expr": {
                  "Column": 5
                }
              }
            },
            {
              "CallUnary": {
                "func": {
                  "IsLikeMatch": {
                    "pattern": "%b",
                    "case_insensitive": false,
                    "matcher_impl": {
                      "String": [
                        {
                          "consume": 0,
                          "many": true,
                          "suffix": "b"
                        }
                      ]
                    }
                  }
                },
                "expr": {
                  "Column": 5
                }
              }
            },
            {
              "CallUnary": {
                "func": {
                  "IsLikeMatch": {
                    "pattern": "%c",
                    "case_insensitive": false,
                    "matcher_impl": {
                      "String": [
                        {
                          "consume": 0,
                          "many": true,
                          "suffix": "c"
                        }
                      ]
                    }
                  }
                },
                "expr": {
                  "Column": 5
                }
              }
            }
          ]
        }
      }
    ]
  ],
  "projection": [
    0,
    4
  ],
  "input_arity": 5
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 13
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 4
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 4,
                              "4": 0,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9
                            },
                            [
                              0,
                              1,
                              2,
                              3,
                              5,
                              6,
                              7,
                              8,
                              9
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 4
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 4,
                          "4": 0,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9
                        },
                        [
                          0,
                          1,
                          2,
                          3,
                          5,
                          6,
                          7,
                          8,
                          9
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 4
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1,
                      2,
                      3,
                      4,
                      0,
                      5,
                      6,
                      7,
                      8,
                      9
                    ],
                    "input_arity": 10
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 17
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1
                          ],
                          "input_arity": 2
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              }
            ],
            "plan": {
              "Delta": {
                "path_plans": [
                  {
                    "source_relation": 0,
                    "source_key": [
                      {
                        "Column": 4
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 3
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          4,
                                          1,
                                          0,
                                          0,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Int32",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 3
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          4,
                                          2,
                                          0,
                                          0,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Int32",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 3
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          4,
                                          3,
                                          0,
                                          0,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Int32",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 3
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          4,
                                          4,
                                          0,
                                          0,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Int32",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 3
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          4,
                                          5,
                                          0,
                                          0,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Int32",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          "predicates": [
                            [
                              8,
                              {
                                "CallBinary": {
                                  "func": "Lte",
                                  "expr1": {
                                    "Column": 7
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            4,
                                            10,
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Int32",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            [
                              8,
                              {
                                "CallBinary": {
                                  "func": "Gte",
                                  "expr1": {
                                    "Column": 7
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            4,
                                            1,
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Int32",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            [
                              15,
                              {
                                "CallVariadic": {
                                  "func": "Or",
                                  "exprs": [
                                    {
                                      "Column": 10
                                    },
                                    {
                                      "Column": 11
                                    },
                                    {
                                      "Column": 12
                                    },
                                    {
                                      "Column": 13
                                    },
                                    {
                                      "Column": 14
                                    }
                                  ]
                                }
                              }
                            ]
                          ],
                          "projection": [
                            0,
                            8,
                            10,
                            11,
                            12,
                            13,
                            14
                          ],
                          "input_arity": 10
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [
                                {
                                  "CallUnary": {
                                    "func": {
                                      "PadChar": {
                                        "length": 50
                                      }
                                    },
                                    "expr": {
                                      "Column": 7
                                    }
                                  }
                                }
                              ],
                              "predicates": [
                                [
                                  9,
                                  {
                                    "CallVariadic": {
                                      "func": "Or",
                                      "exprs": [
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "CallUnary": {
                                                  "func": {
                                                    "IsLikeMatch": {
                                                      "pattern": "%a",
                                                      "case_insensitive": false,
                                                      "matcher_impl": {
                                                        "String": [
                                                          {
                                                            "consume": 0,
                                                            "many": true,
                                                            "suffix": "a"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "expr": {
                                                    "Column": 8
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "Column": 2
                                                    },
                                                    {
                                                      "Column": 3
                                                    },
                                                    {
                                                      "Column": 4
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "CallUnary": {
                                                  "func": {
                                                    "IsLikeMatch": {
                                                      "pattern": "%b",
                                                      "case_insensitive": false,
                                                      "matcher_impl": {
                                                        "String": [
                                                          {
                                                            "consume": 0,
                                                            "many": true,
                                                            "suffix": "b"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "expr": {
                                                    "Column": 8
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "Column": 2
                                                    },
                                                    {
                                                      "Column": 3
                                                    },
                                                    {
                                                      "Column": 5
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "CallUnary": {
                                                  "func": {
                                                    "IsLikeMatch": {
                                                      "pattern": "%c",
                                                      "case_insensitive": false,
                                                      "matcher_impl": {
                                                        "String": [
                                                          {
                                                            "consume": 0,
                                                            "many": true,
                                                            "suffix": "c"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "expr": {
                                                    "Column": 8
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "Column": 2
                                                    },
                                                    {
                                                      "Column": 4
                                                    },
                                                    {
                                                      "Column": 6
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                1
                              ],
                              "input_arity": 8
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  },
                  {
                    "source_relation": 1,
                    "source_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [
                            {
                              "CallUnary": {
                                "func": {
                                  "PadChar": {
                                    "length": 50
                                  }
                                },
                                "expr": {
                                  "Column": 1
                                }
                              }
                            }
                          ],
                          "predicates": [],
                          "projection": [
                            0,
                            2
                          ],
                          "input_arity": 2
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1
                        ],
                        "lookup_key": [
                          {
                            "Column": 4
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              4,
                                              1,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Int32",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              4,
                                              2,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Int32",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              4,
                                              3,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Int32",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              4,
                                              4,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Int32",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              4,
                                              5,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Int32",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ],
                              "predicates": [
                                [
                                  9,
                                  {
                                    "CallBinary": {
                                      "func": "Lte",
                                      "expr1": {
                                        "Column": 8
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                4,
                                                10,
                                                0,
                                                0,
                                                0
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": "Int32",
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                [
                                  9,
                                  {
                                    "CallBinary": {
                                      "func": "Gte",
                                      "expr1": {
                                        "Column": 8
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                4,
                                                1,
                                                0,
                                                0,
                                                0
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": "Int32",
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                [
                                  16,
                                  {
                                    "CallVariadic": {
                                      "func": "Or",
                                      "exprs": [
                                        {
                                          "Column": 11
                                        },
                                        {
                                          "Column": 12
                                        },
                                        {
                                          "Column": 13
                                        },
                                        {
                                          "Column": 14
                                        },
                                        {
                                          "Column": 15
                                        }
                                      ]
                                    }
                                  }
                                ],
                                [
                                  16,
                                  {
                                    "CallVariadic": {
                                      "func": "Or",
                                      "exprs": [
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "CallUnary": {
                                                  "func": {
                                                    "IsLikeMatch": {
                                                      "pattern": "%a",
                                                      "case_insensitive": false,
                                                      "matcher_impl": {
                                                        "String": [
                                                          {
                                                            "consume": 0,
                                                            "many": true,
                                                            "suffix": "a"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "expr": {
                                                    "Column": 1
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "Column": 11
                                                    },
                                                    {
                                                      "Column": 12
                                                    },
                                                    {
                                                      "Column": 13
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "CallUnary": {
                                                  "func": {
                                                    "IsLikeMatch": {
                                                      "pattern": "%b",
                                                      "case_insensitive": false,
                                                      "matcher_impl": {
                                                        "String": [
                                                          {
                                                            "consume": 0,
                                                            "many": true,
                                                            "suffix": "b"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "expr": {
                                                    "Column": 1
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "Column": 11
                                                    },
                                                    {
                                                      "Column": 12
                                                    },
                                                    {
                                                      "Column": 14
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "CallUnary": {
                                                  "func": {
                                                    "IsLikeMatch": {
                                                      "pattern": "%c",
                                                      "case_insensitive": false,
                                                      "matcher_impl": {
                                                        "String": [
                                                          {
                                                            "consume": 0,
                                                            "many": true,
                                                            "suffix": "c"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  },
                                                  "expr": {
                                                    "Column": 1
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "Column": 11
                                                    },
                                                    {
                                                      "Column": 13
                                                    },
                                                    {
                                                      "Column": 15
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                9
                              ],
                              "input_arity": 11
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                ]
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [],
              "input_arity": 1
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 1
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 0
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 0
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "body": {
      "Union": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [],
                        {
                          "0": 0
                        },
                        [
                          0
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": true,
                "arranged": []
              },
              "input_key": [],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          },
          {
            "Mfp": {
              "input": {
                "Union": {
                  "inputs": [
                    {
                      "Negate": {
                        "input": {
                          "Get": {
                            "id": {
                              "Local": 0
                            },
                            "keys": {
                              "raw": false,
                              "arranged": [
                                [
                                  [],
                                  {
                                    "0": 0
                                  },
                                  [
                                    0
                                  ]
                                ]
                              ]
                            },
                            "plan": {
                              "Arrangement": [
                                [],
                                null,
                                {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [],
                                  "input_arity": 1
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "Constant": {
                        "rows": {
                          "Ok": [
                            [
                              {
                                "data": []
                              },
                              0,
                              1
                            ]
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "mfp": {
                "expressions": [
                  {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": {
                          "Numeric": {
                            "max_scale": 2
                          }
                        },
                        "nullable": true
                      }
                    ]
                  }
                ],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 0
              },
              "input_key_val": null
            }
          }
        ]
      }
    }
  }
}

EOF


# Query 20
query T multiline
EXPLAIN physical PLAN FOR
SELECT su_name, su_address
FROM supplier, nation
WHERE su_suppkey IN (
    SELECT mod(s_i_id * s_w_id, 10000)
    FROM stock, orderline
    WHERE s_i_id IN (SELECT i_id FROM item WHERE i_data LIKE 'co%')
    AND ol_i_id = s_i_id
    AND ol_delivery_d > TIMESTAMP '2010-05-23 12:00:00'
    GROUP BY s_i_id, s_w_id, s_quantity
    HAVING 2 * s_quantity > sum(ol_quantity)
)
AND su_nationkey = n_nationkey
AND n_name = 'GERMANY'
ORDER BY su_name
----
Source materialize.public.item (u17):
{
  "expressions": [],
  "predicates": [
    [
      5,
      {
        "CallUnary": {
          "func": {
            "IsLikeMatch": {
              "pattern": "co%",
              "case_insensitive": false,
              "matcher_impl": {
                "String": [
                  {
                    "consume": 0,
                    "many": false,
                    "suffix": "co"
                  },
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": ""
                  }
                ]
              }
            }
          },
          "expr": {
            "CallUnary": {
              "func": {
                "PadChar": {
                  "length": 50
                }
              },
              "expr": {
                "Column": 4
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 5
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 24
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 3
                      }
                    ],
                    {
                      "0": 1,
                      "1": 2,
                      "2": 3,
                      "3": 0,
                      "4": 4,
                      "5": 5,
                      "6": 6
                    },
                    [
                      0,
                      1,
                      2,
                      4,
                      5,
                      6
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 3
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  1,
                  2,
                  3,
                  0,
                  4,
                  5,
                  6
                ],
                "input_arity": 7
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 22
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            3,
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          7,
                                          71,
                                          69,
                                          82,
                                          77,
                                          65,
                                          78,
                                          89
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          1
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Delta": {
            "path_plans": [
              {
                "source_relation": 0,
                "source_key": [
                  {
                    "Column": 3
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        0
                      ],
                      "input_arity": 7
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 3
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3
                          ],
                          "input_arity": 4
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              },
              {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 1
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [],
                    "lookup_key": [
                      {
                        "Column": 3
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            ]
          }
        }
      }
    },
    "body": {
      "Join": {
        "inputs": [
          {
            "Get": {
              "id": {
                "Local": 0
              },
              "keys": {
                "raw": true,
                "arranged": []
              },
              "plan": "PassArrangements"
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Reduce": {
                  "input": {
                    "Mfp": {
                      "input": {
                        "Reduce": {
                          "input": {
                            "Join": {
                              "inputs": [
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Local": 0
                                        },
                                        "keys": {
                                          "raw": true,
                                          "arranged": []
                                        },
                                        "plan": {
                                          "Collection": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0
                                            ],
                                            "input_arity": 3
                                          }
                                        }
                                      }
                                    },
                                    "forms": {
                                      "raw": true,
                                      "arranged": [
                                        [
                                          [],
                                          {
                                            "0": 0
                                          },
                                          [
                                            0
                                          ]
                                        ]
                                      ]
                                    },
                                    "input_key": null,
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0
                                      ],
                                      "input_arity": 1
                                    }
                                  }
                                },
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Global": {
                                            "User": 18
                                          }
                                        },
                                        "keys": {
                                          "raw": false,
                                          "arranged": [
                                            [
                                              [
                                                {
                                                  "Column": 0
                                                }
                                              ],
                                              {
                                                "0": 0,
                                                "1": 1,
                                                "2": 2,
                                                "3": 3,
                                                "4": 4,
                                                "5": 5,
                                                "6": 6,
                                                "7": 7,
                                                "8": 8,
                                                "9": 9,
                                                "10": 10,
                                                "11": 11,
                                                "12": 12,
                                                "13": 13,
                                                "14": 14,
                                                "15": 15,
                                                "16": 16,
                                                "17": 17
                                              },
                                              [
                                                1,
                                                2,
                                                3,
                                                4,
                                                5,
                                                6,
                                                7,
                                                8,
                                                9,
                                                10,
                                                11,
                                                12,
                                                13,
                                                14,
                                                15,
                                                16,
                                                17
                                              ]
                                            ]
                                          ]
                                        },
                                        "plan": "PassArrangements"
                                      }
                                    },
                                    "forms": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0,
                                            "1": 1,
                                            "2": 2,
                                            "3": 3,
                                            "4": 4,
                                            "5": 5,
                                            "6": 6,
                                            "7": 7,
                                            "8": 8,
                                            "9": 9,
                                            "10": 10,
                                            "11": 11,
                                            "12": 12,
                                            "13": 13,
                                            "14": 14,
                                            "15": 15,
                                            "16": 16,
                                            "17": 17
                                          },
                                          [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17
                                          ]
                                        ]
                                      ]
                                    },
                                    "input_key": [
                                      {
                                        "Column": 0
                                      }
                                    ],
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0,
                                        1,
                                        2,
                                        3,
                                        4,
                                        5,
                                        6,
                                        7,
                                        8,
                                        9,
                                        10,
                                        11,
                                        12,
                                        13,
                                        14,
                                        15,
                                        16,
                                        17
                                      ],
                                      "input_arity": 18
                                    }
                                  }
                                },
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Global": {
                                            "User": 13
                                          }
                                        },
                                        "keys": {
                                          "raw": false,
                                          "arranged": [
                                            [
                                              [
                                                {
                                                  "Column": 4
                                                }
                                              ],
                                              {
                                                "0": 1,
                                                "1": 2,
                                                "2": 3,
                                                "3": 4,
                                                "4": 0,
                                                "5": 5,
                                                "6": 6,
                                                "7": 7,
                                                "8": 8,
                                                "9": 9
                                              },
                                              [
                                                0,
                                                1,
                                                2,
                                                3,
                                                5,
                                                6,
                                                7,
                                                8,
                                                9
                                              ]
                                            ]
                                          ]
                                        },
                                        "plan": "PassArrangements"
                                      }
                                    },
                                    "forms": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 4
                                            }
                                          ],
                                          {
                                            "0": 1,
                                            "1": 2,
                                            "2": 3,
                                            "3": 4,
                                            "4": 0,
                                            "5": 5,
                                            "6": 6,
                                            "7": 7,
                                            "8": 8,
                                            "9": 9
                                          },
                                          [
                                            0,
                                            1,
                                            2,
                                            3,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9
                                          ]
                                        ]
                                      ]
                                    },
                                    "input_key": [
                                      {
                                        "Column": 4
                                      }
                                    ],
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        1,
                                        2,
                                        3,
                                        4,
                                        0,
                                        5,
                                        6,
                                        7,
                                        8,
                                        9
                                      ],
                                      "input_arity": 10
                                    }
                                  }
                                },
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Global": {
                                            "User": 17
                                          }
                                        },
                                        "keys": {
                                          "raw": true,
                                          "arranged": []
                                        },
                                        "plan": {
                                          "Collection": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0
                                            ],
                                            "input_arity": 1
                                          }
                                        }
                                      }
                                    },
                                    "forms": {
                                      "raw": true,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0
                                          },
                                          []
                                        ]
                                      ]
                                    },
                                    "input_key": null,
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0
                                      ],
                                      "input_arity": 1
                                    }
                                  }
                                }
                              ],
                              "plan": {
                                "Linear": {
                                  "source_relation": 1,
                                  "source_key": [
                                    {
                                      "Column": 0
                                    }
                                  ],
                                  "initial_closure": null,
                                  "stage_plans": [
                                    {
                                      "lookup_relation": 3,
                                      "stream_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "stream_thinning": [
                                        1,
                                        2,
                                        3,
                                        4,
                                        5,
                                        6,
                                        7,
                                        8,
                                        9,
                                        10,
                                        11,
                                        12,
                                        13,
                                        14,
                                        15,
                                        16,
                                        17
                                      ],
                                      "lookup_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0,
                                              1,
                                              2
                                            ],
                                            "input_arity": 18
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "lookup_relation": 2,
                                      "stream_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "stream_thinning": [
                                        1,
                                        2
                                      ],
                                      "lookup_key": [
                                        {
                                          "Column": 4
                                        }
                                      ],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [
                                              [
                                                9,
                                                {
                                                  "CallBinary": {
                                                    "func": "Gt",
                                                    "expr1": {
                                                      "CallUnary": {
                                                        "func": {
                                                          "CastDateToTimestamp": null
                                                        },
                                                        "expr": {
                                                          "Column": 8
                                                        }
                                                      }
                                                    },
                                                    "expr2": {
                                                      "Literal": [
                                                        {
                                                          "Ok": {
                                                            "data": [
                                                              12,
                                                              218,
                                                              7,
                                                              0,
                                                              0,
                                                              143,
                                                              0,
                                                              0,
                                                              0,
                                                              192,
                                                              168,
                                                              0,
                                                              0,
                                                              0,
                                                              0,
                                                              0,
                                                              0
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "scalar_type": "Timestamp",
                                                          "nullable": false
                                                        }
                                                      ]
                                                    }
                                                  }
                                                }
                                              ]
                                            ],
                                            "projection": [
                                              0,
                                              1,
                                              2,
                                              9
                                            ],
                                            "input_arity": 12
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "lookup_relation": 0,
                                      "stream_key": [],
                                      "stream_thinning": [
                                        0,
                                        1,
                                        2,
                                        3
                                      ],
                                      "lookup_key": [],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              4,
                                              0,
                                              1,
                                              2,
                                              3
                                            ],
                                            "input_arity": 5
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "final_closure": null
                                }
                              }
                            }
                          },
                          "key_val_plan": {
                            "key_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  0,
                                  1,
                                  2,
                                  3
                                ],
                                "input_arity": 5
                              }
                            },
                            "val_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  4
                                ],
                                "input_arity": 5
                              }
                            }
                          },
                          "plan": {
                            "Accumulable": {
                              "full_aggrs": [
                                {
                                  "func": "SumInt32",
                                  "expr": {
                                    "Column": 4
                                  },
                                  "distinct": false
                                }
                              ],
                              "simple_aggrs": [
                                [
                                  0,
                                  0,
                                  {
                                    "func": "SumInt32",
                                    "expr": {
                                      "Column": 4
                                    },
                                    "distinct": false
                                  }
                                ]
                              ],
                              "distinct_aggrs": []
                            }
                          },
                          "input_key": null
                        }
                      },
                      "mfp": {
                        "expressions": [],
                        "predicates": [
                          [
                            3,
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 0
                                },
                                "expr2": {
                                  "CallBinary": {
                                    "func": "ModInt32",
                                    "expr1": {
                                      "CallBinary": {
                                        "func": "MulInt32",
                                        "expr1": {
                                          "Column": 1
                                        },
                                        "expr2": {
                                          "Column": 2
                                        }
                                      }
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              4,
                                              16,
                                              39,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Int32",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          [
                            5,
                            {
                              "CallBinary": {
                                "func": "Gt",
                                "expr1": {
                                  "CallUnary": {
                                    "func": {
                                      "CastInt32ToInt64": null
                                    },
                                    "expr": {
                                      "CallBinary": {
                                        "func": "MulInt32",
                                        "expr1": {
                                          "Literal": [
                                            {
                                              "Ok": {
                                                "data": [
                                                  4,
                                                  2,
                                                  0,
                                                  0,
                                                  0
                                                ]
                                              }
                                            },
                                            {
                                              "scalar_type": "Int32",
                                              "nullable": false
                                            }
                                          ]
                                        },
                                        "expr2": {
                                          "Column": 3
                                        }
                                      }
                                    }
                                  }
                                },
                                "expr2": {
                                  "Column": 4
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          0
                        ],
                        "input_arity": 5
                      },
                      "input_key_val": [
                        [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          },
                          {
                            "Column": 3
                          }
                        ],
                        null
                      ]
                    }
                  },
                  "key_val_plan": {
                    "key_plan": {
                      "mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0
                        ],
                        "input_arity": 1
                      }
                    },
                    "val_plan": {
                      "mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [],
                        "input_arity": 1
                      }
                    }
                  },
                  "plan": "Distinct",
                  "input_key": null
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 0,
            "source_key": null,
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1,
                  2
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2
                      ],
                      "input_arity": 3
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    }
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0, #1)

EOF

# Query 21
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    su_name, count(*) as numwait
FROM
    supplier, orderline l1, "order", stock, nation
WHERE ol_o_id = o_id
AND ol_w_id = o_w_id
AND ol_d_id = o_d_id
AND ol_w_id = s_w_id
AND ol_i_id = s_i_id
AND s_su_suppkey = su_suppkey
AND l1.ol_delivery_d > o_entry_d
AND NOT EXISTS (
    SELECT *
    FROM orderline l2
    WHERE l2.ol_o_id = l1.ol_o_id
    AND l2.ol_w_id = l1.ol_w_id
    AND l2.ol_d_id = l1.ol_d_id
    AND l2.ol_delivery_d > l1.ol_delivery_d
)
AND su_nationkey = n_nationkey
AND n_name = 'GERMANY'
GROUP BY su_name
ORDER BY numwait DESC, su_name
----
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 24
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          2,
                          0
                        ],
                        "input_arity": 7
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2
                    },
                    [
                      1,
                      2
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2
                ],
                "input_arity": 3
              }
            }
          },
          {
            "Get": {
              "id": {
                "Global": {
                  "User": 13
                }
              },
              "keys": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 2
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 2,
                      "1": 1,
                      "2": 0,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9
                    },
                    [
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9
                    ]
                  ]
                ]
              },
              "plan": {
                "Arrangement": [
                  [
                    {
                      "Column": 2
                    },
                    {
                      "Column": 1
                    },
                    {
                      "Column": 0
                    }
                  ],
                  null,
                  {
                    "expressions": [],
                    "predicates": [
                      [
                        5,
                        {
                          "CallUnary": {
                            "func": {
                              "Not": null
                            },
                            "expr": {
                              "CallUnary": {
                                "func": {
                                  "IsNull": null
                                },
                                "expr": {
                                  "Column": 4
                                }
                              }
                            }
                          }
                        }
                      ]
                    ],
                    "projection": [
                      2,
                      1,
                      0,
                      4,
                      6
                    ],
                    "input_arity": 10
                  }
                ]
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 11
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 3,
                          "1": 1,
                          "2": 0,
                          "3": 2,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7
                        },
                        [
                          0,
                          4,
                          5,
                          6,
                          7
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        },
                        {
                          "Column": 1
                        },
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          3,
                          1,
                          0,
                          4
                        ],
                        "input_arity": 8
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3
                    },
                    [
                      3
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3
                ],
                "input_arity": 4
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 18
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15,
                          "16": 16,
                          "17": 17
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15,
                          16,
                          17
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 1
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0,
                          17
                        ],
                        "input_arity": 18
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2
                    },
                    [
                      2
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2
                ],
                "input_arity": 3
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 22
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            3,
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          7,
                                          71,
                                          69,
                                          82,
                                          77,
                                          65,
                                          78,
                                          89
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          1
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 1,
            "source_key": null,
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 2,
                "stream_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  3,
                  4
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [
                        [
                          6,
                          {
                            "CallBinary": {
                              "func": "Gt",
                              "expr1": {
                                "Column": 4
                              },
                              "expr2": {
                                "Column": 5
                              }
                            }
                          }
                        ]
                      ],
                      "projection": [
                        0,
                        1,
                        2,
                        3,
                        4
                      ],
                      "input_arity": 6
                    }
                  }
                }
              },
              {
                "lookup_relation": 3,
                "stream_key": [
                  {
                    "Column": 3
                  },
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  4
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        2,
                        3,
                        1,
                        4,
                        5
                      ],
                      "input_arity": 6
                    }
                  }
                }
              },
              {
                "lookup_relation": 0,
                "stream_key": [
                  {
                    "Column": 4
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  2,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        5,
                        6,
                        1,
                        2,
                        3,
                        4
                      ],
                      "input_arity": 7
                    }
                  }
                }
              },
              {
                "lookup_relation": 4,
                "stream_key": [
                  {
                    "Column": 1
                  }
                ],
                "stream_thinning": [
                  0,
                  2,
                  3,
                  4,
                  5
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "input_arity": 6
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "Reduce": {
            "input": {
              "Get": {
                "id": {
                  "Local": 0
                },
                "keys": {
                  "raw": true,
                  "arranged": []
                },
                "plan": {
                  "Collection": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "input_arity": 5
                  }
                }
              }
            },
            "key_val_plan": {
              "key_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    0,
                    1,
                    2,
                    3
                  ],
                  "input_arity": 4
                }
              },
              "val_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [],
                  "input_arity": 4
                }
              }
            },
            "plan": "Distinct",
            "input_key": null
          }
        },
        "body": {
          "Reduce": {
            "input": {
              "Join": {
                "inputs": [
                  {
                    "ArrangeBy": {
                      "input": {
                        "Get": {
                          "id": {
                            "Local": 0
                          },
                          "keys": {
                            "raw": true,
                            "arranged": []
                          },
                          "plan": "PassArrangements"
                        }
                      },
                      "forms": {
                        "raw": true,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              },
                              {
                                "Column": 2
                              },
                              {
                                "Column": 3
                              },
                              {
                                "Column": 4
                              }
                            ],
                            {
                              "0": 4,
                              "1": 0,
                              "2": 1,
                              "3": 2,
                              "4": 3
                            },
                            [
                              0
                            ]
                          ]
                        ]
                      },
                      "input_key": null,
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1,
                          2,
                          3,
                          4
                        ],
                        "input_arity": 5
                      }
                    }
                  },
                  {
                    "Union": {
                      "inputs": [
                        {
                          "Negate": {
                            "input": {
                              "ArrangeBy": {
                                "input": {
                                  "Reduce": {
                                    "input": {
                                      "Join": {
                                        "inputs": [
                                          {
                                            "Get": {
                                              "id": {
                                                "Local": 1
                                              },
                                              "keys": {
                                                "raw": false,
                                                "arranged": [
                                                  [
                                                    [
                                                      {
                                                        "Column": 0
                                                      },
                                                      {
                                                        "Column": 1
                                                      },
                                                      {
                                                        "Column": 2
                                                      },
                                                      {
                                                        "Column": 3
                                                      }
                                                    ],
                                                    {
                                                      "0": 0,
                                                      "1": 1,
                                                      "2": 2,
                                                      "3": 3
                                                    },
                                                    []
                                                  ]
                                                ]
                                              },
                                              "plan": "PassArrangements"
                                            }
                                          },
                                          {
                                            "ArrangeBy": {
                                              "input": {
                                                "Get": {
                                                  "id": {
                                                    "Global": {
                                                      "User": 13
                                                    }
                                                  },
                                                  "keys": {
                                                    "raw": false,
                                                    "arranged": [
                                                      [
                                                        [
                                                          {
                                                            "Column": 2
                                                          },
                                                          {
                                                            "Column": 1
                                                          },
                                                          {
                                                            "Column": 0
                                                          }
                                                        ],
                                                        {
                                                          "0": 2,
                                                          "1": 1,
                                                          "2": 0,
                                                          "3": 3,
                                                          "4": 4,
                                                          "5": 5,
                                                          "6": 6,
                                                          "7": 7,
                                                          "8": 8,
                                                          "9": 9
                                                        },
                                                        [
                                                          3,
                                                          4,
                                                          5,
                                                          6,
                                                          7,
                                                          8,
                                                          9
                                                        ]
                                                      ]
                                                    ]
                                                  },
                                                  "plan": "PassArrangements"
                                                }
                                              },
                                              "forms": {
                                                "raw": false,
                                                "arranged": [
                                                  [
                                                    [
                                                      {
                                                        "Column": 2
                                                      },
                                                      {
                                                        "Column": 1
                                                      },
                                                      {
                                                        "Column": 0
                                                      }
                                                    ],
                                                    {
                                                      "0": 2,
                                                      "1": 1,
                                                      "2": 0,
                                                      "3": 3,
                                                      "4": 4,
                                                      "5": 5,
                                                      "6": 6,
                                                      "7": 7,
                                                      "8": 8,
                                                      "9": 9
                                                    },
                                                    [
                                                      3,
                                                      4,
                                                      5,
                                                      6,
                                                      7,
                                                      8,
                                                      9
                                                    ]
                                                  ]
                                                ]
                                              },
                                              "input_key": [
                                                {
                                                  "Column": 2
                                                },
                                                {
                                                  "Column": 1
                                                },
                                                {
                                                  "Column": 0
                                                }
                                              ],
                                              "input_mfp": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  2,
                                                  1,
                                                  0,
                                                  3,
                                                  4,
                                                  5,
                                                  6,
                                                  7,
                                                  8,
                                                  9
                                                ],
                                                "input_arity": 10
                                              }
                                            }
                                          }
                                        ],
                                        "plan": {
                                          "Linear": {
                                            "source_relation": 0,
                                            "source_key": [
                                              {
                                                "Column": 0
                                              },
                                              {
                                                "Column": 1
                                              },
                                              {
                                                "Column": 2
                                              },
                                              {
                                                "Column": 3
                                              }
                                            ],
                                            "initial_closure": null,
                                            "stage_plans": [
                                              {
                                                "lookup_relation": 1,
                                                "stream_key": [
                                                  {
                                                    "Column": 2
                                                  },
                                                  {
                                                    "Column": 1
                                                  },
                                                  {
                                                    "Column": 0
                                                  }
                                                ],
                                                "stream_thinning": [
                                                  3
                                                ],
                                                "lookup_key": [
                                                  {
                                                    "Column": 2
                                                  },
                                                  {
                                                    "Column": 1
                                                  },
                                                  {
                                                    "Column": 0
                                                  }
                                                ],
                                                "closure": {
                                                  "ready_equivalences": [],
                                                  "before": {
                                                    "mfp": {
                                                      "expressions": [],
                                                      "predicates": [
                                                        [
                                                          8,
                                                          {
                                                            "CallBinary": {
                                                              "func": "Gt",
                                                              "expr1": {
                                                                "Column": 7
                                                              },
                                                              "expr2": {
                                                                "Column": 3
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      ],
                                                      "projection": [
                                                        2,
                                                        1,
                                                        0,
                                                        3
                                                      ],
                                                      "input_arity": 11
                                                    }
                                                  }
                                                }
                                              }
                                            ],
                                            "final_closure": null
                                          }
                                        }
                                      }
                                    },
                                    "key_val_plan": {
                                      "key_plan": {
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            0,
                                            1,
                                            2,
                                            3
                                          ],
                                          "input_arity": 4
                                        }
                                      },
                                      "val_plan": {
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [],
                                          "input_arity": 4
                                        }
                                      }
                                    },
                                    "plan": "Distinct",
                                    "input_key": null
                                  }
                                },
                                "forms": {
                                  "raw": true,
                                  "arranged": []
                                },
                                "input_key": [
                                  {
                                    "Column": 0
                                  },
                                  {
                                    "Column": 1
                                  },
                                  {
                                    "Column": 2
                                  },
                                  {
                                    "Column": 3
                                  }
                                ],
                                "input_mfp": {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [
                                    0,
                                    1,
                                    2,
                                    3
                                  ],
                                  "input_arity": 4
                                }
                              }
                            }
                          }
                        },
                        {
                          "ArrangeBy": {
                            "input": {
                              "Get": {
                                "id": {
                                  "Local": 1
                                },
                                "keys": {
                                  "raw": false,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 0
                                        },
                                        {
                                          "Column": 1
                                        },
                                        {
                                          "Column": 2
                                        },
                                        {
                                          "Column": 3
                                        }
                                      ],
                                      {
                                        "0": 0,
                                        "1": 1,
                                        "2": 2,
                                        "3": 3
                                      },
                                      []
                                    ]
                                  ]
                                },
                                "plan": "PassArrangements"
                              }
                            },
                            "forms": {
                              "raw": true,
                              "arranged": []
                            },
                            "input_key": [
                              {
                                "Column": 0
                              },
                              {
                                "Column": 1
                              },
                              {
                                "Column": 2
                              },
                              {
                                "Column": 3
                              }
                            ],
                            "input_mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                1,
                                2,
                                3
                              ],
                              "input_arity": 4
                            }
                          }
                        }
                      ]
                    }
                  }
                ],
                "plan": {
                  "Linear": {
                    "source_relation": 1,
                    "source_key": null,
                    "initial_closure": null,
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          },
                          {
                            "Column": 3
                          }
                        ],
                        "stream_thinning": [],
                        "lookup_key": [
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          },
                          {
                            "Column": 3
                          },
                          {
                            "Column": 4
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                4
                              ],
                              "input_arity": 5
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                }
              }
            },
            "key_val_plan": {
              "key_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    0
                  ],
                  "input_arity": 1
                }
              },
              "val_plan": {
                "mfp": {
                  "expressions": [
                    {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              2
                            ]
                          }
                        },
                        {
                          "scalar_type": "Bool",
                          "nullable": false
                        }
                      ]
                    }
                  ],
                  "predicates": [],
                  "projection": [
                    1
                  ],
                  "input_arity": 1
                }
              }
            },
            "plan": {
              "Accumulable": {
                "full_aggrs": [
                  {
                    "func": "Count",
                    "expr": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              2
                            ]
                          }
                        },
                        {
                          "scalar_type": "Bool",
                          "nullable": false
                        }
                      ]
                    },
                    "distinct": false
                  }
                ],
                "simple_aggrs": [
                  [
                    0,
                    0,
                    {
                      "func": "Count",
                      "expr": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                2
                              ]
                            }
                          },
                          {
                            "scalar_type": "Bool",
                            "nullable": false
                          }
                        ]
                      },
                      "distinct": false
                    }
                  ]
                ],
                "distinct_aggrs": []
              }
            },
            "input_key": null
          }
        }
      }
    }
  }
}

Finish order_by=(#1 desc nulls_first, #0 asc nulls_last) limit=none offset=0 project=(#0, #1)

EOF

# Query 22
query T multiline
EXPLAIN physical PLAN FOR
SELECT
    substr(c_state, 1, 1) AS country,
    count(*) AS numcust,
    sum(c_balance) AS totacctbal
FROM customer
WHERE substr(c_phone, 1, 1) IN ('1', '2', '3', '4', '5', '6', '7')
AND c_balance > (
    SELECT avg(c_balance)
    FROM customer
    WHERE c_balance > 0.00
    AND substr(c_phone, 1, 1) IN ('1', '2', '3', '4', '5', '6', '7')
)
AND NOT EXISTS (
    SELECT *
    FROM "order"
    WHERE o_c_id = c_id AND o_w_id = c_w_id AND o_d_id = c_d_id
)
GROUP BY substr(c_state, 1, 1)
ORDER BY substr(c_state, 1, 1)
----
{
  "Let": {
    "id": 0,
    "value": {
      "Get": {
        "id": {
          "Global": {
            "User": 4
          }
        },
        "keys": {
          "raw": false,
          "arranged": [
            [
              [
                {
                  "Column": 2
                },
                {
                  "Column": 1
                }
              ],
              {
                "0": 2,
                "1": 1,
                "2": 0,
                "3": 3,
                "4": 4,
                "5": 5,
                "6": 6,
                "7": 7,
                "8": 8,
                "9": 9,
                "10": 10,
                "11": 11,
                "12": 12,
                "13": 13,
                "14": 14,
                "15": 15,
                "16": 16,
                "17": 17,
                "18": 18,
                "19": 19,
                "20": 20,
                "21": 21
              },
              [
                0,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21
              ]
            ]
          ]
        },
        "plan": {
          "Arrangement": [
            [
              {
                "Column": 2
              },
              {
                "Column": 1
              }
            ],
            null,
            {
              "expressions": [
                {
                  "CallVariadic": {
                    "func": "Substr",
                    "exprs": [
                      {
                        "CallUnary": {
                          "func": {
                            "CastCharToString": null
                          },
                          "expr": {
                            "Column": 11
                          }
                        }
                      },
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                5,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Int64",
                            "nullable": false
                          }
                        ]
                      },
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                5,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Int64",
                            "nullable": false
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "predicates": [],
              "projection": [
                2,
                1,
                0,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22
              ],
              "input_arity": 22
            }
          ]
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "Join": {
            "inputs": [
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [
                        [
                          23,
                          {
                            "CallVariadic": {
                              "func": "Or",
                              "exprs": [
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 22
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              1,
                                              49
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 22
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              1,
                                              50
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 22
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              1,
                                              51
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 22
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              1,
                                              52
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 22
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              1,
                                              53
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 22
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              1,
                                              54
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 22
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              1,
                                              55
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      ],
                      "projection": [
                        0,
                        1,
                        2,
                        9,
                        16
                      ],
                      "input_arity": 23
                    }
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Reduce": {
                      "input": {
                        "Get": {
                          "id": {
                            "Local": 0
                          },
                          "keys": {
                            "raw": true,
                            "arranged": []
                          },
                          "plan": {
                            "Collection": {
                              "expressions": [],
                              "predicates": [
                                [
                                  17,
                                  {
                                    "CallBinary": {
                                      "func": "Gt",
                                      "expr1": {
                                        "Column": 16
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                29,
                                                1,
                                                0,
                                                0,
                                                0,
                                                0
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": {
                                              "Numeric": {
                                                "max_scale": null
                                              }
                                            },
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                [
                                  23,
                                  {
                                    "CallVariadic": {
                                      "func": "Or",
                                      "exprs": [
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 22
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      1,
                                                      49
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 22
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      1,
                                                      50
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 22
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      1,
                                                      51
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 22
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      1,
                                                      52
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 22
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      1,
                                                      53
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 22
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      1,
                                                      54
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 22
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      1,
                                                      55
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                16
                              ],
                              "input_arity": 23
                            }
                          }
                        }
                      },
                      "key_val_plan": {
                        "key_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [],
                            "input_arity": 1
                          }
                        },
                        "val_plan": {
                          "mfp": {
                            "expressions": [
                              {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        2
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Bool",
                                    "nullable": false
                                  }
                                ]
                              }
                            ],
                            "predicates": [],
                            "projection": [
                              0,
                              1
                            ],
                            "input_arity": 1
                          }
                        }
                      },
                      "plan": {
                        "Accumulable": {
                          "full_aggrs": [
                            {
                              "func": "SumNumeric",
                              "expr": {
                                "Column": 0
                              },
                              "distinct": false
                            },
                            {
                              "func": "Count",
                              "expr": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        2
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Bool",
                                    "nullable": false
                                  }
                                ]
                              },
                              "distinct": false
                            }
                          ],
                          "simple_aggrs": [
                            [
                              0,
                              0,
                              {
                                "func": "SumNumeric",
                                "expr": {
                                  "Column": 0
                                },
                                "distinct": false
                              }
                            ],
                            [
                              1,
                              1,
                              {
                                "func": "Count",
                                "expr": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          2
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Bool",
                                      "nullable": false
                                    }
                                  ]
                                },
                                "distinct": false
                              }
                            ]
                          ],
                          "distinct_aggrs": []
                        }
                      },
                      "input_key": null
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          0,
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": [],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 0,
                "source_key": null,
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [],
                    "stream_thinning": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              7,
                              {
                                "CallBinary": {
                                  "func": "Gt",
                                  "expr1": {
                                    "CallUnary": {
                                      "func": {
                                        "CastNumericToFloat64": null
                                      },
                                      "expr": {
                                        "Column": 4
                                      }
                                    }
                                  },
                                  "expr2": {
                                    "CallBinary": {
                                      "func": "DivFloat64",
                                      "expr1": {
                                        "CallUnary": {
                                          "func": {
                                            "CastNumericToFloat64": null
                                          },
                                          "expr": {
                                            "Column": 5
                                          }
                                        }
                                      },
                                      "expr2": {
                                        "CallUnary": {
                                          "func": {
                                            "CastInt64ToFloat64": null
                                          },
                                          "expr": {
                                            "If": {
                                              "cond": {
                                                "CallBinary": {
                                                  "func": "Eq",
                                                  "expr1": {
                                                    "Column": 6
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            5,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": "Int64",
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              "then": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        0
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": "Int64",
                                                    "nullable": true
                                                  }
                                                ]
                                              },
                                              "els": {
                                                "Column": 6
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            0,
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "body": {
          "Let": {
            "id": 2,
            "value": {
              "Get": {
                "id": {
                  "Local": 1
                },
                "keys": {
                  "raw": true,
                  "arranged": []
                },
                "plan": {
                  "Collection": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2
                    ],
                    "input_arity": 5
                  }
                }
              }
            },
            "body": {
              "Reduce": {
                "input": {
                  "Join": {
                    "inputs": [
                      {
                        "ArrangeBy": {
                          "input": {
                            "Get": {
                              "id": {
                                "Local": 1
                              },
                              "keys": {
                                "raw": true,
                                "arranged": []
                              },
                              "plan": "PassArrangements"
                            }
                          },
                          "forms": {
                            "raw": true,
                            "arranged": [
                              [
                                [
                                  {
                                    "Column": 0
                                  },
                                  {
                                    "Column": 1
                                  },
                                  {
                                    "Column": 2
                                  }
                                ],
                                {
                                  "0": 0,
                                  "1": 1,
                                  "2": 2,
                                  "3": 3,
                                  "4": 4
                                },
                                [
                                  3,
                                  4
                                ]
                              ]
                            ]
                          },
                          "input_key": null,
                          "input_mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              0,
                              1,
                              2,
                              3,
                              4
                            ],
                            "input_arity": 5
                          }
                        }
                      },
                      {
                        "Union": {
                          "inputs": [
                            {
                              "Negate": {
                                "input": {
                                  "Join": {
                                    "inputs": [
                                      {
                                        "Get": {
                                          "id": {
                                            "Local": 2
                                          },
                                          "keys": {
                                            "raw": true,
                                            "arranged": []
                                          },
                                          "plan": "PassArrangements"
                                        }
                                      },
                                      {
                                        "ArrangeBy": {
                                          "input": {
                                            "Reduce": {
                                              "input": {
                                                "Get": {
                                                  "id": {
                                                    "Global": {
                                                      "User": 11
                                                    }
                                                  },
                                                  "keys": {
                                                    "raw": false,
                                                    "arranged": [
                                                      [
                                                        [
                                                          {
                                                            "Column": 2
                                                          },
                                                          {
                                                            "Column": 1
                                                          },
                                                          {
                                                            "Column": 3
                                                          }
                                                        ],
                                                        {
                                                          "0": 3,
                                                          "1": 1,
                                                          "2": 0,
                                                          "3": 2,
                                                          "4": 4,
                                                          "5": 5,
                                                          "6": 6,
                                                          "7": 7
                                                        },
                                                        [
                                                          0,
                                                          4,
                                                          5,
                                                          6,
                                                          7
                                                        ]
                                                      ]
                                                    ]
                                                  },
                                                  "plan": {
                                                    "Arrangement": [
                                                      [
                                                        {
                                                          "Column": 2
                                                        },
                                                        {
                                                          "Column": 1
                                                        },
                                                        {
                                                          "Column": 3
                                                        }
                                                      ],
                                                      null,
                                                      {
                                                        "expressions": [],
                                                        "predicates": [
                                                          [
                                                            3,
                                                            {
                                                              "CallUnary": {
                                                                "func": {
                                                                  "Not": null
                                                                },
                                                                "expr": {
                                                                  "CallUnary": {
                                                                    "func": {
                                                                      "IsNull": null
                                                                    },
                                                                    "expr": {
                                                                      "Column": 2
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          ]
                                                        ],
                                                        "projection": [
                                                          1,
                                                          0,
                                                          2
                                                        ],
                                                        "input_arity": 8
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              "key_val_plan": {
                                                "key_plan": {
                                                  "mfp": {
                                                    "expressions": [],
                                                    "predicates": [],
                                                    "projection": [
                                                      2,
                                                      0,
                                                      1
                                                    ],
                                                    "input_arity": 3
                                                  }
                                                },
                                                "val_plan": {
                                                  "mfp": {
                                                    "expressions": [],
                                                    "predicates": [],
                                                    "projection": [],
                                                    "input_arity": 3
                                                  }
                                                }
                                              },
                                              "plan": "Distinct",
                                              "input_key": null
                                            }
                                          },
                                          "forms": {
                                            "raw": false,
                                            "arranged": [
                                              [
                                                [
                                                  {
                                                    "Column": 0
                                                  },
                                                  {
                                                    "Column": 1
                                                  },
                                                  {
                                                    "Column": 2
                                                  }
                                                ],
                                                {
                                                  "0": 0,
                                                  "1": 1,
                                                  "2": 2
                                                },
                                                []
                                              ]
                                            ]
                                          },
                                          "input_key": [
                                            {
                                              "Column": 0
                                            },
                                            {
                                              "Column": 1
                                            },
                                            {
                                              "Column": 2
                                            }
                                          ],
                                          "input_mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0,
                                              1,
                                              2
                                            ],
                                            "input_arity": 3
                                          }
                                        }
                                      }
                                    ],
                                    "plan": {
                                      "Linear": {
                                        "source_relation": 0,
                                        "source_key": null,
                                        "initial_closure": null,
                                        "stage_plans": [
                                          {
                                            "lookup_relation": 1,
                                            "stream_key": [
                                              {
                                                "Column": 0
                                              },
                                              {
                                                "Column": 1
                                              },
                                              {
                                                "Column": 2
                                              }
                                            ],
                                            "stream_thinning": [],
                                            "lookup_key": [
                                              {
                                                "Column": 0
                                              },
                                              {
                                                "Column": 1
                                              },
                                              {
                                                "Column": 2
                                              }
                                            ],
                                            "closure": {
                                              "ready_equivalences": [],
                                              "before": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [
                                                    0,
                                                    1,
                                                    2
                                                  ],
                                                  "input_arity": 3
                                                }
                                              }
                                            }
                                          }
                                        ],
                                        "final_closure": null
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "Get": {
                                "id": {
                                  "Local": 2
                                },
                                "keys": {
                                  "raw": true,
                                  "arranged": []
                                },
                                "plan": "PassArrangements"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "plan": {
                      "Linear": {
                        "source_relation": 1,
                        "source_key": null,
                        "initial_closure": null,
                        "stage_plans": [
                          {
                            "lookup_relation": 0,
                            "stream_key": [
                              {
                                "Column": 0
                              },
                              {
                                "Column": 1
                              },
                              {
                                "Column": 2
                              }
                            ],
                            "stream_thinning": [],
                            "lookup_key": [
                              {
                                "Column": 0
                              },
                              {
                                "Column": 1
                              },
                              {
                                "Column": 2
                              }
                            ],
                            "closure": {
                              "ready_equivalences": [],
                              "before": {
                                "mfp": {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [
                                    3,
                                    4
                                  ],
                                  "input_arity": 5
                                }
                              }
                            }
                          }
                        ],
                        "final_closure": null
                      }
                    }
                  }
                },
                "key_val_plan": {
                  "key_plan": {
                    "mfp": {
                      "expressions": [
                        {
                          "CallVariadic": {
                            "func": "Substr",
                            "exprs": [
                              {
                                "CallUnary": {
                                  "func": {
                                    "CastCharToString": null
                                  },
                                  "expr": {
                                    "Column": 0
                                  }
                                }
                              },
                              {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        5,
                                        1,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Int64",
                                    "nullable": false
                                  }
                                ]
                              },
                              {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        5,
                                        1,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Int64",
                                    "nullable": false
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "predicates": [],
                      "projection": [
                        2
                      ],
                      "input_arity": 2
                    }
                  },
                  "val_plan": {
                    "mfp": {
                      "expressions": [
                        {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  2
                                ]
                              }
                            },
                            {
                              "scalar_type": "Bool",
                              "nullable": false
                            }
                          ]
                        }
                      ],
                      "predicates": [],
                      "projection": [
                        2,
                        1
                      ],
                      "input_arity": 2
                    }
                  }
                },
                "plan": {
                  "Accumulable": {
                    "full_aggrs": [
                      {
                        "func": "Count",
                        "expr": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  2
                                ]
                              }
                            },
                            {
                              "scalar_type": "Bool",
                              "nullable": false
                            }
                          ]
                        },
                        "distinct": false
                      },
                      {
                        "func": "SumNumeric",
                        "expr": {
                          "Column": 1
                        },
                        "distinct": false
                      }
                    ],
                    "simple_aggrs": [
                      [
                        0,
                        0,
                        {
                          "func": "Count",
                          "expr": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    2
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Bool",
                                "nullable": false
                              }
                            ]
                          },
                          "distinct": false
                        }
                      ],
                      [
                        1,
                        1,
                        {
                          "func": "SumNumeric",
                          "expr": {
                            "Column": 1
                          },
                          "distinct": false
                        }
                      ]
                    ],
                    "distinct_aggrs": []
                  }
                },
                "input_key": null
              }
            }
          }
        }
      }
    }
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0..=#2)

EOF
