# Copyright Materialize, Inc. and contributors. All rights reserved.
#
# Use of this software is governed by the Business Source License
# included in the LICENSE file at the root of this repository.
#
# As of the Change Date specified in that file, in accordance with
# the Business Source License, use of this software will be governed
# by the Apache License, Version 2.0.

statement ok
CREATE TABLE nation (
    n_nationkey  integer PRIMARY KEY,
    n_name       char(25) NOT NULL,
    n_regionkey  integer NOT NULL,
    n_comment    varchar(152)
)

statement ok
CREATE INDEX fk_nation_regionkey ON nation (n_regionkey ASC)

statement ok
CREATE TABLE region  (
    r_regionkey  integer PRIMARY KEY,
    r_name       char(25) NOT NULL,
    r_comment    varchar(152)
)

statement ok
CREATE TABLE part (
    p_partkey     integer PRIMARY KEY,
    p_name        varchar(55) NOT NULL,
    p_mfgr        char(25) NOT NULL,
    p_brand       char(10) NOT NULL,
    p_type        varchar(25) NOT NULL,
    p_size        integer NOT NULL,
    p_container   char(10) NOT NULL,
    p_retailprice decimal(15, 2) NOT NULL,
    p_comment     varchar(23) NOT NULL
)

statement ok
CREATE TABLE supplier (
    s_suppkey     integer PRIMARY KEY,
    s_name        char(25) NOT NULL,
    s_address     varchar(40) NOT NULL,
    s_nationkey   integer NOT NULL,
    s_phone       char(15) NOT NULL,
    s_acctbal     decimal(15, 2) NOT NULL,
    s_comment     varchar(101) NOT NULL
)

statement ok
CREATE INDEX fk_supplier_nationkey ON supplier (s_nationkey ASC)

statement ok
CREATE TABLE partsupp (
    ps_partkey     integer NOT NULL,
    ps_suppkey     integer NOT NULL,
    ps_availqty    integer NOT NULL,
    ps_supplycost  decimal(15, 2) NOT NULL,
    ps_comment     varchar(199) NOT NULL,
    PRIMARY KEY (ps_partkey, ps_suppkey)
)

statement ok
CREATE INDEX fk_partsupp_partkey ON partsupp (ps_partkey ASC)

statement ok
CREATE INDEX fk_partsupp_suppkey ON partsupp (ps_suppkey ASC)

statement ok
CREATE TABLE customer (
    c_custkey     integer PRIMARY KEY,
    c_name        varchar(25) NOT NULL,
    c_address     varchar(40) NOT NULL,
    c_nationkey   integer NOT NULL,
    c_phone       char(15) NOT NULL,
    c_acctbal     decimal(15, 2) NOT NULL,
    c_mktsegment  char(10) NOT NULL,
    c_comment     varchar(117) NOT NULL
)

statement ok
CREATE INDEX fk_customer_nationkey ON customer (c_nationkey ASC)

statement ok
CREATE TABLE orders (
    o_orderkey       integer PRIMARY KEY,
    o_custkey        integer NOT NULL,
    o_orderstatus    char(1) NOT NULL,
    o_totalprice     decimal(15, 2) NOT NULL,
    o_orderdate      DATE NOT NULL,
    o_orderpriority  char(15) NOT NULL,
    o_clerk          char(15) NOT NULL,
    o_shippriority   integer NOT NULL,
    o_comment        varchar(79) NOT NULL
)

statement ok
CREATE INDEX fk_orders_custkey ON orders (o_custkey ASC)

statement ok
CREATE TABLE lineitem (
    l_orderkey       integer NOT NULL,
    l_partkey        integer NOT NULL,
    l_suppkey        integer NOT NULL,
    l_linenumber     integer NOT NULL,
    l_quantity       decimal(15, 2) NOT NULL,
    l_extendedprice  decimal(15, 2) NOT NULL,
    l_discount       decimal(15, 2) NOT NULL,
    l_tax            decimal(15, 2) NOT NULL,
    l_returnflag     char(1) NOT NULL,
    l_linestatus     char(1) NOT NULL,
    l_shipdate       date NOT NULL,
    l_commitdate     date NOT NULL,
    l_receiptdate    date NOT NULL,
    l_shipinstruct   char(25) NOT NULL,
    l_shipmode       char(10) NOT NULL,
    l_comment        varchar(44) NOT NULL,
    PRIMARY KEY (l_orderkey, l_linenumber)
)

statement ok
CREATE INDEX fk_lineitem_orderkey ON lineitem (l_orderkey ASC)

statement ok
CREATE INDEX fk_lineitem_partkey ON lineitem (l_partkey ASC)

statement ok
CREATE INDEX fk_lineitem_suppkey ON lineitem (l_suppkey ASC)

statement ok
CREATE INDEX fk_lineitem_partsuppkey ON lineitem (l_partkey ASC, l_suppkey ASC)



query T multiline
-- Query 01
EXPLAIN physical PLAN FOR SELECT
	l_returnflag,
	l_linestatus,
	sum(l_quantity) AS sum_qty,
	sum(l_extendedprice) AS sum_base_price,
	sum(l_extendedprice * (1 - l_discount)) AS sum_disc_price,
	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge,
	avg(l_quantity) AS avg_qty,
	avg(l_extendedprice) AS avg_price,
	avg(l_discount) AS avg_disc,
	count(*) AS count_order
FROM
	lineitem
WHERE
	l_shipdate <= DATE '1998-12-01' -- - INTERVAL '60' day (fails with an error)
GROUP BY
	l_returnflag,
	l_linestatus
ORDER BY
	l_returnflag,
	l_linestatus
----
{
  "Mfp": {
    "input": {
      "Reduce": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 14
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 0
                    }
                  ],
                  {
                    "0": 0,
                    "1": 1,
                    "2": 2,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9,
                    "10": 10,
                    "11": 11,
                    "12": 12,
                    "13": 13,
                    "14": 14,
                    "15": 15
                  },
                  [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                  ]
                ]
              ]
            },
            "plan": {
              "Arrangement": [
                [
                  {
                    "Column": 0
                  }
                ],
                null,
                {
                  "expressions": [],
                  "predicates": [
                    [
                      11,
                      {
                        "CallBinary": {
                          "func": "Lte",
                          "expr1": {
                            "Column": 10
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    10,
                                    116,
                                    254,
                                    255,
                                    255
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Date",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  ],
                  "projection": [
                    4,
                    5,
                    6,
                    7,
                    8,
                    9
                  ],
                  "input_arity": 16
                }
              ]
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                4,
                5
              ],
              "input_arity": 6
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 1
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 2
                        }
                      }
                    }
                  }
                },
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 6
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "AddNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 3
                        }
                      }
                    }
                  }
                },
                {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                }
              ],
              "predicates": [],
              "projection": [
                0,
                1,
                6,
                7,
                8,
                2
              ],
              "input_arity": 6
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 0
                },
                "distinct": false
              },
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 1
                },
                "distinct": false
              },
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 1
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 2
                        }
                      }
                    }
                  }
                },
                "distinct": false
              },
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "CallBinary": {
                        "func": "MulNumeric",
                        "expr1": {
                          "Column": 1
                        },
                        "expr2": {
                          "CallBinary": {
                            "func": "SubNumeric",
                            "expr1": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      29,
                                      1,
                                      0,
                                      0,
                                      1,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Numeric": {
                                      "max_scale": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            },
                            "expr2": {
                              "Column": 2
                            }
                          }
                        }
                      }
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "AddNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 3
                        }
                      }
                    }
                  }
                },
                "distinct": false
              },
              {
                "func": "Count",
                "expr": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                },
                "distinct": false
              },
              {
                "func": "SumNumeric",
                "expr": {
                  "Column": 2
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 0
                  },
                  "distinct": false
                }
              ],
              [
                1,
                1,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 1
                  },
                  "distinct": false
                }
              ],
              [
                2,
                2,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 1
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "SubNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 2
                          }
                        }
                      }
                    }
                  },
                  "distinct": false
                }
              ],
              [
                3,
                3,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "CallBinary": {
                          "func": "MulNumeric",
                          "expr1": {
                            "Column": 1
                          },
                          "expr2": {
                            "CallBinary": {
                              "func": "SubNumeric",
                              "expr1": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        29,
                                        1,
                                        0,
                                        0,
                                        1,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": {
                                      "Numeric": {
                                        "max_scale": null
                                      }
                                    },
                                    "nullable": false
                                  }
                                ]
                              },
                              "expr2": {
                                "Column": 2
                              }
                            }
                          }
                        }
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "AddNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 3
                          }
                        }
                      }
                    }
                  },
                  "distinct": false
                }
              ],
              [
                4,
                4,
                {
                  "func": "Count",
                  "expr": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            2
                          ]
                        }
                      },
                      {
                        "scalar_type": "Bool",
                        "nullable": false
                      }
                    ]
                  },
                  "distinct": false
                }
              ],
              [
                5,
                5,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "Column": 2
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "mfp": {
      "expressions": [
        {
          "CallUnary": {
            "func": {
              "CastInt64ToFloat64": null
            },
            "expr": {
              "If": {
                "cond": {
                  "CallBinary": {
                    "func": "Eq",
                    "expr1": {
                      "Column": 6
                    },
                    "expr2": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              5,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": "Int64",
                          "nullable": false
                        }
                      ]
                    }
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int64",
                      "nullable": true
                    }
                  ]
                },
                "els": {
                  "Column": 6
                }
              }
            }
          }
        },
        {
          "CallBinary": {
            "func": "DivFloat64",
            "expr1": {
              "CallUnary": {
                "func": {
                  "CastNumericToFloat64": null
                },
                "expr": {
                  "Column": 2
                }
              }
            },
            "expr2": {
              "Column": 8
            }
          }
        },
        {
          "CallBinary": {
            "func": "DivFloat64",
            "expr1": {
              "CallUnary": {
                "func": {
                  "CastNumericToFloat64": null
                },
                "expr": {
                  "Column": 3
                }
              }
            },
            "expr2": {
              "Column": 8
            }
          }
        },
        {
          "CallBinary": {
            "func": "DivFloat64",
            "expr1": {
              "CallUnary": {
                "func": {
                  "CastNumericToFloat64": null
                },
                "expr": {
                  "Column": 7
                }
              }
            },
            "expr2": {
              "Column": 8
            }
          }
        }
      ],
      "predicates": [],
      "projection": [
        0,
        1,
        2,
        3,
        4,
        5,
        9,
        10,
        11,
        6
      ],
      "input_arity": 8
    },
    "input_key_val": [
      [
        {
          "Column": 0
        },
        {
          "Column": 1
        }
      ],
      null
    ]
  }
}

Finish order_by=(#0 asc nulls_last, #1 asc nulls_last) limit=none offset=0 project=(#0..=#9)

EOF


query T multiline
-- Query 02
EXPLAIN physical PLAN FOR SELECT
    s_acctbal,
    s_name,
    n_name,
    p_partkey,
    p_mfgr,
    s_address,
    s_phone,
    s_comment
FROM
    part, supplier, partsupp, nation, region
WHERE
    p_partkey = ps_partkey
    AND s_suppkey = ps_suppkey
    AND p_size = CAST (15 AS smallint)
    AND p_type LIKE '%BRASS'
    AND s_nationkey = n_nationkey
    AND n_regionkey = r_regionkey
    AND r_name = 'EUROPE'
    AND ps_supplycost
        = (
                SELECT
                    min(ps_supplycost)
                FROM
                    partsupp, supplier, nation, region
                WHERE
                    p_partkey = ps_partkey
                    AND s_suppkey = ps_suppkey
                    AND s_nationkey = n_nationkey
                    AND n_regionkey = r_regionkey
                    AND r_name = 'EUROPE'
            )
ORDER BY
    s_acctbal DESC, n_name, s_name, p_partkey
----
Source materialize.public.region (u3):
{
  "expressions": [],
  "predicates": [
    [
      2,
      {
        "CallBinary": {
          "func": "Eq",
          "expr1": {
            "Column": 1
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    19,
                    6,
                    69,
                    85,
                    82,
                    79,
                    80,
                    69
                  ]
                }
              },
              {
                "scalar_type": {
                  "Char": {
                    "length": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 3
}

Source materialize.public.part (u4):
{
  "expressions": [],
  "predicates": [
    [
      5,
      {
        "CallUnary": {
          "func": {
            "IsLikeMatch": {
              "pattern": "%BRASS",
              "case_insensitive": false,
              "matcher_impl": {
                "String": [
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": "BRASS"
                  }
                ]
              }
            }
          },
          "expr": {
            "CallUnary": {
              "func": {
                "CastVarCharToString": null
              },
              "expr": {
                "Column": 4
              }
            }
          }
        }
      }
    ],
    [
      6,
      {
        "CallBinary": {
          "func": "Eq",
          "expr1": {
            "Column": 5
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    4,
                    15,
                    0,
                    0,
                    0
                  ]
                }
              },
              {
                "scalar_type": "Int32",
                "nullable": false
              }
            ]
          }
        }
      }
    ]
  ],
  "projection": [
    0,
    2
  ],
  "input_arity": 9
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "ArrangeBy": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 7
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 0
                    }
                  ],
                  {
                    "0": 0,
                    "1": 1,
                    "2": 2,
                    "3": 3,
                    "4": 4
                  },
                  [
                    1,
                    2,
                    3,
                    4
                  ]
                ]
              ]
            },
            "plan": "PassArrangements"
          }
        },
        "forms": {
          "raw": false,
          "arranged": [
            [
              [
                {
                  "Column": 0
                }
              ],
              {
                "0": 0,
                "1": 1,
                "2": 2,
                "3": 3,
                "4": 4
              },
              [
                1,
                2,
                3,
                4
              ]
            ]
          ]
        },
        "input_key": [
          {
            "Column": 0
          }
        ],
        "input_mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            0,
            1,
            2,
            3,
            4
          ],
          "input_arity": 5
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "ArrangeBy": {
            "input": {
              "Get": {
                "id": {
                  "Global": {
                    "User": 3
                  }
                },
                "keys": {
                  "raw": true,
                  "arranged": []
                },
                "plan": {
                  "Collection": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              }
            },
            "forms": {
              "raw": true,
              "arranged": [
                [
                  [
                    {
                      "Column": 0
                    }
                  ],
                  {
                    "0": 0
                  },
                  []
                ]
              ]
            },
            "input_key": null,
            "input_mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 1
            }
          }
        },
        "body": {
          "Let": {
            "id": 2,
            "value": {
              "Join": {
                "inputs": [
                  {
                    "ArrangeBy": {
                      "input": {
                        "Get": {
                          "id": {
                            "Global": {
                              "User": 4
                            }
                          },
                          "keys": {
                            "raw": true,
                            "arranged": []
                          },
                          "plan": {
                            "Collection": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                1
                              ],
                              "input_arity": 2
                            }
                          }
                        }
                      },
                      "forms": {
                        "raw": true,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1
                            },
                            [
                              1
                            ]
                          ]
                        ]
                      },
                      "input_key": null,
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1
                        ],
                        "input_arity": 2
                      }
                    }
                  },
                  {
                    "ArrangeBy": {
                      "input": {
                        "Get": {
                          "id": {
                            "Global": {
                              "User": 5
                            }
                          },
                          "keys": {
                            "raw": false,
                            "arranged": [
                              [
                                [
                                  {
                                    "Column": 3
                                  }
                                ],
                                {
                                  "0": 1,
                                  "1": 2,
                                  "2": 3,
                                  "3": 0,
                                  "4": 4,
                                  "5": 5,
                                  "6": 6
                                },
                                [
                                  0,
                                  1,
                                  2,
                                  4,
                                  5,
                                  6
                                ]
                              ]
                            ]
                          },
                          "plan": "PassArrangements"
                        }
                      },
                      "forms": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6
                            },
                            [
                              1,
                              2,
                              3,
                              4,
                              5,
                              6
                            ]
                          ],
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6
                            ]
                          ]
                        ]
                      },
                      "input_key": [
                        {
                          "Column": 3
                        }
                      ],
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          2,
                          3,
                          0,
                          4,
                          5,
                          6
                        ],
                        "input_arity": 7
                      }
                    }
                  },
                  {
                    "Get": {
                      "id": {
                        "Local": 0
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2,
                              "3": 3,
                              "4": 4
                            },
                            [
                              1,
                              2,
                              3,
                              4
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  {
                    "ArrangeBy": {
                      "input": {
                        "Get": {
                          "id": {
                            "Global": {
                              "User": 1
                            }
                          },
                          "keys": {
                            "raw": false,
                            "arranged": [
                              [
                                [
                                  {
                                    "Column": 2
                                  }
                                ],
                                {
                                  "0": 1,
                                  "1": 2,
                                  "2": 0,
                                  "3": 3
                                },
                                [
                                  0,
                                  1,
                                  3
                                ]
                              ]
                            ]
                          },
                          "plan": {
                            "Arrangement": [
                              [
                                {
                                  "Column": 2
                                }
                              ],
                              null,
                              {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  1,
                                  2,
                                  0
                                ],
                                "input_arity": 4
                              }
                            ]
                          }
                        }
                      },
                      "forms": {
                        "raw": true,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2
                            },
                            [
                              1,
                              2
                            ]
                          ]
                        ]
                      },
                      "input_key": null,
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1,
                          2
                        ],
                        "input_arity": 3
                      }
                    }
                  },
                  {
                    "Get": {
                      "id": {
                        "Local": 1
                      },
                      "keys": {
                        "raw": true,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0
                            },
                            []
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  }
                ],
                "plan": {
                  "Linear": {
                    "source_relation": 2,
                    "source_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "initial_closure": null,
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1,
                          2,
                          3,
                          4
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                5,
                                1,
                                3
                              ],
                              "input_arity": 6
                            }
                          }
                        }
                      },
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 2
                          }
                        ],
                        "stream_thinning": [
                          0,
                          1,
                          3
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                1,
                                2,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                3
                              ],
                              "input_arity": 10
                            }
                          }
                        }
                      },
                      {
                        "lookup_relation": 3,
                        "stream_key": [
                          {
                            "Column": 4
                          }
                        ],
                        "stream_thinning": [
                          0,
                          1,
                          2,
                          3,
                          5,
                          6,
                          7,
                          8
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10
                              ],
                              "input_arity": 11
                            }
                          }
                        }
                      },
                      {
                        "lookup_relation": 4,
                        "stream_key": [
                          {
                            "Column": 9
                          }
                        ],
                        "stream_thinning": [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9
                              ],
                              "input_arity": 10
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                }
              }
            },
            "body": {
              "Join": {
                "inputs": [
                  {
                    "Get": {
                      "id": {
                        "Local": 2
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  {
                    "ArrangeBy": {
                      "input": {
                        "Reduce": {
                          "input": {
                            "Join": {
                              "inputs": [
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Reduce": {
                                        "input": {
                                          "Get": {
                                            "id": {
                                              "Local": 2
                                            },
                                            "keys": {
                                              "raw": true,
                                              "arranged": []
                                            },
                                            "plan": {
                                              "Collection": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  0
                                                ],
                                                "input_arity": 9
                                              }
                                            }
                                          }
                                        },
                                        "key_val_plan": {
                                          "key_plan": {
                                            "mfp": {
                                              "expressions": [],
                                              "predicates": [],
                                              "projection": [
                                                0
                                              ],
                                              "input_arity": 1
                                            }
                                          },
                                          "val_plan": {
                                            "mfp": {
                                              "expressions": [],
                                              "predicates": [],
                                              "projection": [],
                                              "input_arity": 1
                                            }
                                          }
                                        },
                                        "plan": "Distinct",
                                        "input_key": null
                                      }
                                    },
                                    "forms": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0
                                          },
                                          []
                                        ]
                                      ]
                                    },
                                    "input_key": [
                                      {
                                        "Column": 0
                                      }
                                    ],
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0
                                      ],
                                      "input_arity": 1
                                    }
                                  }
                                },
                                {
                                  "Get": {
                                    "id": {
                                      "Local": 0
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0,
                                            "1": 1,
                                            "2": 2,
                                            "3": 3,
                                            "4": 4
                                          },
                                          [
                                            1,
                                            2,
                                            3,
                                            4
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": "PassArrangements"
                                  }
                                },
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Global": {
                                            "User": 5
                                          }
                                        },
                                        "keys": {
                                          "raw": false,
                                          "arranged": [
                                            [
                                              [
                                                {
                                                  "Column": 3
                                                }
                                              ],
                                              {
                                                "0": 1,
                                                "1": 2,
                                                "2": 3,
                                                "3": 0,
                                                "4": 4,
                                                "5": 5,
                                                "6": 6
                                              },
                                              [
                                                0,
                                                1,
                                                2,
                                                4,
                                                5,
                                                6
                                              ]
                                            ]
                                          ]
                                        },
                                        "plan": {
                                          "Arrangement": [
                                            [
                                              {
                                                "Column": 3
                                              }
                                            ],
                                            null,
                                            {
                                              "expressions": [],
                                              "predicates": [],
                                              "projection": [
                                                1,
                                                0
                                              ],
                                              "input_arity": 7
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "forms": {
                                      "raw": true,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0,
                                            "1": 1
                                          },
                                          [
                                            1
                                          ]
                                        ]
                                      ]
                                    },
                                    "input_key": null,
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0,
                                        1
                                      ],
                                      "input_arity": 2
                                    }
                                  }
                                },
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Global": {
                                            "User": 1
                                          }
                                        },
                                        "keys": {
                                          "raw": false,
                                          "arranged": [
                                            [
                                              [
                                                {
                                                  "Column": 2
                                                }
                                              ],
                                              {
                                                "0": 1,
                                                "1": 2,
                                                "2": 0,
                                                "3": 3
                                              },
                                              [
                                                0,
                                                1,
                                                3
                                              ]
                                            ]
                                          ]
                                        },
                                        "plan": {
                                          "Arrangement": [
                                            [
                                              {
                                                "Column": 2
                                              }
                                            ],
                                            null,
                                            {
                                              "expressions": [],
                                              "predicates": [],
                                              "projection": [
                                                1,
                                                0
                                              ],
                                              "input_arity": 4
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "forms": {
                                      "raw": true,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0,
                                            "1": 1
                                          },
                                          [
                                            1
                                          ]
                                        ]
                                      ]
                                    },
                                    "input_key": null,
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0,
                                        1
                                      ],
                                      "input_arity": 2
                                    }
                                  }
                                },
                                {
                                  "Get": {
                                    "id": {
                                      "Local": 1
                                    },
                                    "keys": {
                                      "raw": true,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0
                                          },
                                          []
                                        ]
                                      ]
                                    },
                                    "plan": "PassArrangements"
                                  }
                                }
                              ],
                              "plan": {
                                "Linear": {
                                  "source_relation": 1,
                                  "source_key": [
                                    {
                                      "Column": 0
                                    }
                                  ],
                                  "initial_closure": null,
                                  "stage_plans": [
                                    {
                                      "lookup_relation": 0,
                                      "stream_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "stream_thinning": [
                                        1,
                                        2,
                                        3,
                                        4
                                      ],
                                      "lookup_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0,
                                              1,
                                              3
                                            ],
                                            "input_arity": 5
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "lookup_relation": 2,
                                      "stream_key": [
                                        {
                                          "Column": 1
                                        }
                                      ],
                                      "stream_thinning": [
                                        0,
                                        2
                                      ],
                                      "lookup_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              1,
                                              2,
                                              3
                                            ],
                                            "input_arity": 4
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "lookup_relation": 3,
                                      "stream_key": [
                                        {
                                          "Column": 2
                                        }
                                      ],
                                      "stream_thinning": [
                                        0,
                                        1
                                      ],
                                      "lookup_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              1,
                                              2,
                                              3
                                            ],
                                            "input_arity": 4
                                          }
                                        }
                                      }
                                    },
                                    {
                                      "lookup_relation": 4,
                                      "stream_key": [
                                        {
                                          "Column": 2
                                        }
                                      ],
                                      "stream_thinning": [
                                        0,
                                        1
                                      ],
                                      "lookup_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              1,
                                              2
                                            ],
                                            "input_arity": 3
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "final_closure": null
                                }
                              }
                            }
                          },
                          "key_val_plan": {
                            "key_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  0
                                ],
                                "input_arity": 2
                              }
                            },
                            "val_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  1
                                ],
                                "input_arity": 2
                              }
                            }
                          },
                          "plan": {
                            "Hierarchical": {
                              "Bucketed": {
                                "aggr_funcs": [
                                  "MinNumeric"
                                ],
                                "skips": [
                                  0
                                ],
                                "buckets": [
                                  268435456,
                                  16777216,
                                  1048576,
                                  65536,
                                  4096,
                                  256,
                                  16
                                ]
                              }
                            }
                          },
                          "input_key": null
                        }
                      },
                      "forms": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1
                            },
                            [
                              1
                            ]
                          ],
                          [
                            [
                              {
                                "Column": 0
                              },
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1
                            },
                            []
                          ]
                        ]
                      },
                      "input_key": [
                        {
                          "Column": 0
                        }
                      ],
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1
                        ],
                        "input_arity": 2
                      }
                    }
                  }
                ],
                "plan": {
                  "Linear": {
                    "source_relation": 0,
                    "source_key": null,
                    "initial_closure": null,
                    "stage_plans": [
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 7
                          }
                        ],
                        "stream_thinning": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          8
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                6,
                                3,
                                8,
                                0,
                                2,
                                4,
                                5,
                                7
                              ],
                              "input_arity": 9
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

Finish order_by=(#0 desc nulls_first, #2 asc nulls_last, #1 asc nulls_last, #3 asc nulls_last) limit=none offset=0 project=(#0..=#7)

EOF


query T multiline
-- Query 03
EXPLAIN physical PLAN FOR SELECT
    l_orderkey,
    sum(l_extendedprice * (1 - l_discount)) AS revenue,
    o_orderdate,
    o_shippriority
FROM
    customer,
    orders,
    lineitem
WHERE
    c_mktsegment = 'BUILDING'
    AND c_custkey = o_custkey
    AND l_orderkey = o_orderkey
    AND o_orderdate < DATE '1995-03-15'
    AND l_shipdate > DATE '1995-03-15'
GROUP BY
    l_orderkey,
    o_orderdate,
    o_shippriority
ORDER BY
    revenue DESC,
    o_orderdate
----
{
  "Mfp": {
    "input": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 10
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                7,
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 6
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              8,
                                              66,
                                              85,
                                              73,
                                              76,
                                              68,
                                              73,
                                              78,
                                              71
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": {
                                            "Char": {
                                              "length": null
                                            }
                                          },
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              1
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 12
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                5,
                                {
                                  "CallBinary": {
                                    "func": "Lt",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              10,
                                              39,
                                              249,
                                              255,
                                              255
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Date",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              1,
                              0,
                              4,
                              7
                            ],
                            "input_arity": 9
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3
                        },
                        [
                          1,
                          2,
                          3
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3
                    ],
                    "input_arity": 4
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 14
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15
                            },
                            [
                              1,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 0
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "input_arity": 16
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 2,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              11,
                              {
                                "CallBinary": {
                                  "func": "Gt",
                                  "expr1": {
                                    "Column": 10
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            10,
                                            39,
                                            249,
                                            255,
                                            255
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Date",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            0,
                            16,
                            17,
                            18,
                            5,
                            6
                          ],
                          "input_arity": 19
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      0,
                      2,
                      3,
                      4,
                      5
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0,
                1,
                2
              ],
              "input_arity": 5
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 3
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 4
                        }
                      }
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                5
              ],
              "input_arity": 5
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 3
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 4
                        }
                      }
                    }
                  }
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 3
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "SubNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 4
                          }
                        }
                      }
                    }
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "mfp": {
      "expressions": [],
      "predicates": [],
      "projection": [
        0,
        3,
        1,
        2
      ],
      "input_arity": 4
    },
    "input_key_val": [
      [
        {
          "Column": 0
        },
        {
          "Column": 1
        },
        {
          "Column": 2
        }
      ],
      null
    ]
  }
}

Finish order_by=(#1 desc nulls_first, #2 asc nulls_last) limit=none offset=0 project=(#0..=#3)

EOF


query T multiline
-- Query 04
EXPLAIN physical PLAN FOR SELECT
    o_orderpriority,
    count(*) AS order_count
FROM
    orders
WHERE
    o_orderdate >= DATE '1993-07-01'
    AND o_orderdate < DATE '1993-07-01' + INTERVAL '3' month
    AND EXISTS (
        SELECT
            *
        FROM
            lineitem
        WHERE
            l_orderkey = o_orderkey
            AND l_commitdate < l_receiptdate
    )
GROUP BY
    o_orderpriority
ORDER BY
    o_orderpriority
----
{
  "Reduce": {
    "input": {
      "Join": {
        "inputs": [
          {
            "Get": {
              "id": {
                "Global": {
                  "User": 12
                }
              },
              "keys": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 1,
                      "1": 0,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8
                    },
                    [
                      0,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8
                    ]
                  ]
                ]
              },
              "plan": {
                "Arrangement": [
                  [
                    {
                      "Column": 1
                    }
                  ],
                  null,
                  {
                    "expressions": [],
                    "predicates": [
                      [
                        5,
                        {
                          "CallBinary": {
                            "func": "Gte",
                            "expr1": {
                              "Column": 4
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      10,
                                      185,
                                      246,
                                      255,
                                      255
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": "Date",
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        }
                      ],
                      [
                        5,
                        {
                          "CallBinary": {
                            "func": "Lt",
                            "expr1": {
                              "CallUnary": {
                                "func": {
                                  "CastDateToTimestamp": null
                                },
                                "expr": {
                                  "Column": 4
                                }
                              }
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      12,
                                      201,
                                      7,
                                      0,
                                      0,
                                      18,
                                      1,
                                      0,
                                      0,
                                      0,
                                      0,
                                      0,
                                      0,
                                      0,
                                      0,
                                      0,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": "Timestamp",
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        }
                      ]
                    ],
                    "projection": [
                      1,
                      5
                    ],
                    "input_arity": 9
                  }
                ]
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Reduce": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 14
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15
                            },
                            [
                              1,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 0
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                13,
                                {
                                  "CallBinary": {
                                    "func": "Lt",
                                    "expr1": {
                                      "Column": 11
                                    },
                                    "expr2": {
                                      "Column": 12
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              0
                            ],
                            "input_arity": 16
                          }
                        ]
                      }
                    }
                  },
                  "key_val_plan": {
                    "key_plan": {
                      "mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0
                        ],
                        "input_arity": 1
                      }
                    },
                    "val_plan": {
                      "mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [],
                        "input_arity": 1
                      }
                    }
                  },
                  "plan": "Distinct",
                  "input_key": null
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 0,
            "source_key": null,
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1
                      ],
                      "input_arity": 2
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    },
    "key_val_plan": {
      "key_plan": {
        "mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            0
          ],
          "input_arity": 1
        }
      },
      "val_plan": {
        "mfp": {
          "expressions": [
            {
              "Literal": [
                {
                  "Ok": {
                    "data": [
                      2
                    ]
                  }
                },
                {
                  "scalar_type": "Bool",
                  "nullable": false
                }
              ]
            }
          ],
          "predicates": [],
          "projection": [
            1
          ],
          "input_arity": 1
        }
      }
    },
    "plan": {
      "Accumulable": {
        "full_aggrs": [
          {
            "func": "Count",
            "expr": {
              "Literal": [
                {
                  "Ok": {
                    "data": [
                      2
                    ]
                  }
                },
                {
                  "scalar_type": "Bool",
                  "nullable": false
                }
              ]
            },
            "distinct": false
          }
        ],
        "simple_aggrs": [
          [
            0,
            0,
            {
              "func": "Count",
              "expr": {
                "Literal": [
                  {
                    "Ok": {
                      "data": [
                        2
                      ]
                    }
                  },
                  {
                    "scalar_type": "Bool",
                    "nullable": false
                  }
                ]
              },
              "distinct": false
            }
          ]
        ],
        "distinct_aggrs": []
      }
    },
    "input_key": null
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0, #1)

EOF


query T multiline
-- Query 05
EXPLAIN physical PLAN FOR SELECT
    n_name,
    sum(l_extendedprice * (1 - l_discount)) AS revenue
FROM
    customer,
    orders,
    lineitem,
    supplier,
    nation,
    region
WHERE
    c_custkey = o_custkey
    AND l_orderkey = o_orderkey
    AND l_suppkey = s_suppkey
    AND c_nationkey = s_nationkey
    AND s_nationkey = n_nationkey
    AND n_regionkey = r_regionkey
    AND r_name = 'ASIA'
    AND o_orderdate >= DATE '1994-01-01'
    AND o_orderdate < DATE '1995-01-01'
GROUP BY
    n_name
ORDER BY
    revenue DESC
----
Source materialize.public.region (u3):
{
  "expressions": [],
  "predicates": [
    [
      2,
      {
        "CallBinary": {
          "func": "Eq",
          "expr1": {
            "Column": 1
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    19,
                    4,
                    65,
                    83,
                    73,
                    65
                  ]
                }
              },
              {
                "scalar_type": {
                  "Char": {
                    "length": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 3
}

Query:
{
  "Reduce": {
    "input": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 10
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6,
                          7
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0
                        ],
                        "input_arity": 8
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 12
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 1
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            5,
                            {
                              "CallBinary": {
                                "func": "Lt",
                                "expr1": {
                                  "Column": 4
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          10,
                                          222,
                                          248,
                                          255,
                                          255
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Date",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          [
                            5,
                            {
                              "CallBinary": {
                                "func": "Gte",
                                "expr1": {
                                  "Column": 4
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          10,
                                          113,
                                          247,
                                          255,
                                          255
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Date",
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          1,
                          0
                        ],
                        "input_arity": 9
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 14
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9,
                      "10": 10,
                      "11": 11,
                      "12": 12,
                      "13": 13,
                      "14": 14,
                      "15": 15
                    },
                    [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15
                ],
                "input_arity": 16
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 5
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0
                        ],
                        "input_arity": 7
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 1
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          2,
                          0
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2
                    },
                    [
                      1,
                      2
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2
                ],
                "input_arity": 3
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 3
                    }
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 1
                    }
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 2,
            "source_key": [
              {
                "Column": 0
              }
            ],
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        16,
                        2,
                        5,
                        6
                      ],
                      "input_arity": 17
                    }
                  }
                }
              },
              {
                "lookup_relation": 0,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1,
                  2,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        4,
                        1,
                        2,
                        3
                      ],
                      "input_arity": 5
                    }
                  }
                }
              },
              {
                "lookup_relation": 3,
                "stream_key": [
                  {
                    "Column": 1
                  },
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  2,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                }
              },
              {
                "lookup_relation": 4,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1,
                  2
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        4
                      ],
                      "input_arity": 5
                    }
                  }
                }
              },
              {
                "lookup_relation": 5,
                "stream_key": [
                  {
                    "Column": 3
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  2
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    },
    "key_val_plan": {
      "key_plan": {
        "mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            2
          ],
          "input_arity": 3
        }
      },
      "val_plan": {
        "mfp": {
          "expressions": [
            {
              "CallBinary": {
                "func": "MulNumeric",
                "expr1": {
                  "Column": 0
                },
                "expr2": {
                  "CallBinary": {
                    "func": "SubNumeric",
                    "expr1": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              1,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    },
                    "expr2": {
                      "Column": 1
                    }
                  }
                }
              }
            }
          ],
          "predicates": [],
          "projection": [
            3
          ],
          "input_arity": 3
        }
      }
    },
    "plan": {
      "Accumulable": {
        "full_aggrs": [
          {
            "func": "SumNumeric",
            "expr": {
              "CallBinary": {
                "func": "MulNumeric",
                "expr1": {
                  "Column": 0
                },
                "expr2": {
                  "CallBinary": {
                    "func": "SubNumeric",
                    "expr1": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              1,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    },
                    "expr2": {
                      "Column": 1
                    }
                  }
                }
              }
            },
            "distinct": false
          }
        ],
        "simple_aggrs": [
          [
            0,
            0,
            {
              "func": "SumNumeric",
              "expr": {
                "CallBinary": {
                  "func": "MulNumeric",
                  "expr1": {
                    "Column": 0
                  },
                  "expr2": {
                    "CallBinary": {
                      "func": "SubNumeric",
                      "expr1": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                29,
                                1,
                                0,
                                0,
                                1,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Numeric": {
                                "max_scale": null
                              }
                            },
                            "nullable": false
                          }
                        ]
                      },
                      "expr2": {
                        "Column": 1
                      }
                    }
                  }
                }
              },
              "distinct": false
            }
          ]
        ],
        "distinct_aggrs": []
      }
    },
    "input_key": null
  }
}

Finish order_by=(#1 desc nulls_first) limit=none offset=0 project=(#0, #1)

EOF


query T multiline
-- Query 06
EXPLAIN physical PLAN FOR SELECT
    sum(l_extendedprice * l_discount) AS revenue
FROM
    lineitem
WHERE
    l_quantity < 24
    AND l_shipdate >= DATE '1994-01-01'
    AND l_shipdate < DATE '1994-01-01' + INTERVAL '1' year
    AND l_discount BETWEEN 0.06 - 0.01 AND 0.07
----
{
  "Let": {
    "id": 0,
    "value": {
      "Reduce": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 14
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 0
                    }
                  ],
                  {
                    "0": 0,
                    "1": 1,
                    "2": 2,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9,
                    "10": 10,
                    "11": 11,
                    "12": 12,
                    "13": 13,
                    "14": 14,
                    "15": 15
                  },
                  [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                  ]
                ]
              ]
            },
            "plan": {
              "Arrangement": [
                [
                  {
                    "Column": 0
                  }
                ],
                null,
                {
                  "expressions": [],
                  "predicates": [
                    [
                      5,
                      {
                        "CallBinary": {
                          "func": "Lt",
                          "expr1": {
                            "Column": 4
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    2,
                                    0,
                                    0,
                                    24,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ],
                    [
                      7,
                      {
                        "CallBinary": {
                          "func": "Lte",
                          "expr1": {
                            "Column": 6
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    254,
                                    0,
                                    7,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ],
                    [
                      7,
                      {
                        "CallBinary": {
                          "func": "Gte",
                          "expr1": {
                            "Column": 6
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    254,
                                    0,
                                    5,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ],
                    [
                      11,
                      {
                        "CallBinary": {
                          "func": "Gte",
                          "expr1": {
                            "Column": 10
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    10,
                                    113,
                                    247,
                                    255,
                                    255
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Date",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ],
                    [
                      11,
                      {
                        "CallBinary": {
                          "func": "Lt",
                          "expr1": {
                            "CallUnary": {
                              "func": {
                                "CastDateToTimestamp": null
                              },
                              "expr": {
                                "Column": 10
                              }
                            }
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    12,
                                    203,
                                    7,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Timestamp",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  ],
                  "projection": [
                    5,
                    6
                  ],
                  "input_arity": 16
                }
              ]
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [],
              "input_arity": 2
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "Column": 1
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                2
              ],
              "input_arity": 2
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "Column": 1
                    }
                  }
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 0
                      },
                      "expr2": {
                        "Column": 1
                      }
                    }
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "body": {
      "Union": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [],
                        {
                          "0": 0
                        },
                        [
                          0
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": true,
                "arranged": []
              },
              "input_key": [],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          },
          {
            "Mfp": {
              "input": {
                "Union": {
                  "inputs": [
                    {
                      "Negate": {
                        "input": {
                          "Get": {
                            "id": {
                              "Local": 0
                            },
                            "keys": {
                              "raw": false,
                              "arranged": [
                                [
                                  [],
                                  {
                                    "0": 0
                                  },
                                  [
                                    0
                                  ]
                                ]
                              ]
                            },
                            "plan": {
                              "Arrangement": [
                                [],
                                null,
                                {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [],
                                  "input_arity": 1
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "Constant": {
                        "rows": {
                          "Ok": [
                            [
                              {
                                "data": []
                              },
                              0,
                              1
                            ]
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "mfp": {
                "expressions": [
                  {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": {
                          "Numeric": {
                            "max_scale": null
                          }
                        },
                        "nullable": true
                      }
                    ]
                  }
                ],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 0
              },
              "input_key_val": null
            }
          }
        ]
      }
    }
  }
}

EOF


query T multiline
-- Query 07
EXPLAIN physical PLAN FOR SELECT
    supp_nation,
    cust_nation,
    l_year,
    sum(volume) AS revenue
FROM
    (
        SELECT
            n1.n_name AS supp_nation,
            n2.n_name AS cust_nation,
            extract(year FROM l_shipdate) AS l_year,
            l_extendedprice * (1 - l_discount) AS volume
        FROM
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2
        WHERE
            s_suppkey = l_suppkey
            AND o_orderkey = l_orderkey
            AND c_custkey = o_custkey
            AND s_nationkey = n1.n_nationkey
            AND c_nationkey = n2.n_nationkey
            AND (
                (n1.n_name = 'FRANCE' AND n2.n_name = 'GERMANY')
                or (n1.n_name = 'GERMANY' AND n2.n_name = 'FRANCE')
            )
            AND l_shipdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31'
    ) AS shipping
GROUP BY
    supp_nation,
    cust_nation,
    l_year
ORDER BY
    supp_nation,
    cust_nation,
    l_year
----
{
  "Let": {
    "id": 0,
    "value": {
      "ArrangeBy": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 1
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 2
                    }
                  ],
                  {
                    "0": 1,
                    "1": 2,
                    "2": 0,
                    "3": 3
                  },
                  [
                    0,
                    1,
                    3
                  ]
                ]
              ]
            },
            "plan": {
              "Arrangement": [
                [
                  {
                    "Column": 2
                  }
                ],
                null,
                {
                  "expressions": [],
                  "predicates": [
                    [
                      3,
                      {
                        "CallVariadic": {
                          "func": "Or",
                          "exprs": [
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          6,
                                          70,
                                          82,
                                          65,
                                          78,
                                          67,
                                          69
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          7,
                                          71,
                                          69,
                                          82,
                                          77,
                                          65,
                                          78,
                                          89
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  ],
                  "projection": [
                    1,
                    2
                  ],
                  "input_arity": 4
                }
              ]
            }
          }
        },
        "forms": {
          "raw": true,
          "arranged": [
            [
              [
                {
                  "Column": 0
                }
              ],
              {
                "0": 0,
                "1": 1
              },
              [
                1
              ]
            ]
          ]
        },
        "input_key": null,
        "input_mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            0,
            1
          ],
          "input_arity": 2
        }
      }
    },
    "body": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 5
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 7
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 14
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 0,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15
                            },
                            [
                              0,
                              1,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          0,
                          1,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 2
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1,
                      2,
                      0,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "input_arity": 16
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 12
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 9
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 10
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 2
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        0,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                      ],
                      "input_arity": 16
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 2
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              11,
                              {
                                "CallBinary": {
                                  "func": "Lte",
                                  "expr1": {
                                    "Column": 10
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            10,
                                            184,
                                            251,
                                            255,
                                            255
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Date",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            [
                              11,
                              {
                                "CallBinary": {
                                  "func": "Gte",
                                  "expr1": {
                                    "Column": 10
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            10,
                                            222,
                                            248,
                                            255,
                                            255
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Date",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            16,
                            1,
                            5,
                            6,
                            10
                          ],
                          "input_arity": 17
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 2,
                    "stream_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      0,
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 3,
                    "stream_key": [
                      {
                        "Column": 4
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2,
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 4,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 5,
                    "stream_key": [
                      {
                        "Column": 3
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              6,
                              {
                                "CallVariadic": {
                                  "func": "Or",
                                  "exprs": [
                                    {
                                      "CallVariadic": {
                                        "func": "And",
                                        "exprs": [
                                          {
                                            "CallBinary": {
                                              "func": "Eq",
                                              "expr1": {
                                                "Column": 4
                                              },
                                              "expr2": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        19,
                                                        6,
                                                        70,
                                                        82,
                                                        65,
                                                        78,
                                                        67,
                                                        69
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": {
                                                      "Char": {
                                                        "length": null
                                                      }
                                                    },
                                                    "nullable": false
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "CallBinary": {
                                              "func": "Eq",
                                              "expr1": {
                                                "Column": 5
                                              },
                                              "expr2": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        19,
                                                        7,
                                                        71,
                                                        69,
                                                        82,
                                                        77,
                                                        65,
                                                        78,
                                                        89
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": {
                                                      "Char": {
                                                        "length": null
                                                      }
                                                    },
                                                    "nullable": false
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "CallVariadic": {
                                        "func": "And",
                                        "exprs": [
                                          {
                                            "CallBinary": {
                                              "func": "Eq",
                                              "expr1": {
                                                "Column": 4
                                              },
                                              "expr2": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        19,
                                                        7,
                                                        71,
                                                        69,
                                                        82,
                                                        77,
                                                        65,
                                                        78,
                                                        89
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": {
                                                      "Char": {
                                                        "length": null
                                                      }
                                                    },
                                                    "nullable": false
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          {
                                            "CallBinary": {
                                              "func": "Eq",
                                              "expr1": {
                                                "Column": 5
                                              },
                                              "expr2": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        19,
                                                        6,
                                                        70,
                                                        82,
                                                        65,
                                                        78,
                                                        67,
                                                        69
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": {
                                                      "Char": {
                                                        "length": null
                                                      }
                                                    },
                                                    "nullable": false
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          ],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallUnary": {
                    "func": {
                      "ExtractDate": "Year"
                    },
                    "expr": {
                      "Column": 2
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                3,
                4,
                5
              ],
              "input_arity": 5
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 1
                        }
                      }
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                5
              ],
              "input_arity": 5
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 1
                        }
                      }
                    }
                  }
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 0
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "SubNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 1
                          }
                        }
                      }
                    }
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    }
  }
}

Finish order_by=(#0 asc nulls_last, #1 asc nulls_last, #2 asc nulls_last) limit=none offset=0 project=(#0..=#3)

EOF


query T multiline
-- Query 08
EXPLAIN physical PLAN FOR SELECT
    o_year,
    sum(case
        when nation = 'BRAZIL' then volume
        else 0
    end) / sum(volume) AS mkt_share
FROM
    (
        SELECT
            extract(year FROM o_orderdate) AS o_year,
            l_extendedprice * (1 - l_discount) AS volume,
            n2.n_name AS nation
        FROM
            part,
            supplier,
            lineitem,
            orders,
            customer,
            nation n1,
            nation n2,
            region
        WHERE
            p_partkey = l_partkey
            AND s_suppkey = l_suppkey
            AND l_orderkey = o_orderkey
            AND o_custkey = c_custkey
            AND c_nationkey = n1.n_nationkey
            AND n1.n_regionkey = r_regionkey
            AND r_name = 'AMERICA'
            AND s_nationkey = n2.n_nationkey
            AND o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31'
            AND p_type = 'ECONOMY ANODIZED STEEL'
    ) AS all_nations
GROUP BY
    o_year
ORDER BY
    o_year
----
Source materialize.public.region (u3):
{
  "expressions": [],
  "predicates": [
    [
      2,
      {
        "CallBinary": {
          "func": "Eq",
          "expr1": {
            "Column": 1
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    19,
                    7,
                    65,
                    77,
                    69,
                    82,
                    73,
                    67,
                    65
                  ]
                }
              },
              {
                "scalar_type": {
                  "Char": {
                    "length": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 3
}

Source materialize.public.part (u4):
{
  "expressions": [],
  "predicates": [
    [
      5,
      {
        "CallBinary": {
          "func": "Eq",
          "expr1": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    19,
                    22,
                    69,
                    67,
                    79,
                    78,
                    79,
                    77,
                    89,
                    32,
                    65,
                    78,
                    79,
                    68,
                    73,
                    90,
                    69,
                    68,
                    32,
                    83,
                    84,
                    69,
                    69,
                    76
                  ]
                }
              },
              {
                "scalar_type": "String",
                "nullable": false
              }
            ]
          },
          "expr2": {
            "CallUnary": {
              "func": {
                "CastVarCharToString": null
              },
              "expr": {
                "Column": 4
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 9
}

Query:
{
  "Mfp": {
    "input": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0
                          ],
                          "input_arity": 1
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 5
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 7
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 14
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 1
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1,
                      0,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "input_arity": 16
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 12
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                5,
                                {
                                  "CallBinary": {
                                    "func": "Lte",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              10,
                                              184,
                                              251,
                                              255,
                                              255
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Date",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ],
                              [
                                5,
                                {
                                  "CallBinary": {
                                    "func": "Gte",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              10,
                                              222,
                                              248,
                                              255,
                                              255
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Date",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              1,
                              0,
                              4
                            ],
                            "input_arity": 9
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2
                        },
                        [
                          1,
                          2
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2
                    ],
                    "input_arity": 3
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 10
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 1
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 0,
                              "3": 3
                            },
                            [
                              0,
                              1,
                              3
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 4
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 1
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 0,
                              "3": 3
                            },
                            [
                              0,
                              1,
                              3
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              2
                            ],
                            "input_arity": 4
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 3
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0
                          ],
                          "input_arity": 1
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 2,
                "source_key": [
                  {
                    "Column": 1
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        0,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                      ],
                      "input_arity": 16
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      0,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            5,
                            6
                          ],
                          "input_arity": 16
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      0,
                      2,
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            4,
                            1,
                            2,
                            3
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 3,
                    "stream_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      0,
                      2,
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 4,
                    "stream_key": [
                      {
                        "Column": 3
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 5,
                    "stream_key": [
                      {
                        "Column": 4
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2,
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 6,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 7,
                    "stream_key": [
                      {
                        "Column": 3
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallUnary": {
                    "func": {
                      "ExtractDate": "Year"
                    },
                    "expr": {
                      "Column": 2
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                4
              ],
              "input_arity": 4
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "If": {
                    "cond": {
                      "CallBinary": {
                        "func": "Eq",
                        "expr1": {
                          "Column": 3
                        },
                        "expr2": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  19,
                                  6,
                                  66,
                                  82,
                                  65,
                                  90,
                                  73,
                                  76
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Char": {
                                  "length": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        }
                      }
                    },
                    "then": {
                      "CallBinary": {
                        "func": "MulNumeric",
                        "expr1": {
                          "Column": 0
                        },
                        "expr2": {
                          "CallBinary": {
                            "func": "SubNumeric",
                            "expr1": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      29,
                                      1,
                                      0,
                                      0,
                                      1,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Numeric": {
                                      "max_scale": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            },
                            "expr2": {
                              "Column": 1
                            }
                          }
                        }
                      }
                    },
                    "els": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                },
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 1
                        }
                      }
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                4,
                5
              ],
              "input_arity": 4
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "If": {
                    "cond": {
                      "CallBinary": {
                        "func": "Eq",
                        "expr1": {
                          "Column": 3
                        },
                        "expr2": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  19,
                                  6,
                                  66,
                                  82,
                                  65,
                                  90,
                                  73,
                                  76
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Char": {
                                  "length": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        }
                      }
                    },
                    "then": {
                      "CallBinary": {
                        "func": "MulNumeric",
                        "expr1": {
                          "Column": 0
                        },
                        "expr2": {
                          "CallBinary": {
                            "func": "SubNumeric",
                            "expr1": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      29,
                                      1,
                                      0,
                                      0,
                                      1,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Numeric": {
                                      "max_scale": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            },
                            "expr2": {
                              "Column": 1
                            }
                          }
                        }
                      }
                    },
                    "els": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                },
                "distinct": false
              },
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 1
                        }
                      }
                    }
                  }
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "If": {
                      "cond": {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 3
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    6,
                                    66,
                                    82,
                                    65,
                                    90,
                                    73,
                                    76
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      "then": {
                        "CallBinary": {
                          "func": "MulNumeric",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "CallBinary": {
                              "func": "SubNumeric",
                              "expr1": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        29,
                                        1,
                                        0,
                                        0,
                                        1,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": {
                                      "Numeric": {
                                        "max_scale": null
                                      }
                                    },
                                    "nullable": false
                                  }
                                ]
                              },
                              "expr2": {
                                "Column": 1
                              }
                            }
                          }
                        }
                      },
                      "els": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                29,
                                1,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Numeric": {
                                "max_scale": null
                              }
                            },
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  "distinct": false
                }
              ],
              [
                1,
                1,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 0
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "SubNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 1
                          }
                        }
                      }
                    }
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "mfp": {
      "expressions": [
        {
          "CallBinary": {
            "func": "DivNumeric",
            "expr1": {
              "Column": 1
            },
            "expr2": {
              "Column": 2
            }
          }
        }
      ],
      "predicates": [],
      "projection": [
        0,
        3
      ],
      "input_arity": 3
    },
    "input_key_val": [
      [
        {
          "Column": 0
        }
      ],
      null
    ]
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0, #1)

EOF


query T multiline
-- Query 09
EXPLAIN physical PLAN FOR SELECT
    nation,
    o_year,
    sum(amount) AS sum_profit
FROM
    (
        SELECT
            n_name AS nation,
            extract(year FROM o_orderdate) AS o_year,
            l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity AS amount
        FROM
            part,
            supplier,
            lineitem,
            partsupp,
            orders,
            nation
        WHERE
            s_suppkey = l_suppkey
            AND ps_suppkey = l_suppkey
            AND ps_partkey = l_partkey
            AND p_partkey = l_partkey
            AND o_orderkey = l_orderkey
            AND s_nationkey = n_nationkey
            AND p_name like '%green%'
    ) AS profit
GROUP BY
    nation,
    o_year
ORDER BY
    nation,
    o_year DESC
----
Source materialize.public.part (u4):
{
  "expressions": [],
  "predicates": [
    [
      2,
      {
        "CallUnary": {
          "func": {
            "IsLikeMatch": {
              "pattern": "%green%",
              "case_insensitive": false,
              "matcher_impl": {
                "String": [
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": "green"
                  },
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": ""
                  }
                ]
              }
            }
          },
          "expr": {
            "CallUnary": {
              "func": {
                "CastVarCharToString": null
              },
              "expr": {
                "Column": 1
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 9
}

Query:
{
  "Reduce": {
    "input": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 4
                    }
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 1
                    }
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 5
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0
                        ],
                        "input_arity": 7
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 14
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          },
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 2,
                          "1": 0,
                          "2": 1,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          0,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 1
                      },
                      {
                        "Column": 2
                      }
                    ],
                    {
                      "0": 2,
                      "1": 0,
                      "2": 1,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9,
                      "10": 10,
                      "11": 11,
                      "12": 12,
                      "13": 13,
                      "14": 14,
                      "15": 15
                    },
                    [
                      0,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 1
                },
                {
                  "Column": 2
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  2,
                  0,
                  1,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15
                ],
                "input_arity": 16
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 7
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4
                        },
                        [
                          1,
                          2,
                          3,
                          4
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 0
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1,
                          3
                        ],
                        "input_arity": 5
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      },
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2
                    },
                    [
                      2
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2
                ],
                "input_arity": 3
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 12
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 1
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          4
                        ],
                        "input_arity": 9
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 1
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          2
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 2,
            "source_key": [
              {
                "Column": 1
              },
              {
                "Column": 2
              }
            ],
            "initial_closure": {
              "ready_equivalences": [],
              "before": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    2,
                    0,
                    1,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                  ],
                  "input_arity": 16
                }
              }
            },
            "stage_plans": [
              {
                "lookup_relation": 3,
                "stream_key": [
                  {
                    "Column": 1
                  },
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  0,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  },
                  {
                    "Column": 1
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        2,
                        0,
                        1,
                        4,
                        5,
                        6,
                        16
                      ],
                      "input_arity": 17
                    }
                  }
                }
              },
              {
                "lookup_relation": 0,
                "stream_key": [
                  {
                    "Column": 1
                  }
                ],
                "stream_thinning": [
                  0,
                  2,
                  3,
                  4,
                  5,
                  6
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                      ],
                      "input_arity": 7
                    }
                  }
                }
              },
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 1
                  }
                ],
                "stream_thinning": [
                  0,
                  2,
                  3,
                  4,
                  5
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        6,
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "input_arity": 7
                    }
                  }
                }
              },
              {
                "lookup_relation": 4,
                "stream_key": [
                  {
                    "Column": 1
                  }
                ],
                "stream_thinning": [
                  0,
                  2,
                  3,
                  4,
                  5
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                      ],
                      "input_arity": 7
                    }
                  }
                }
              },
              {
                "lookup_relation": 5,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1,
                  2,
                  3,
                  4,
                  5
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                      ],
                      "input_arity": 7
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    },
    "key_val_plan": {
      "key_plan": {
        "mfp": {
          "expressions": [
            {
              "CallUnary": {
                "func": {
                  "ExtractDate": "Year"
                },
                "expr": {
                  "Column": 4
                }
              }
            }
          ],
          "predicates": [],
          "projection": [
            5,
            6
          ],
          "input_arity": 6
        }
      },
      "val_plan": {
        "mfp": {
          "expressions": [
            {
              "CallBinary": {
                "func": "SubNumeric",
                "expr1": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 1
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 2
                        }
                      }
                    }
                  }
                },
                "expr2": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 3
                    },
                    "expr2": {
                      "Column": 0
                    }
                  }
                }
              }
            }
          ],
          "predicates": [],
          "projection": [
            6
          ],
          "input_arity": 6
        }
      }
    },
    "plan": {
      "Accumulable": {
        "full_aggrs": [
          {
            "func": "SumNumeric",
            "expr": {
              "CallBinary": {
                "func": "SubNumeric",
                "expr1": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 1
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 2
                        }
                      }
                    }
                  }
                },
                "expr2": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 3
                    },
                    "expr2": {
                      "Column": 0
                    }
                  }
                }
              }
            },
            "distinct": false
          }
        ],
        "simple_aggrs": [
          [
            0,
            0,
            {
              "func": "SumNumeric",
              "expr": {
                "CallBinary": {
                  "func": "SubNumeric",
                  "expr1": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 1
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "SubNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 2
                          }
                        }
                      }
                    }
                  },
                  "expr2": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 3
                      },
                      "expr2": {
                        "Column": 0
                      }
                    }
                  }
                }
              },
              "distinct": false
            }
          ]
        ],
        "distinct_aggrs": []
      }
    },
    "input_key": null
  }
}

Finish order_by=(#0 asc nulls_last, #1 desc nulls_first) limit=none offset=0 project=(#0..=#2)

EOF


query T multiline
-- Query 10
EXPLAIN physical PLAN FOR SELECT
    c_custkey,
    c_name,
    sum(l_extendedprice * (1 - l_discount)) AS revenue,
    c_acctbal,
    n_name,
    c_address,
    c_phone,
    c_comment
FROM
    customer,
    orders,
    lineitem,
    nation
WHERE
    c_custkey = o_custkey
    AND l_orderkey = o_orderkey
    AND o_orderdate >= DATE '1993-10-01'
    AND o_orderdate < DATE '1994-01-01'
    AND o_orderdate < DATE '1993-10-01' + INTERVAL '3' month
    AND l_returnflag = 'R'
    AND c_nationkey = n_nationkey
GROUP BY
    c_custkey,
    c_name,
    c_acctbal,
    c_phone,
    n_name,
    c_address,
    c_comment
ORDER BY
    revenue DESC
----
{
  "Mfp": {
    "input": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 10
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              2,
                              3,
                              0,
                              4,
                              5,
                              7
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      6
                    ],
                    "input_arity": 7
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 12
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [
                              [
                                5,
                                {
                                  "CallBinary": {
                                    "func": "Lt",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              10,
                                              113,
                                              247,
                                              255,
                                              255
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Date",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ],
                              [
                                5,
                                {
                                  "CallBinary": {
                                    "func": "Gte",
                                    "expr1": {
                                      "Column": 4
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              10,
                                              21,
                                              247,
                                              255,
                                              255
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Date",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ],
                              [
                                5,
                                {
                                  "CallBinary": {
                                    "func": "Lt",
                                    "expr1": {
                                      "CallUnary": {
                                        "func": {
                                          "CastDateToTimestamp": null
                                        },
                                        "expr": {
                                          "Column": 4
                                        }
                                      }
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              12,
                                              202,
                                              7,
                                              0,
                                              0,
                                              1,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "Timestamp",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            ],
                            "projection": [
                              1,
                              0
                            ],
                            "input_arity": 9
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 14
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15
                            },
                            [
                              1,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 0
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "input_arity": 16
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 1
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 2
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 0,
                              "3": 3
                            },
                            [
                              0,
                              1,
                              3
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 2
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              2
                            ],
                            "input_arity": 4
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 2,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              9,
                              {
                                "CallBinary": {
                                  "func": "Eq",
                                  "expr1": {
                                    "Column": 8
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            19,
                                            1,
                                            82
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": {
                                          "Char": {
                                            "length": null
                                          }
                                        },
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            16,
                            5,
                            6
                          ],
                          "input_arity": 17
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            1,
                            2
                          ],
                          "input_arity": 9
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 3,
                    "stream_key": [
                      {
                        "Column": 3
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2,
                      4,
                      5,
                      6,
                      7,
                      8
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9
                          ],
                          "input_arity": 10
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0,
                1,
                4,
                3,
                8,
                2,
                5
              ],
              "input_arity": 9
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 6
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 7
                        }
                      }
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                9
              ],
              "input_arity": 9
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 6
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 7
                        }
                      }
                    }
                  }
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 6
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "SubNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 7
                          }
                        }
                      }
                    }
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "mfp": {
      "expressions": [],
      "predicates": [],
      "projection": [
        0,
        1,
        7,
        2,
        4,
        5,
        3,
        6
      ],
      "input_arity": 8
    },
    "input_key_val": [
      [
        {
          "Column": 0
        },
        {
          "Column": 1
        },
        {
          "Column": 2
        },
        {
          "Column": 3
        },
        {
          "Column": 4
        },
        {
          "Column": 5
        },
        {
          "Column": 6
        }
      ],
      null
    ]
  }
}

Finish order_by=(#2 desc nulls_first) limit=none offset=0 project=(#0..=#7)

EOF


query T multiline
-- Query 11
EXPLAIN physical PLAN FOR SELECT
    ps_partkey,
    sum(ps_supplycost * ps_availqty) AS value
FROM
    partsupp,
    supplier,
    nation
WHERE
    ps_suppkey = s_suppkey
    AND s_nationkey = n_nationkey
    AND n_name = 'GERMANY'
GROUP BY
    ps_partkey having
        sum(ps_supplycost * ps_availqty) > (
            SELECT
                sum(ps_supplycost * ps_availqty) * 0.0001
            FROM
                partsupp,
                supplier,
                nation
            WHERE
                ps_suppkey = s_suppkey
                AND s_nationkey = n_nationkey
                AND n_name = 'GERMANY'
        )
ORDER BY
    value DESC
----
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 7
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4
                        },
                        [
                          0,
                          2,
                          3,
                          4
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 1,
                      "1": 0,
                      "2": 2,
                      "3": 3,
                      "4": 4
                    },
                    [
                      0,
                      2,
                      3,
                      4
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 1
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  1,
                  0,
                  2,
                  3,
                  4
                ],
                "input_arity": 5
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 5
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          0
                        ],
                        "input_arity": 7
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 1
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            3,
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          7,
                                          71,
                                          69,
                                          82,
                                          77,
                                          65,
                                          78,
                                          89
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          1
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 0,
            "source_key": [
              {
                "Column": 1
              }
            ],
            "initial_closure": {
              "ready_equivalences": [],
              "before": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    1,
                    0,
                    2,
                    3,
                    4
                  ],
                  "input_arity": 5
                }
              }
            },
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 1
                  }
                ],
                "stream_thinning": [
                  0,
                  2,
                  3,
                  4
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        5
                      ],
                      "input_arity": 6
                    }
                  }
                }
              },
              {
                "lookup_relation": 2,
                "stream_key": [
                  {
                    "Column": 3
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  2
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    },
    "body": {
      "Join": {
        "inputs": [
          {
            "Reduce": {
              "input": {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": "PassArrangements"
                }
              },
              "key_val_plan": {
                "key_plan": {
                  "mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 3
                  }
                },
                "val_plan": {
                  "mfp": {
                    "expressions": [
                      {
                        "CallBinary": {
                          "func": "MulNumeric",
                          "expr1": {
                            "Column": 2
                          },
                          "expr2": {
                            "CallUnary": {
                              "func": {
                                "CastInt32ToNumeric": null
                              },
                              "expr": {
                                "Column": 1
                              }
                            }
                          }
                        }
                      }
                    ],
                    "predicates": [],
                    "projection": [
                      3
                    ],
                    "input_arity": 3
                  }
                }
              },
              "plan": {
                "Accumulable": {
                  "full_aggrs": [
                    {
                      "func": "SumNumeric",
                      "expr": {
                        "CallBinary": {
                          "func": "MulNumeric",
                          "expr1": {
                            "Column": 2
                          },
                          "expr2": {
                            "CallUnary": {
                              "func": {
                                "CastInt32ToNumeric": null
                              },
                              "expr": {
                                "Column": 1
                              }
                            }
                          }
                        }
                      },
                      "distinct": false
                    }
                  ],
                  "simple_aggrs": [
                    [
                      0,
                      0,
                      {
                        "func": "SumNumeric",
                        "expr": {
                          "CallBinary": {
                            "func": "MulNumeric",
                            "expr1": {
                              "Column": 2
                            },
                            "expr2": {
                              "CallUnary": {
                                "func": {
                                  "CastInt32ToNumeric": null
                                },
                                "expr": {
                                  "Column": 1
                                }
                              }
                            }
                          }
                        },
                        "distinct": false
                      }
                    ]
                  ],
                  "distinct_aggrs": []
                }
              },
              "input_key": null
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Reduce": {
                  "input": {
                    "Get": {
                      "id": {
                        "Local": 0
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2
                          ],
                          "input_arity": 3
                        }
                      }
                    }
                  },
                  "key_val_plan": {
                    "key_plan": {
                      "mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [],
                        "input_arity": 2
                      }
                    },
                    "val_plan": {
                      "mfp": {
                        "expressions": [
                          {
                            "CallBinary": {
                              "func": "MulNumeric",
                              "expr1": {
                                "Column": 1
                              },
                              "expr2": {
                                "CallUnary": {
                                  "func": {
                                    "CastInt32ToNumeric": null
                                  },
                                  "expr": {
                                    "Column": 0
                                  }
                                }
                              }
                            }
                          }
                        ],
                        "predicates": [],
                        "projection": [
                          2
                        ],
                        "input_arity": 2
                      }
                    }
                  },
                  "plan": {
                    "Accumulable": {
                      "full_aggrs": [
                        {
                          "func": "SumNumeric",
                          "expr": {
                            "CallBinary": {
                              "func": "MulNumeric",
                              "expr1": {
                                "Column": 1
                              },
                              "expr2": {
                                "CallUnary": {
                                  "func": {
                                    "CastInt32ToNumeric": null
                                  },
                                  "expr": {
                                    "Column": 0
                                  }
                                }
                              }
                            }
                          },
                          "distinct": false
                        }
                      ],
                      "simple_aggrs": [
                        [
                          0,
                          0,
                          {
                            "func": "SumNumeric",
                            "expr": {
                              "CallBinary": {
                                "func": "MulNumeric",
                                "expr1": {
                                  "Column": 1
                                },
                                "expr2": {
                                  "CallUnary": {
                                    "func": {
                                      "CastInt32ToNumeric": null
                                    },
                                    "expr": {
                                      "Column": 0
                                    }
                                  }
                                }
                              }
                            },
                            "distinct": false
                          }
                        ]
                      ],
                      "distinct_aggrs": []
                    }
                  },
                  "input_key": null
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [],
                    {
                      "0": 0
                    },
                    [
                      0
                    ]
                  ]
                ]
              },
              "input_key": [],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 0,
            "source_key": [
              {
                "Column": 0
              }
            ],
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [],
                "stream_thinning": [
                  0,
                  1
                ],
                "lookup_key": [],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [
                        [
                          3,
                          {
                            "CallBinary": {
                              "func": "Gt",
                              "expr1": {
                                "Column": 1
                              },
                              "expr2": {
                                "CallBinary": {
                                  "func": "MulNumeric",
                                  "expr1": {
                                    "Column": 2
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            29,
                                            1,
                                            252,
                                            0,
                                            1,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": {
                                          "Numeric": {
                                            "max_scale": null
                                          }
                                        },
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      ],
                      "projection": [
                        0,
                        1
                      ],
                      "input_arity": 3
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    }
  }
}

Finish order_by=(#1 desc nulls_first) limit=none offset=0 project=(#0, #1)

EOF


query T multiline
-- Query 12
EXPLAIN physical PLAN FOR SELECT
    l_shipmode,
    sum(case
        when o_orderpriority = '1-URGENT'
            or o_orderpriority = '2-HIGH'
            then 1
        else 0
    end) AS high_line_count,
    sum(case
        when o_orderpriority <> '1-URGENT'
            AND o_orderpriority <> '2-HIGH'
            then 1
        else 0
    end) AS low_line_count
FROM
    orders,
    lineitem
WHERE
    o_orderkey = l_orderkey
    AND l_shipmode IN ('MAIL', 'SHIP')
    AND l_commitdate < l_receiptdate
    AND l_shipdate < l_commitdate
    AND l_receiptdate >= DATE '1994-01-01'
    AND l_receiptdate < DATE '1994-01-01' + INTERVAL '1' year
GROUP BY
    l_shipmode
ORDER BY
    l_shipmode
----
{
  "Reduce": {
    "input": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 12
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 1
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          5
                        ],
                        "input_arity": 9
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 14
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9,
                      "10": 10,
                      "11": 11,
                      "12": 12,
                      "13": 13,
                      "14": 14,
                      "15": 15
                    },
                    [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15
                ],
                "input_arity": 16
              }
            }
          }
        ],
        "plan": {
          "Delta": {
            "path_plans": [
              {
                "source_relation": 0,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1
                      ],
                      "input_arity": 2
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              13,
                              {
                                "CallBinary": {
                                  "func": "Lt",
                                  "expr1": {
                                    "Column": 11
                                  },
                                  "expr2": {
                                    "Column": 12
                                  }
                                }
                              }
                            ],
                            [
                              14,
                              {
                                "CallBinary": {
                                  "func": "Gte",
                                  "expr1": {
                                    "Column": 13
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            10,
                                            113,
                                            247,
                                            255,
                                            255
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Date",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            [
                              14,
                              {
                                "CallBinary": {
                                  "func": "Lt",
                                  "expr1": {
                                    "Column": 12
                                  },
                                  "expr2": {
                                    "Column": 13
                                  }
                                }
                              }
                            ],
                            [
                              14,
                              {
                                "CallBinary": {
                                  "func": "Lt",
                                  "expr1": {
                                    "CallUnary": {
                                      "func": {
                                        "CastDateToTimestamp": null
                                      },
                                      "expr": {
                                        "Column": 13
                                      }
                                    }
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            12,
                                            203,
                                            7,
                                            0,
                                            0,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Timestamp",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            [
                              16,
                              {
                                "CallVariadic": {
                                  "func": "Or",
                                  "exprs": [
                                    {
                                      "CallBinary": {
                                        "func": "Eq",
                                        "expr1": {
                                          "Column": 15
                                        },
                                        "expr2": {
                                          "Literal": [
                                            {
                                              "Ok": {
                                                "data": [
                                                  19,
                                                  4,
                                                  77,
                                                  65,
                                                  73,
                                                  76
                                                ]
                                              }
                                            },
                                            {
                                              "scalar_type": {
                                                "Char": {
                                                  "length": null
                                                }
                                              },
                                              "nullable": false
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "CallBinary": {
                                        "func": "Eq",
                                        "expr1": {
                                          "Column": 15
                                        },
                                        "expr2": {
                                          "Literal": [
                                            {
                                              "Ok": {
                                                "data": [
                                                  19,
                                                  4,
                                                  83,
                                                  72,
                                                  73,
                                                  80
                                                ]
                                              }
                                            },
                                            {
                                              "scalar_type": {
                                                "Char": {
                                                  "length": null
                                                }
                                              },
                                              "nullable": false
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          ],
                          "projection": [
                            1,
                            15
                          ],
                          "input_arity": 17
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              },
              {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [
                        [
                          12,
                          {
                            "CallBinary": {
                              "func": "Lt",
                              "expr1": {
                                "Column": 10
                              },
                              "expr2": {
                                "Column": 11
                              }
                            }
                          }
                        ],
                        [
                          13,
                          {
                            "CallBinary": {
                              "func": "Gte",
                              "expr1": {
                                "Column": 12
                              },
                              "expr2": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        10,
                                        113,
                                        247,
                                        255,
                                        255
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Date",
                                    "nullable": false
                                  }
                                ]
                              }
                            }
                          }
                        ],
                        [
                          13,
                          {
                            "CallBinary": {
                              "func": "Lt",
                              "expr1": {
                                "Column": 11
                              },
                              "expr2": {
                                "Column": 12
                              }
                            }
                          }
                        ],
                        [
                          13,
                          {
                            "CallBinary": {
                              "func": "Lt",
                              "expr1": {
                                "CallUnary": {
                                  "func": {
                                    "CastDateToTimestamp": null
                                  },
                                  "expr": {
                                    "Column": 12
                                  }
                                }
                              },
                              "expr2": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        12,
                                        203,
                                        7,
                                        0,
                                        0,
                                        1,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Timestamp",
                                    "nullable": false
                                  }
                                ]
                              }
                            }
                          }
                        ],
                        [
                          15,
                          {
                            "CallVariadic": {
                              "func": "Or",
                              "exprs": [
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 14
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              4,
                                              77,
                                              65,
                                              73,
                                              76
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": {
                                            "Char": {
                                              "length": null
                                            }
                                          },
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 14
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              4,
                                              83,
                                              72,
                                              73,
                                              80
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": {
                                            "Char": {
                                              "length": null
                                            }
                                          },
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      ],
                      "projection": [
                        0,
                        14
                      ],
                      "input_arity": 16
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            2,
                            1
                          ],
                          "input_arity": 3
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            ]
          }
        }
      }
    },
    "key_val_plan": {
      "key_plan": {
        "mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            1
          ],
          "input_arity": 2
        }
      },
      "val_plan": {
        "mfp": {
          "expressions": [
            {
              "If": {
                "cond": {
                  "CallVariadic": {
                    "func": "Or",
                    "exprs": [
                      {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    6,
                                    50,
                                    45,
                                    72,
                                    73,
                                    71,
                                    72
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    8,
                                    49,
                                    45,
                                    85,
                                    82,
                                    71,
                                    69,
                                    78,
                                    84
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          1,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                },
                "els": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          0,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            {
              "If": {
                "cond": {
                  "CallVariadic": {
                    "func": "And",
                    "exprs": [
                      {
                        "CallBinary": {
                          "func": "NotEq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    6,
                                    50,
                                    45,
                                    72,
                                    73,
                                    71,
                                    72
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "CallBinary": {
                          "func": "NotEq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    8,
                                    49,
                                    45,
                                    85,
                                    82,
                                    71,
                                    69,
                                    78,
                                    84
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          1,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                },
                "els": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          0,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            }
          ],
          "predicates": [],
          "projection": [
            2,
            3
          ],
          "input_arity": 2
        }
      }
    },
    "plan": {
      "Accumulable": {
        "full_aggrs": [
          {
            "func": "SumInt32",
            "expr": {
              "If": {
                "cond": {
                  "CallVariadic": {
                    "func": "Or",
                    "exprs": [
                      {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    6,
                                    50,
                                    45,
                                    72,
                                    73,
                                    71,
                                    72
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "CallBinary": {
                          "func": "Eq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    8,
                                    49,
                                    45,
                                    85,
                                    82,
                                    71,
                                    69,
                                    78,
                                    84
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          1,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                },
                "els": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          0,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            "distinct": false
          },
          {
            "func": "SumInt32",
            "expr": {
              "If": {
                "cond": {
                  "CallVariadic": {
                    "func": "And",
                    "exprs": [
                      {
                        "CallBinary": {
                          "func": "NotEq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    6,
                                    50,
                                    45,
                                    72,
                                    73,
                                    71,
                                    72
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      },
                      {
                        "CallBinary": {
                          "func": "NotEq",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    19,
                                    8,
                                    49,
                                    45,
                                    85,
                                    82,
                                    71,
                                    69,
                                    78,
                                    84
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Char": {
                                    "length": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "then": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          1,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                },
                "els": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          0,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            "distinct": false
          }
        ],
        "simple_aggrs": [
          [
            0,
            0,
            {
              "func": "SumInt32",
              "expr": {
                "If": {
                  "cond": {
                    "CallVariadic": {
                      "func": "Or",
                      "exprs": [
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 0
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      6,
                                      50,
                                      45,
                                      72,
                                      73,
                                      71,
                                      72
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 0
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      8,
                                      49,
                                      45,
                                      85,
                                      82,
                                      71,
                                      69,
                                      78,
                                      84
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "then": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            4,
                            1,
                            0,
                            0,
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": "Int32",
                        "nullable": false
                      }
                    ]
                  },
                  "els": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            4,
                            0,
                            0,
                            0,
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": "Int32",
                        "nullable": false
                      }
                    ]
                  }
                }
              },
              "distinct": false
            }
          ],
          [
            1,
            1,
            {
              "func": "SumInt32",
              "expr": {
                "If": {
                  "cond": {
                    "CallVariadic": {
                      "func": "And",
                      "exprs": [
                        {
                          "CallBinary": {
                            "func": "NotEq",
                            "expr1": {
                              "Column": 0
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      6,
                                      50,
                                      45,
                                      72,
                                      73,
                                      71,
                                      72
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "NotEq",
                            "expr1": {
                              "Column": 0
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      8,
                                      49,
                                      45,
                                      85,
                                      82,
                                      71,
                                      69,
                                      78,
                                      84
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "then": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            4,
                            1,
                            0,
                            0,
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": "Int32",
                        "nullable": false
                      }
                    ]
                  },
                  "els": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            4,
                            0,
                            0,
                            0,
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": "Int32",
                        "nullable": false
                      }
                    ]
                  }
                }
              },
              "distinct": false
            }
          ]
        ],
        "distinct_aggrs": []
      }
    },
    "input_key": null
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0..=#2)

EOF


query T multiline
-- Query 13
EXPLAIN physical PLAN FOR SELECT
    c_count,
    count(*) AS custdist
FROM
    (
        SELECT
            c_custkey,
            count(o_orderkey) c_count -- workaround for no column aliases
        FROM
            customer LEFT OUTER JOIN orders ON
                c_custkey = o_custkey
                AND o_comment NOT LIKE '%special%requests%'
        GROUP BY
            c_custkey
    ) AS c_orders -- (c_custkey, c_count) -- no column aliases yet
GROUP BY
    c_count
ORDER BY
    custdist DESC,
    c_count DESC
----
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 10
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6,
                          7
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7
                    },
                    [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7
                    ]
                  ],
                  [
                    [
                      {
                        "Column": 3
                      }
                    ],
                    {
                      "0": 1,
                      "1": 2,
                      "2": 3,
                      "3": 0,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7
                    },
                    [
                      0,
                      1,
                      2,
                      4,
                      5,
                      6,
                      7
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 3
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  1,
                  2,
                  3,
                  0,
                  4,
                  5,
                  6,
                  7
                ],
                "input_arity": 8
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 12
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 1
                      }
                    ],
                    {
                      "0": 1,
                      "1": 0,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8
                    },
                    [
                      0,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 1
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  1,
                  0,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8
                ],
                "input_arity": 9
              }
            }
          }
        ],
        "plan": {
          "Delta": {
            "path_plans": [
              {
                "source_relation": 0,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                      ],
                      "input_arity": 8
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7
                    ],
                    "lookup_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              16,
                              {
                                "CallUnary": {
                                  "func": {
                                    "Not": null
                                  },
                                  "expr": {
                                    "CallUnary": {
                                      "func": {
                                        "IsLikeMatch": {
                                          "pattern": "%special%requests%",
                                          "case_insensitive": false,
                                          "matcher_impl": {
                                            "String": [
                                              {
                                                "consume": 0,
                                                "many": true,
                                                "suffix": "special"
                                              },
                                              {
                                                "consume": 0,
                                                "many": true,
                                                "suffix": "requests"
                                              },
                                              {
                                                "consume": 0,
                                                "many": true,
                                                "suffix": ""
                                              }
                                            ]
                                          }
                                        }
                                      },
                                      "expr": {
                                        "CallUnary": {
                                          "func": {
                                            "CastVarCharToString": null
                                          },
                                          "expr": {
                                            "Column": 15
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8
                          ],
                          "input_arity": 16
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              },
              {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 1
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [
                        [
                          9,
                          {
                            "CallUnary": {
                              "func": {
                                "Not": null
                              },
                              "expr": {
                                "CallUnary": {
                                  "func": {
                                    "IsLikeMatch": {
                                      "pattern": "%special%requests%",
                                      "case_insensitive": false,
                                      "matcher_impl": {
                                        "String": [
                                          {
                                            "consume": 0,
                                            "many": true,
                                            "suffix": "special"
                                          },
                                          {
                                            "consume": 0,
                                            "many": true,
                                            "suffix": "requests"
                                          },
                                          {
                                            "consume": 0,
                                            "many": true,
                                            "suffix": ""
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "expr": {
                                    "CallUnary": {
                                      "func": {
                                        "CastVarCharToString": null
                                      },
                                      "expr": {
                                        "Column": 8
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        ]
                      ],
                      "projection": [
                        1,
                        0
                      ],
                      "input_arity": 9
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      0
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            1
                          ],
                          "input_arity": 9
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            ]
          }
        }
      }
    },
    "body": {
      "Reduce": {
        "input": {
          "Mfp": {
            "input": {
              "Reduce": {
                "input": {
                  "Union": {
                    "inputs": [
                      {
                        "Get": {
                          "id": {
                            "Local": 0
                          },
                          "keys": {
                            "raw": true,
                            "arranged": []
                          },
                          "plan": {
                            "Collection": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                8
                              ],
                              "input_arity": 9
                            }
                          }
                        }
                      },
                      {
                        "Mfp": {
                          "input": {
                            "Union": {
                              "inputs": [
                                {
                                  "Negate": {
                                    "input": {
                                      "Mfp": {
                                        "input": {
                                          "Reduce": {
                                            "input": {
                                              "Get": {
                                                "id": {
                                                  "Local": 0
                                                },
                                                "keys": {
                                                  "raw": true,
                                                  "arranged": []
                                                },
                                                "plan": {
                                                  "Collection": {
                                                    "expressions": [],
                                                    "predicates": [],
                                                    "projection": [
                                                      0,
                                                      1,
                                                      2,
                                                      3,
                                                      4,
                                                      5,
                                                      6,
                                                      7
                                                    ],
                                                    "input_arity": 9
                                                  }
                                                }
                                              }
                                            },
                                            "key_val_plan": {
                                              "key_plan": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [
                                                    0,
                                                    1,
                                                    2,
                                                    3,
                                                    4,
                                                    5,
                                                    6,
                                                    7
                                                  ],
                                                  "input_arity": 8
                                                }
                                              },
                                              "val_plan": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [],
                                                  "input_arity": 8
                                                }
                                              }
                                            },
                                            "plan": "Distinct",
                                            "input_key": null
                                          }
                                        },
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            0
                                          ],
                                          "input_arity": 8
                                        },
                                        "input_key_val": [
                                          [
                                            {
                                              "Column": 0
                                            },
                                            {
                                              "Column": 1
                                            },
                                            {
                                              "Column": 2
                                            },
                                            {
                                              "Column": 3
                                            },
                                            {
                                              "Column": 4
                                            },
                                            {
                                              "Column": 5
                                            },
                                            {
                                              "Column": 6
                                            },
                                            {
                                              "Column": 7
                                            }
                                          ],
                                          null
                                        ]
                                      }
                                    }
                                  }
                                },
                                {
                                  "Get": {
                                    "id": {
                                      "Global": {
                                        "User": 10
                                      }
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 3
                                            }
                                          ],
                                          {
                                            "0": 1,
                                            "1": 2,
                                            "2": 3,
                                            "3": 0,
                                            "4": 4,
                                            "5": 5,
                                            "6": 6,
                                            "7": 7
                                          },
                                          [
                                            0,
                                            1,
                                            2,
                                            4,
                                            5,
                                            6,
                                            7
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": {
                                      "Arrangement": [
                                        [
                                          {
                                            "Column": 3
                                          }
                                        ],
                                        null,
                                        {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            1
                                          ],
                                          "input_arity": 8
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "mfp": {
                            "expressions": [
                              {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Int32",
                                    "nullable": true
                                  }
                                ]
                              }
                            ],
                            "predicates": [],
                            "projection": [
                              0,
                              1
                            ],
                            "input_arity": 1
                          },
                          "input_key_val": null
                        }
                      }
                    ]
                  }
                },
                "key_val_plan": {
                  "key_plan": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 2
                    }
                  },
                  "val_plan": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1
                      ],
                      "input_arity": 2
                    }
                  }
                },
                "plan": {
                  "Accumulable": {
                    "full_aggrs": [
                      {
                        "func": "Count",
                        "expr": {
                          "Column": 1
                        },
                        "distinct": false
                      }
                    ],
                    "simple_aggrs": [
                      [
                        0,
                        0,
                        {
                          "func": "Count",
                          "expr": {
                            "Column": 1
                          },
                          "distinct": false
                        }
                      ]
                    ],
                    "distinct_aggrs": []
                  }
                },
                "input_key": null
              }
            },
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                1
              ],
              "input_arity": 2
            },
            "input_key_val": [
              [
                {
                  "Column": 0
                }
              ],
              null
            ]
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 1
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                }
              ],
              "predicates": [],
              "projection": [
                1
              ],
              "input_arity": 1
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "Count",
                "expr": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          2
                        ]
                      }
                    },
                    {
                      "scalar_type": "Bool",
                      "nullable": false
                    }
                  ]
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "Count",
                  "expr": {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            2
                          ]
                        }
                      },
                      {
                        "scalar_type": "Bool",
                        "nullable": false
                      }
                    ]
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    }
  }
}

Finish order_by=(#1 desc nulls_first, #0 desc nulls_first) limit=none offset=0 project=(#0, #1)

EOF


query T multiline
-- Query 14
EXPLAIN physical PLAN FOR SELECT
    100.00 * sum(case
        when p_type like 'PROMO%'
            then l_extendedprice * (1 - l_discount)
        else 0
    end) / sum(l_extendedprice * (1 - l_discount)) AS promo_revenue
FROM
    lineitem,
    part
WHERE
    l_partkey = p_partkey
    AND l_shipdate >= DATE '1995-09-01'
    AND l_shipdate < DATE '1995-09-01' + INTERVAL '1' month
----
Source materialize.public.part (u4):
{
  "expressions": [],
  "predicates": [],
  "projection": [
    0,
    4
  ],
  "input_arity": 9
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 14
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 1
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1,
                      0,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "input_arity": 16
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1
                          ],
                          "input_arity": 2
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              }
            ],
            "plan": {
              "Delta": {
                "path_plans": [
                  {
                    "source_relation": 0,
                    "source_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              11,
                              {
                                "CallBinary": {
                                  "func": "Gte",
                                  "expr1": {
                                    "Column": 10
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            10,
                                            209,
                                            249,
                                            255,
                                            255
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Date",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            [
                              11,
                              {
                                "CallBinary": {
                                  "func": "Lt",
                                  "expr1": {
                                    "CallUnary": {
                                      "func": {
                                        "CastDateToTimestamp": null
                                      },
                                      "expr": {
                                        "Column": 10
                                      }
                                    }
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            12,
                                            203,
                                            7,
                                            0,
                                            0,
                                            18,
                                            1,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": "Timestamp",
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            0,
                            5,
                            6
                          ],
                          "input_arity": 16
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1,
                          2
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                1,
                                2,
                                3
                              ],
                              "input_arity": 4
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  },
                  {
                    "source_relation": 1,
                    "source_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1
                          ],
                          "input_arity": 2
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1
                        ],
                        "lookup_key": [
                          {
                            "Column": 1
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [
                                [
                                  12,
                                  {
                                    "CallBinary": {
                                      "func": "Gte",
                                      "expr1": {
                                        "Column": 11
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                10,
                                                209,
                                                249,
                                                255,
                                                255
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": "Date",
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                [
                                  12,
                                  {
                                    "CallBinary": {
                                      "func": "Lt",
                                      "expr1": {
                                        "CallUnary": {
                                          "func": {
                                            "CastDateToTimestamp": null
                                          },
                                          "expr": {
                                            "Column": 11
                                          }
                                        }
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                12,
                                                203,
                                                7,
                                                0,
                                                0,
                                                18,
                                                1,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0,
                                                0
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": "Timestamp",
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                6,
                                7,
                                1
                              ],
                              "input_arity": 17
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                ]
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [],
              "input_arity": 3
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "If": {
                    "cond": {
                      "CallUnary": {
                        "func": {
                          "IsLikeMatch": {
                            "pattern": "PROMO%",
                            "case_insensitive": false,
                            "matcher_impl": {
                              "String": [
                                {
                                  "consume": 0,
                                  "many": false,
                                  "suffix": "PROMO"
                                },
                                {
                                  "consume": 0,
                                  "many": true,
                                  "suffix": ""
                                }
                              ]
                            }
                          }
                        },
                        "expr": {
                          "CallUnary": {
                            "func": {
                              "CastVarCharToString": null
                            },
                            "expr": {
                              "Column": 2
                            }
                          }
                        }
                      }
                    },
                    "then": {
                      "CallBinary": {
                        "func": "MulNumeric",
                        "expr1": {
                          "Column": 0
                        },
                        "expr2": {
                          "CallBinary": {
                            "func": "SubNumeric",
                            "expr1": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      29,
                                      1,
                                      0,
                                      0,
                                      1,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Numeric": {
                                      "max_scale": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            },
                            "expr2": {
                              "Column": 1
                            }
                          }
                        }
                      }
                    },
                    "els": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                },
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 1
                        }
                      }
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                3,
                4
              ],
              "input_arity": 3
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "If": {
                    "cond": {
                      "CallUnary": {
                        "func": {
                          "IsLikeMatch": {
                            "pattern": "PROMO%",
                            "case_insensitive": false,
                            "matcher_impl": {
                              "String": [
                                {
                                  "consume": 0,
                                  "many": false,
                                  "suffix": "PROMO"
                                },
                                {
                                  "consume": 0,
                                  "many": true,
                                  "suffix": ""
                                }
                              ]
                            }
                          }
                        },
                        "expr": {
                          "CallUnary": {
                            "func": {
                              "CastVarCharToString": null
                            },
                            "expr": {
                              "Column": 2
                            }
                          }
                        }
                      }
                    },
                    "then": {
                      "CallBinary": {
                        "func": "MulNumeric",
                        "expr1": {
                          "Column": 0
                        },
                        "expr2": {
                          "CallBinary": {
                            "func": "SubNumeric",
                            "expr1": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      29,
                                      1,
                                      0,
                                      0,
                                      1,
                                      0
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Numeric": {
                                      "max_scale": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            },
                            "expr2": {
                              "Column": 1
                            }
                          }
                        }
                      }
                    },
                    "els": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              0,
                              0,
                              0,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    }
                  }
                },
                "distinct": false
              },
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 1
                        }
                      }
                    }
                  }
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "If": {
                      "cond": {
                        "CallUnary": {
                          "func": {
                            "IsLikeMatch": {
                              "pattern": "PROMO%",
                              "case_insensitive": false,
                              "matcher_impl": {
                                "String": [
                                  {
                                    "consume": 0,
                                    "many": false,
                                    "suffix": "PROMO"
                                  },
                                  {
                                    "consume": 0,
                                    "many": true,
                                    "suffix": ""
                                  }
                                ]
                              }
                            }
                          },
                          "expr": {
                            "CallUnary": {
                              "func": {
                                "CastVarCharToString": null
                              },
                              "expr": {
                                "Column": 2
                              }
                            }
                          }
                        }
                      },
                      "then": {
                        "CallBinary": {
                          "func": "MulNumeric",
                          "expr1": {
                            "Column": 0
                          },
                          "expr2": {
                            "CallBinary": {
                              "func": "SubNumeric",
                              "expr1": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        29,
                                        1,
                                        0,
                                        0,
                                        1,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": {
                                      "Numeric": {
                                        "max_scale": null
                                      }
                                    },
                                    "nullable": false
                                  }
                                ]
                              },
                              "expr2": {
                                "Column": 1
                              }
                            }
                          }
                        }
                      },
                      "els": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                29,
                                1,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Numeric": {
                                "max_scale": null
                              }
                            },
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  "distinct": false
                }
              ],
              [
                1,
                1,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 0
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "SubNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 1
                          }
                        }
                      }
                    }
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "body": {
      "Mfp": {
        "input": {
          "Union": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Local": 0
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [],
                            {
                              "0": 0,
                              "1": 1
                            },
                            [
                              0,
                              1
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": []
                  },
                  "input_key": [],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "Mfp": {
                  "input": {
                    "Union": {
                      "inputs": [
                        {
                          "Negate": {
                            "input": {
                              "Get": {
                                "id": {
                                  "Local": 0
                                },
                                "keys": {
                                  "raw": false,
                                  "arranged": [
                                    [
                                      [],
                                      {
                                        "0": 0,
                                        "1": 1
                                      },
                                      [
                                        0,
                                        1
                                      ]
                                    ]
                                  ]
                                },
                                "plan": {
                                  "Arrangement": [
                                    [],
                                    null,
                                    {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [],
                                      "input_arity": 2
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "Constant": {
                            "rows": {
                              "Ok": [
                                [
                                  {
                                    "data": []
                                  },
                                  0,
                                  1
                                ]
                              ]
                            }
                          }
                        }
                      ]
                    }
                  },
                  "mfp": {
                    "expressions": [
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Numeric": {
                                "max_scale": null
                              }
                            },
                            "nullable": true
                          }
                        ]
                      },
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Numeric": {
                                "max_scale": null
                              }
                            },
                            "nullable": true
                          }
                        ]
                      }
                    ],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 0
                  },
                  "input_key_val": null
                }
              }
            ]
          }
        },
        "mfp": {
          "expressions": [
            {
              "CallBinary": {
                "func": "DivNumeric",
                "expr1": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Literal": [
                        {
                          "Ok": {
                            "data": [
                              29,
                              1,
                              2,
                              0,
                              1,
                              0
                            ]
                          }
                        },
                        {
                          "scalar_type": {
                            "Numeric": {
                              "max_scale": null
                            }
                          },
                          "nullable": false
                        }
                      ]
                    },
                    "expr2": {
                      "Column": 0
                    }
                  }
                },
                "expr2": {
                  "Column": 1
                }
              }
            }
          ],
          "predicates": [],
          "projection": [
            2
          ],
          "input_arity": 2
        },
        "input_key_val": null
      }
    }
  }
}

EOF


statement ok
create view revenue (supplier_no, total_revenue) as
    SELECT
        l_suppkey,
        sum(l_extendedprice * (1 - l_discount))
    FROM
        lineitem
    WHERE
        l_shipdate >= DATE '1996-01-01'
        AND l_shipdate < DATE '1996-01-01' + INTERVAL '3' month
    GROUP BY
        l_suppkey

query T multiline
-- Query 15
EXPLAIN physical PLAN FOR SELECT
    s_suppkey,
    s_name,
    s_address,
    s_phone,
    total_revenue
FROM
    supplier,
    revenue
WHERE
    s_suppkey = supplier_no
    AND total_revenue = (
        SELECT
            max(total_revenue)
        FROM
            revenue
    )
ORDER BY
    s_suppkey
----
{
  "Let": {
    "id": 0,
    "value": {
      "Reduce": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 14
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 0
                    }
                  ],
                  {
                    "0": 0,
                    "1": 1,
                    "2": 2,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9,
                    "10": 10,
                    "11": 11,
                    "12": 12,
                    "13": 13,
                    "14": 14,
                    "15": 15
                  },
                  [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                  ]
                ]
              ]
            },
            "plan": {
              "Arrangement": [
                [
                  {
                    "Column": 0
                  }
                ],
                null,
                {
                  "expressions": [],
                  "predicates": [
                    [
                      11,
                      {
                        "CallBinary": {
                          "func": "Gte",
                          "expr1": {
                            "Column": 10
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    10,
                                    75,
                                    250,
                                    255,
                                    255
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Date",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ],
                    [
                      11,
                      {
                        "CallBinary": {
                          "func": "Lt",
                          "expr1": {
                            "CallUnary": {
                              "func": {
                                "CastDateToTimestamp": null
                              },
                              "expr": {
                                "Column": 10
                              }
                            }
                          },
                          "expr2": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    12,
                                    204,
                                    7,
                                    0,
                                    0,
                                    92,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Timestamp",
                                "nullable": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  ],
                  "projection": [
                    2,
                    5,
                    6
                  ],
                  "input_arity": 16
                }
              ]
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0
              ],
              "input_arity": 3
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 1
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 2
                        }
                      }
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                3
              ],
              "input_arity": 3
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 1
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 2
                        }
                      }
                    }
                  }
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 1
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "SubNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 2
                          }
                        }
                      }
                    }
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "body": {
      "Join": {
        "inputs": [
          {
            "Get": {
              "id": {
                "Global": {
                  "User": 5
                }
              },
              "keys": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 3
                      }
                    ],
                    {
                      "0": 1,
                      "1": 2,
                      "2": 3,
                      "3": 0,
                      "4": 4,
                      "5": 5,
                      "6": 6
                    },
                    [
                      0,
                      1,
                      2,
                      4,
                      5,
                      6
                    ]
                  ]
                ]
              },
              "plan": {
                "Arrangement": [
                  [
                    {
                      "Column": 3
                    }
                  ],
                  null,
                  {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "input_arity": 7
                  }
                ]
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1
                    },
                    [
                      1
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1
                ],
                "input_arity": 2
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Reduce": {
                  "input": {
                    "Get": {
                      "id": {
                        "Local": 0
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1
                            },
                            [
                              1
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 0
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1
                            ],
                            "input_arity": 2
                          }
                        ]
                      }
                    }
                  },
                  "key_val_plan": {
                    "key_plan": {
                      "mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [],
                        "input_arity": 1
                      }
                    },
                    "val_plan": {
                      "mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0
                        ],
                        "input_arity": 1
                      }
                    }
                  },
                  "plan": {
                    "Hierarchical": {
                      "Bucketed": {
                        "aggr_funcs": [
                          "MaxNumeric"
                        ],
                        "skips": [
                          0
                        ],
                        "buckets": [
                          268435456,
                          16777216,
                          1048576,
                          65536,
                          4096,
                          256,
                          16
                        ]
                      }
                    }
                  },
                  "input_key": null
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [],
                    {
                      "0": 0
                    },
                    [
                      0
                    ]
                  ],
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": [],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 0,
            "source_key": null,
            "initial_closure": null,
            "stage_plans": [
              {
                "lookup_relation": 1,
                "stream_key": [
                  {
                    "Column": 0
                  }
                ],
                "stream_thinning": [
                  1,
                  2,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        3,
                        4
                      ],
                      "input_arity": 5
                    }
                  }
                }
              },
              {
                "lookup_relation": 2,
                "stream_key": [
                  {
                    "Column": 4
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  2,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        4,
                        0
                      ],
                      "input_arity": 5
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    }
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0..=#4)

EOF

statement ok
drop view revenue


query T multiline
-- Query 16
EXPLAIN physical PLAN FOR SELECT
    p_brand,
    p_type,
    p_size,
    count(DISTINCT ps_suppkey) AS supplier_cnt
FROM
    partsupp,
    part
WHERE
    p_partkey = ps_partkey
    AND p_brand <> 'Brand#45'
    AND p_type NOT LIKE 'MEDIUM POLISHED%'
    AND p_size IN (49, 14, 23, 45, 19, 3, 36, 9)
    AND ps_suppkey NOT IN (
        SELECT
            s_suppkey
        FROM
            supplier
        WHERE
            s_comment like '%Customer%Complaints%'
    )
GROUP BY
    p_brand,
    p_type,
    p_size
ORDER BY
    supplier_cnt DESC,
    p_brand,
    p_type,
    p_size
----
Source materialize.public.part (u4):
{
  "expressions": [],
  "predicates": [
    [
      4,
      {
        "CallBinary": {
          "func": "NotEq",
          "expr1": {
            "Column": 3
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    19,
                    8,
                    66,
                    114,
                    97,
                    110,
                    100,
                    35,
                    52,
                    53
                  ]
                }
              },
              {
                "scalar_type": {
                  "Char": {
                    "length": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ],
    [
      5,
      {
        "CallUnary": {
          "func": {
            "Not": null
          },
          "expr": {
            "CallUnary": {
              "func": {
                "IsLikeMatch": {
                  "pattern": "MEDIUM POLISHED%",
                  "case_insensitive": false,
                  "matcher_impl": {
                    "String": [
                      {
                        "consume": 0,
                        "many": false,
                        "suffix": "MEDIUM POLISHED"
                      },
                      {
                        "consume": 0,
                        "many": true,
                        "suffix": ""
                      }
                    ]
                  }
                }
              },
              "expr": {
                "CallUnary": {
                  "func": {
                    "CastVarCharToString": null
                  },
                  "expr": {
                    "Column": 4
                  }
                }
              }
            }
          }
        }
      }
    ],
    [
      6,
      {
        "CallVariadic": {
          "func": "Or",
          "exprs": [
            {
              "CallBinary": {
                "func": "Eq",
                "expr1": {
                  "Column": 5
                },
                "expr2": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          3,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            {
              "CallBinary": {
                "func": "Eq",
                "expr1": {
                  "Column": 5
                },
                "expr2": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          9,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            {
              "CallBinary": {
                "func": "Eq",
                "expr1": {
                  "Column": 5
                },
                "expr2": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          14,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            {
              "CallBinary": {
                "func": "Eq",
                "expr1": {
                  "Column": 5
                },
                "expr2": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          19,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            {
              "CallBinary": {
                "func": "Eq",
                "expr1": {
                  "Column": 5
                },
                "expr2": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          23,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            {
              "CallBinary": {
                "func": "Eq",
                "expr1": {
                  "Column": 5
                },
                "expr2": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          36,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            {
              "CallBinary": {
                "func": "Eq",
                "expr1": {
                  "Column": 5
                },
                "expr2": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          45,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            },
            {
              "CallBinary": {
                "func": "Eq",
                "expr1": {
                  "Column": 5
                },
                "expr2": {
                  "Literal": [
                    {
                      "Ok": {
                        "data": [
                          4,
                          49,
                          0,
                          0,
                          0
                        ]
                      }
                    },
                    {
                      "scalar_type": "Int32",
                      "nullable": false
                    }
                  ]
                }
              }
            }
          ]
        }
      }
    ]
  ],
  "projection": [
    0,
    3,
    4,
    5
  ],
  "input_arity": 9
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 7
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4
                        },
                        [
                          1,
                          2,
                          3,
                          4
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3,
                      "4": 4
                    },
                    [
                      1,
                      2,
                      3,
                      4
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3,
                  4
                ],
                "input_arity": 5
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 4
                    }
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3
                    },
                    [
                      1,
                      2,
                      3
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3
                ],
                "input_arity": 4
              }
            }
          }
        ],
        "plan": {
          "Delta": {
            "path_plans": [
              {
                "source_relation": 0,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1
                      ],
                      "input_arity": 5
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              },
              {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0,
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            4,
                            1,
                            2,
                            3
                          ],
                          "input_arity": 8
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            ]
          }
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "Reduce": {
            "input": {
              "Get": {
                "id": {
                  "Local": 0
                },
                "keys": {
                  "raw": true,
                  "arranged": []
                },
                "plan": {
                  "Collection": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 4
                  }
                }
              }
            },
            "key_val_plan": {
              "key_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    0
                  ],
                  "input_arity": 1
                }
              },
              "val_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [],
                  "input_arity": 1
                }
              }
            },
            "plan": "Distinct",
            "input_key": null
          }
        },
        "body": {
          "Reduce": {
            "input": {
              "Join": {
                "inputs": [
                  {
                    "ArrangeBy": {
                      "input": {
                        "Get": {
                          "id": {
                            "Local": 0
                          },
                          "keys": {
                            "raw": true,
                            "arranged": []
                          },
                          "plan": "PassArrangements"
                        }
                      },
                      "forms": {
                        "raw": true,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2,
                              "3": 3
                            },
                            [
                              1,
                              2,
                              3
                            ]
                          ]
                        ]
                      },
                      "input_key": null,
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1,
                          2,
                          3
                        ],
                        "input_arity": 4
                      }
                    }
                  },
                  {
                    "Union": {
                      "inputs": [
                        {
                          "Negate": {
                            "input": {
                              "Join": {
                                "inputs": [
                                  {
                                    "ArrangeBy": {
                                      "input": {
                                        "Get": {
                                          "id": {
                                            "Local": 1
                                          },
                                          "keys": {
                                            "raw": false,
                                            "arranged": [
                                              [
                                                [
                                                  {
                                                    "Column": 0
                                                  }
                                                ],
                                                {
                                                  "0": 0
                                                },
                                                []
                                              ]
                                            ]
                                          },
                                          "plan": "PassArrangements"
                                        }
                                      },
                                      "forms": {
                                        "raw": false,
                                        "arranged": [
                                          [
                                            [
                                              {
                                                "Column": 0
                                              }
                                            ],
                                            {
                                              "0": 0
                                            },
                                            []
                                          ]
                                        ]
                                      },
                                      "input_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "input_mfp": {
                                        "expressions": [],
                                        "predicates": [],
                                        "projection": [
                                          0
                                        ],
                                        "input_arity": 1
                                      }
                                    }
                                  },
                                  {
                                    "Get": {
                                      "id": {
                                        "Global": {
                                          "User": 5
                                        }
                                      },
                                      "keys": {
                                        "raw": false,
                                        "arranged": [
                                          [
                                            [
                                              {
                                                "Column": 3
                                              }
                                            ],
                                            {
                                              "0": 1,
                                              "1": 2,
                                              "2": 3,
                                              "3": 0,
                                              "4": 4,
                                              "5": 5,
                                              "6": 6
                                            },
                                            [
                                              0,
                                              1,
                                              2,
                                              4,
                                              5,
                                              6
                                            ]
                                          ]
                                        ]
                                      },
                                      "plan": {
                                        "Arrangement": [
                                          [
                                            {
                                              "Column": 3
                                            }
                                          ],
                                          null,
                                          {
                                            "expressions": [],
                                            "predicates": [
                                              [
                                                7,
                                                {
                                                  "CallUnary": {
                                                    "func": {
                                                      "IsLikeMatch": {
                                                        "pattern": "%Customer%Complaints%",
                                                        "case_insensitive": false,
                                                        "matcher_impl": {
                                                          "String": [
                                                            {
                                                              "consume": 0,
                                                              "many": true,
                                                              "suffix": "Customer"
                                                            },
                                                            {
                                                              "consume": 0,
                                                              "many": true,
                                                              "suffix": "Complaints"
                                                            },
                                                            {
                                                              "consume": 0,
                                                              "many": true,
                                                              "suffix": ""
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    "expr": {
                                                      "CallUnary": {
                                                        "func": {
                                                          "CastVarCharToString": null
                                                        },
                                                        "expr": {
                                                          "Column": 6
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              ]
                                            ],
                                            "projection": [
                                              1
                                            ],
                                            "input_arity": 7
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                "plan": {
                                  "Linear": {
                                    "source_relation": 1,
                                    "source_key": null,
                                    "initial_closure": null,
                                    "stage_plans": [
                                      {
                                        "lookup_relation": 0,
                                        "stream_key": [
                                          {
                                            "Column": 0
                                          }
                                        ],
                                        "stream_thinning": [],
                                        "lookup_key": [
                                          {
                                            "Column": 0
                                          }
                                        ],
                                        "closure": {
                                          "ready_equivalences": [],
                                          "before": {
                                            "mfp": {
                                              "expressions": [],
                                              "predicates": [],
                                              "projection": [
                                                0
                                              ],
                                              "input_arity": 1
                                            }
                                          }
                                        }
                                      }
                                    ],
                                    "final_closure": null
                                  }
                                }
                              }
                            }
                          }
                        },
                        {
                          "ArrangeBy": {
                            "input": {
                              "Get": {
                                "id": {
                                  "Local": 1
                                },
                                "keys": {
                                  "raw": false,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      {
                                        "0": 0
                                      },
                                      []
                                    ]
                                  ]
                                },
                                "plan": "PassArrangements"
                              }
                            },
                            "forms": {
                              "raw": true,
                              "arranged": []
                            },
                            "input_key": [
                              {
                                "Column": 0
                              }
                            ],
                            "input_mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0
                              ],
                              "input_arity": 1
                            }
                          }
                        }
                      ]
                    }
                  }
                ],
                "plan": {
                  "Linear": {
                    "source_relation": 1,
                    "source_key": null,
                    "initial_closure": null,
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                1,
                                2,
                                3
                              ],
                              "input_arity": 4
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                }
              }
            },
            "key_val_plan": {
              "key_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    1,
                    2,
                    3
                  ],
                  "input_arity": 4
                }
              },
              "val_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    0
                  ],
                  "input_arity": 4
                }
              }
            },
            "plan": {
              "Accumulable": {
                "full_aggrs": [
                  {
                    "func": "Count",
                    "expr": {
                      "Column": 0
                    },
                    "distinct": true
                  }
                ],
                "simple_aggrs": [],
                "distinct_aggrs": [
                  [
                    0,
                    0,
                    {
                      "func": "Count",
                      "expr": {
                        "Column": 0
                      },
                      "distinct": true
                    }
                  ]
                ]
              }
            },
            "input_key": null
          }
        }
      }
    }
  }
}

Finish order_by=(#3 desc nulls_first, #0 asc nulls_last, #1 asc nulls_last, #2 asc nulls_last) limit=none offset=0 project=(#0..=#3)

EOF


query T multiline
-- Query 17
EXPLAIN physical PLAN FOR SELECT
  sum(l_extendedprice) / 7.0 AS avg_yearly
FROM
  lineitem,
  part
WHERE
  p_partkey = l_partkey
  AND p_brand = 'Brand#23'
  AND p_container = 'MED BOX'
  AND l_quantity < (
    SELECT
      0.2 * avg(l_quantity)
    FROM
      lineitem
    WHERE
      l_partkey = p_partkey
  )
----
Source materialize.public.part (u4):
{
  "expressions": [],
  "predicates": [
    [
      4,
      {
        "CallBinary": {
          "func": "Eq",
          "expr1": {
            "Column": 3
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    19,
                    8,
                    66,
                    114,
                    97,
                    110,
                    100,
                    35,
                    50,
                    51
                  ]
                }
              },
              {
                "scalar_type": {
                  "Char": {
                    "length": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ],
    [
      7,
      {
        "CallBinary": {
          "func": "Eq",
          "expr1": {
            "Column": 6
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    19,
                    7,
                    77,
                    69,
                    68,
                    32,
                    66,
                    79,
                    88
                  ]
                }
              },
              {
                "scalar_type": {
                  "Char": {
                    "length": null
                  }
                },
                "nullable": false
              }
            ]
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 9
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "ArrangeBy": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 14
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 1
                    }
                  ],
                  {
                    "0": 1,
                    "1": 0,
                    "2": 2,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9,
                    "10": 10,
                    "11": 11,
                    "12": 12,
                    "13": 13,
                    "14": 14,
                    "15": 15
                  },
                  [
                    0,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                  ]
                ]
              ]
            },
            "plan": "PassArrangements"
          }
        },
        "forms": {
          "raw": false,
          "arranged": [
            [
              [
                {
                  "Column": 1
                }
              ],
              {
                "0": 1,
                "1": 0,
                "2": 2,
                "3": 3,
                "4": 4,
                "5": 5,
                "6": 6,
                "7": 7,
                "8": 8,
                "9": 9,
                "10": 10,
                "11": 11,
                "12": 12,
                "13": 13,
                "14": 14,
                "15": 15
              },
              [
                0,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15
              ]
            ]
          ]
        },
        "input_key": [
          {
            "Column": 1
          }
        ],
        "input_mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            1,
            0,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "input_arity": 16
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "Join": {
            "inputs": [
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0
                          ],
                          "input_arity": 1
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              }
            ],
            "plan": {
              "Delta": {
                "path_plans": [
                  {
                    "source_relation": 0,
                    "source_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            4,
                            5
                          ],
                          "input_arity": 16
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1,
                          2
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                1,
                                2
                              ],
                              "input_arity": 3
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  },
                  {
                    "source_relation": 1,
                    "source_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0
                          ],
                          "input_arity": 1
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [],
                        "lookup_key": [
                          {
                            "Column": 1
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                0,
                                4,
                                5
                              ],
                              "input_arity": 16
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                ]
              }
            }
          }
        },
        "body": {
          "Let": {
            "id": 2,
            "value": {
              "Reduce": {
                "input": {
                  "Join": {
                    "inputs": [
                      {
                        "Get": {
                          "id": {
                            "Local": 1
                          },
                          "keys": {
                            "raw": true,
                            "arranged": []
                          },
                          "plan": "PassArrangements"
                        }
                      },
                      {
                        "ArrangeBy": {
                          "input": {
                            "Reduce": {
                              "input": {
                                "Join": {
                                  "inputs": [
                                    {
                                      "ArrangeBy": {
                                        "input": {
                                          "Reduce": {
                                            "input": {
                                              "Get": {
                                                "id": {
                                                  "Local": 1
                                                },
                                                "keys": {
                                                  "raw": true,
                                                  "arranged": []
                                                },
                                                "plan": {
                                                  "Collection": {
                                                    "expressions": [],
                                                    "predicates": [],
                                                    "projection": [
                                                      0
                                                    ],
                                                    "input_arity": 3
                                                  }
                                                }
                                              }
                                            },
                                            "key_val_plan": {
                                              "key_plan": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [
                                                    0
                                                  ],
                                                  "input_arity": 1
                                                }
                                              },
                                              "val_plan": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [],
                                                  "input_arity": 1
                                                }
                                              }
                                            },
                                            "plan": "Distinct",
                                            "input_key": null
                                          }
                                        },
                                        "forms": {
                                          "raw": false,
                                          "arranged": [
                                            [
                                              [
                                                {
                                                  "Column": 0
                                                }
                                              ],
                                              {
                                                "0": 0
                                              },
                                              []
                                            ]
                                          ]
                                        },
                                        "input_key": [
                                          {
                                            "Column": 0
                                          }
                                        ],
                                        "input_mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            0
                                          ],
                                          "input_arity": 1
                                        }
                                      }
                                    },
                                    {
                                      "Get": {
                                        "id": {
                                          "Local": 0
                                        },
                                        "keys": {
                                          "raw": false,
                                          "arranged": [
                                            [
                                              [
                                                {
                                                  "Column": 1
                                                }
                                              ],
                                              {
                                                "0": 1,
                                                "1": 0,
                                                "2": 2,
                                                "3": 3,
                                                "4": 4,
                                                "5": 5,
                                                "6": 6,
                                                "7": 7,
                                                "8": 8,
                                                "9": 9,
                                                "10": 10,
                                                "11": 11,
                                                "12": 12,
                                                "13": 13,
                                                "14": 14,
                                                "15": 15
                                              },
                                              [
                                                0,
                                                2,
                                                3,
                                                4,
                                                5,
                                                6,
                                                7,
                                                8,
                                                9,
                                                10,
                                                11,
                                                12,
                                                13,
                                                14,
                                                15
                                              ]
                                            ]
                                          ]
                                        },
                                        "plan": "PassArrangements"
                                      }
                                    }
                                  ],
                                  "plan": {
                                    "Delta": {
                                      "path_plans": [
                                        {
                                          "source_relation": 0,
                                          "source_key": [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          "initial_closure": {
                                            "ready_equivalences": [],
                                            "before": {
                                              "mfp": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  0
                                                ],
                                                "input_arity": 1
                                              }
                                            }
                                          },
                                          "stage_plans": [
                                            {
                                              "lookup_relation": 1,
                                              "stream_key": [
                                                {
                                                  "Column": 0
                                                }
                                              ],
                                              "stream_thinning": [],
                                              "lookup_key": [
                                                {
                                                  "Column": 1
                                                }
                                              ],
                                              "closure": {
                                                "ready_equivalences": [],
                                                "before": {
                                                  "mfp": {
                                                    "expressions": [],
                                                    "predicates": [],
                                                    "projection": [
                                                      0,
                                                      4
                                                    ],
                                                    "input_arity": 16
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "final_closure": null
                                        },
                                        {
                                          "source_relation": 1,
                                          "source_key": [
                                            {
                                              "Column": 1
                                            }
                                          ],
                                          "initial_closure": {
                                            "ready_equivalences": [],
                                            "before": {
                                              "mfp": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  0,
                                                  4
                                                ],
                                                "input_arity": 16
                                              }
                                            }
                                          },
                                          "stage_plans": [
                                            {
                                              "lookup_relation": 0,
                                              "stream_key": [
                                                {
                                                  "Column": 0
                                                }
                                              ],
                                              "stream_thinning": [
                                                1
                                              ],
                                              "lookup_key": [
                                                {
                                                  "Column": 0
                                                }
                                              ],
                                              "closure": {
                                                "ready_equivalences": [],
                                                "before": {
                                                  "mfp": {
                                                    "expressions": [],
                                                    "predicates": [],
                                                    "projection": [
                                                      0,
                                                      1
                                                    ],
                                                    "input_arity": 2
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "final_closure": null
                                        }
                                      ]
                                    }
                                  }
                                }
                              },
                              "key_val_plan": {
                                "key_plan": {
                                  "mfp": {
                                    "expressions": [],
                                    "predicates": [],
                                    "projection": [
                                      0
                                    ],
                                    "input_arity": 2
                                  }
                                },
                                "val_plan": {
                                  "mfp": {
                                    "expressions": [
                                      {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                2
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": "Bool",
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    ],
                                    "predicates": [],
                                    "projection": [
                                      1,
                                      2
                                    ],
                                    "input_arity": 2
                                  }
                                }
                              },
                              "plan": {
                                "Accumulable": {
                                  "full_aggrs": [
                                    {
                                      "func": "SumNumeric",
                                      "expr": {
                                        "Column": 1
                                      },
                                      "distinct": false
                                    },
                                    {
                                      "func": "Count",
                                      "expr": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                2
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": "Bool",
                                            "nullable": false
                                          }
                                        ]
                                      },
                                      "distinct": false
                                    }
                                  ],
                                  "simple_aggrs": [
                                    [
                                      0,
                                      0,
                                      {
                                        "func": "SumNumeric",
                                        "expr": {
                                          "Column": 1
                                        },
                                        "distinct": false
                                      }
                                    ],
                                    [
                                      1,
                                      1,
                                      {
                                        "func": "Count",
                                        "expr": {
                                          "Literal": [
                                            {
                                              "Ok": {
                                                "data": [
                                                  2
                                                ]
                                              }
                                            },
                                            {
                                              "scalar_type": "Bool",
                                              "nullable": false
                                            }
                                          ]
                                        },
                                        "distinct": false
                                      }
                                    ]
                                  ],
                                  "distinct_aggrs": []
                                }
                              },
                              "input_key": null
                            }
                          },
                          "forms": {
                            "raw": false,
                            "arranged": [
                              [
                                [
                                  {
                                    "Column": 0
                                  }
                                ],
                                {
                                  "0": 0,
                                  "1": 1,
                                  "2": 2
                                },
                                [
                                  1,
                                  2
                                ]
                              ]
                            ]
                          },
                          "input_key": [
                            {
                              "Column": 0
                            }
                          ],
                          "input_mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              0,
                              1,
                              2
                            ],
                            "input_arity": 3
                          }
                        }
                      }
                    ],
                    "plan": {
                      "Linear": {
                        "source_relation": 0,
                        "source_key": null,
                        "initial_closure": null,
                        "stage_plans": [
                          {
                            "lookup_relation": 1,
                            "stream_key": [
                              {
                                "Column": 0
                              }
                            ],
                            "stream_thinning": [
                              1,
                              2
                            ],
                            "lookup_key": [
                              {
                                "Column": 0
                              }
                            ],
                            "closure": {
                              "ready_equivalences": [],
                              "before": {
                                "mfp": {
                                  "expressions": [],
                                  "predicates": [
                                    [
                                      5,
                                      {
                                        "CallBinary": {
                                          "func": "Lt",
                                          "expr1": {
                                            "CallUnary": {
                                              "func": {
                                                "CastNumericToFloat64": null
                                              },
                                              "expr": {
                                                "Column": 1
                                              }
                                            }
                                          },
                                          "expr2": {
                                            "CallBinary": {
                                              "func": "MulFloat64",
                                              "expr1": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        9,
                                                        154,
                                                        153,
                                                        153,
                                                        153,
                                                        153,
                                                        153,
                                                        201,
                                                        63
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": "Float64",
                                                    "nullable": false
                                                  }
                                                ]
                                              },
                                              "expr2": {
                                                "CallBinary": {
                                                  "func": "DivFloat64",
                                                  "expr1": {
                                                    "CallUnary": {
                                                      "func": {
                                                        "CastNumericToFloat64": null
                                                      },
                                                      "expr": {
                                                        "Column": 3
                                                      }
                                                    }
                                                  },
                                                  "expr2": {
                                                    "CallUnary": {
                                                      "func": {
                                                        "CastInt64ToFloat64": null
                                                      },
                                                      "expr": {
                                                        "If": {
                                                          "cond": {
                                                            "CallBinary": {
                                                              "func": "Eq",
                                                              "expr1": {
                                                                "Column": 4
                                                              },
                                                              "expr2": {
                                                                "Literal": [
                                                                  {
                                                                    "Ok": {
                                                                      "data": [
                                                                        5,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0
                                                                      ]
                                                                    }
                                                                  },
                                                                  {
                                                                    "scalar_type": "Int64",
                                                                    "nullable": false
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          },
                                                          "then": {
                                                            "Literal": [
                                                              {
                                                                "Ok": {
                                                                  "data": [
                                                                    0
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "scalar_type": "Int64",
                                                                "nullable": true
                                                              }
                                                            ]
                                                          },
                                                          "els": {
                                                            "Column": 4
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  ],
                                  "projection": [
                                    2
                                  ],
                                  "input_arity": 5
                                }
                              }
                            }
                          }
                        ],
                        "final_closure": null
                      }
                    }
                  }
                },
                "key_val_plan": {
                  "key_plan": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [],
                      "input_arity": 1
                    }
                  },
                  "val_plan": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 1
                    }
                  }
                },
                "plan": {
                  "Accumulable": {
                    "full_aggrs": [
                      {
                        "func": "SumNumeric",
                        "expr": {
                          "Column": 0
                        },
                        "distinct": false
                      }
                    ],
                    "simple_aggrs": [
                      [
                        0,
                        0,
                        {
                          "func": "SumNumeric",
                          "expr": {
                            "Column": 0
                          },
                          "distinct": false
                        }
                      ]
                    ],
                    "distinct_aggrs": []
                  }
                },
                "input_key": null
              }
            },
            "body": {
              "Mfp": {
                "input": {
                  "Union": {
                    "inputs": [
                      {
                        "ArrangeBy": {
                          "input": {
                            "Get": {
                              "id": {
                                "Local": 2
                              },
                              "keys": {
                                "raw": false,
                                "arranged": [
                                  [
                                    [],
                                    {
                                      "0": 0
                                    },
                                    [
                                      0
                                    ]
                                  ]
                                ]
                              },
                              "plan": "PassArrangements"
                            }
                          },
                          "forms": {
                            "raw": true,
                            "arranged": []
                          },
                          "input_key": [],
                          "input_mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              0
                            ],
                            "input_arity": 1
                          }
                        }
                      },
                      {
                        "Mfp": {
                          "input": {
                            "Union": {
                              "inputs": [
                                {
                                  "Negate": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Local": 2
                                        },
                                        "keys": {
                                          "raw": false,
                                          "arranged": [
                                            [
                                              [],
                                              {
                                                "0": 0
                                              },
                                              [
                                                0
                                              ]
                                            ]
                                          ]
                                        },
                                        "plan": {
                                          "Arrangement": [
                                            [],
                                            null,
                                            {
                                              "expressions": [],
                                              "predicates": [],
                                              "projection": [],
                                              "input_arity": 1
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "Constant": {
                                    "rows": {
                                      "Ok": [
                                        [
                                          {
                                            "data": []
                                          },
                                          0,
                                          1
                                        ]
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          "mfp": {
                            "expressions": [
                              {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": {
                                      "Numeric": {
                                        "max_scale": 2
                                      }
                                    },
                                    "nullable": true
                                  }
                                ]
                              }
                            ],
                            "predicates": [],
                            "projection": [
                              0
                            ],
                            "input_arity": 0
                          },
                          "input_key_val": null
                        }
                      }
                    ]
                  }
                },
                "mfp": {
                  "expressions": [
                    {
                      "CallBinary": {
                        "func": "DivNumeric",
                        "expr1": {
                          "Column": 0
                        },
                        "expr2": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  7,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "predicates": [],
                  "projection": [
                    1
                  ],
                  "input_arity": 1
                },
                "input_key_val": null
              }
            }
          }
        }
      }
    }
  }
}

EOF


query T multiline
-- Query 18
EXPLAIN physical PLAN FOR SELECT
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice,
    sum(l_quantity)
FROM
    customer,
    orders,
    lineitem
WHERE
    o_orderkey IN (
        SELECT
            l_orderkey
        FROM
            lineitem
        GROUP BY
            l_orderkey having
                sum(l_quantity) > 300
    )
    AND c_custkey = o_custkey
    AND o_orderkey = l_orderkey
GROUP BY
    c_name,
    c_custkey,
    o_orderkey,
    o_orderdate,
    o_totalprice
ORDER BY
    o_totalprice DESC,
    o_orderdate
----
{
  "Let": {
    "id": 0,
    "value": {
      "ArrangeBy": {
        "input": {
          "Get": {
            "id": {
              "Global": {
                "User": 14
              }
            },
            "keys": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 0
                    }
                  ],
                  {
                    "0": 0,
                    "1": 1,
                    "2": 2,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9,
                    "10": 10,
                    "11": 11,
                    "12": 12,
                    "13": 13,
                    "14": 14,
                    "15": 15
                  },
                  [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                  ]
                ]
              ]
            },
            "plan": "PassArrangements"
          }
        },
        "forms": {
          "raw": false,
          "arranged": [
            [
              [
                {
                  "Column": 0
                }
              ],
              {
                "0": 0,
                "1": 1,
                "2": 2,
                "3": 3,
                "4": 4,
                "5": 5,
                "6": 6,
                "7": 7,
                "8": 8,
                "9": 9,
                "10": 10,
                "11": 11,
                "12": 12,
                "13": 13,
                "14": 14,
                "15": 15
              },
              [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15
              ]
            ]
          ]
        },
        "input_key": [
          {
            "Column": 0
          }
        ],
        "input_mfp": {
          "expressions": [],
          "predicates": [],
          "projection": [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15
          ],
          "input_arity": 16
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 10
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 3
                              }
                            ],
                            {
                              "0": 1,
                              "1": 2,
                              "2": 3,
                              "3": 0,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7
                            },
                            [
                              0,
                              1,
                              2,
                              4,
                              5,
                              6,
                              7
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 3
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              2
                            ],
                            "input_arity": 8
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 12
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8
                            ]
                          ]
                        ]
                      },
                      "plan": {
                        "Arrangement": [
                          [
                            {
                              "Column": 1
                            }
                          ],
                          null,
                          {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              1,
                              0,
                              3,
                              4
                            ],
                            "input_arity": 9
                          }
                        ]
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3
                        },
                        [
                          1,
                          2,
                          3
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3
                    ],
                    "input_arity": 4
                  }
                }
              },
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 2,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            16,
                            17,
                            18,
                            4
                          ],
                          "input_arity": 19
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "stream_thinning": [
                      0,
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            5,
                            1,
                            2,
                            3,
                            4
                          ],
                          "input_arity": 6
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "body": {
          "Reduce": {
            "input": {
              "Join": {
                "inputs": [
                  {
                    "Get": {
                      "id": {
                        "Local": 1
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  {
                    "ArrangeBy": {
                      "input": {
                        "Reduce": {
                          "input": {
                            "Join": {
                              "inputs": [
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Reduce": {
                                        "input": {
                                          "Get": {
                                            "id": {
                                              "Local": 1
                                            },
                                            "keys": {
                                              "raw": true,
                                              "arranged": []
                                            },
                                            "plan": {
                                              "Collection": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  2
                                                ],
                                                "input_arity": 6
                                              }
                                            }
                                          }
                                        },
                                        "key_val_plan": {
                                          "key_plan": {
                                            "mfp": {
                                              "expressions": [],
                                              "predicates": [],
                                              "projection": [
                                                0
                                              ],
                                              "input_arity": 1
                                            }
                                          },
                                          "val_plan": {
                                            "mfp": {
                                              "expressions": [],
                                              "predicates": [],
                                              "projection": [],
                                              "input_arity": 1
                                            }
                                          }
                                        },
                                        "plan": "Distinct",
                                        "input_key": null
                                      }
                                    },
                                    "forms": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0
                                          },
                                          []
                                        ]
                                      ]
                                    },
                                    "input_key": [
                                      {
                                        "Column": 0
                                      }
                                    ],
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0
                                      ],
                                      "input_arity": 1
                                    }
                                  }
                                },
                                {
                                  "Get": {
                                    "id": {
                                      "Local": 0
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0,
                                            "1": 1,
                                            "2": 2,
                                            "3": 3,
                                            "4": 4,
                                            "5": 5,
                                            "6": 6,
                                            "7": 7,
                                            "8": 8,
                                            "9": 9,
                                            "10": 10,
                                            "11": 11,
                                            "12": 12,
                                            "13": 13,
                                            "14": 14,
                                            "15": 15
                                          },
                                          [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": "PassArrangements"
                                  }
                                }
                              ],
                              "plan": {
                                "Delta": {
                                  "path_plans": [
                                    {
                                      "source_relation": 0,
                                      "source_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "initial_closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0
                                            ],
                                            "input_arity": 1
                                          }
                                        }
                                      },
                                      "stage_plans": [
                                        {
                                          "lookup_relation": 1,
                                          "stream_key": [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          "stream_thinning": [],
                                          "lookup_key": [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          "closure": {
                                            "ready_equivalences": [],
                                            "before": {
                                              "mfp": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  0,
                                                  4
                                                ],
                                                "input_arity": 16
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "final_closure": null
                                    },
                                    {
                                      "source_relation": 1,
                                      "source_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "initial_closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0,
                                              4
                                            ],
                                            "input_arity": 16
                                          }
                                        }
                                      },
                                      "stage_plans": [
                                        {
                                          "lookup_relation": 0,
                                          "stream_key": [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          "stream_thinning": [
                                            1
                                          ],
                                          "lookup_key": [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          "closure": {
                                            "ready_equivalences": [],
                                            "before": {
                                              "mfp": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  0,
                                                  1
                                                ],
                                                "input_arity": 2
                                              }
                                            }
                                          }
                                        }
                                      ],
                                      "final_closure": null
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "key_val_plan": {
                            "key_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  0
                                ],
                                "input_arity": 2
                              }
                            },
                            "val_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  1
                                ],
                                "input_arity": 2
                              }
                            }
                          },
                          "plan": {
                            "Accumulable": {
                              "full_aggrs": [
                                {
                                  "func": "SumNumeric",
                                  "expr": {
                                    "Column": 1
                                  },
                                  "distinct": false
                                }
                              ],
                              "simple_aggrs": [
                                [
                                  0,
                                  0,
                                  {
                                    "func": "SumNumeric",
                                    "expr": {
                                      "Column": 1
                                    },
                                    "distinct": false
                                  }
                                ]
                              ],
                              "distinct_aggrs": []
                            }
                          },
                          "input_key": null
                        }
                      },
                      "forms": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1
                            },
                            [
                              1
                            ]
                          ]
                        ]
                      },
                      "input_key": [
                        {
                          "Column": 0
                        }
                      ],
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1
                        ],
                        "input_arity": 2
                      }
                    }
                  }
                ],
                "plan": {
                  "Linear": {
                    "source_relation": 0,
                    "source_key": null,
                    "initial_closure": null,
                    "stage_plans": [
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 2
                          }
                        ],
                        "stream_thinning": [
                          0,
                          1,
                          3,
                          4,
                          5
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [
                                [
                                  7,
                                  {
                                    "CallBinary": {
                                      "func": "Gt",
                                      "expr1": {
                                        "Column": 6
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                29,
                                                1,
                                                2,
                                                0,
                                                3,
                                                0
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": {
                                              "Numeric": {
                                                "max_scale": null
                                              }
                                            },
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                1,
                                2,
                                0,
                                3,
                                4,
                                5
                              ],
                              "input_arity": 7
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                }
              }
            },
            "key_val_plan": {
              "key_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    1,
                    0,
                    2,
                    4,
                    3
                  ],
                  "input_arity": 6
                }
              },
              "val_plan": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    5
                  ],
                  "input_arity": 6
                }
              }
            },
            "plan": {
              "Accumulable": {
                "full_aggrs": [
                  {
                    "func": "SumNumeric",
                    "expr": {
                      "Column": 5
                    },
                    "distinct": false
                  }
                ],
                "simple_aggrs": [
                  [
                    0,
                    0,
                    {
                      "func": "SumNumeric",
                      "expr": {
                        "Column": 5
                      },
                      "distinct": false
                    }
                  ]
                ],
                "distinct_aggrs": []
              }
            },
            "input_key": null
          }
        }
      }
    }
  }
}

Finish order_by=(#4 desc nulls_first, #3 asc nulls_last) limit=none offset=0 project=(#0..=#5)

EOF


query T multiline
-- Query 19
EXPLAIN physical PLAN FOR SELECT
    sum(l_extendedprice* (1 - l_discount)) AS revenue
FROM
    lineitem,
    part
WHERE
    (
        p_partkey = l_partkey
        AND p_brand = 'Brand#12'
        AND p_container IN ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')
        AND l_quantity >= CAST (1 AS smallint) AND l_quantity <= CAST (1 + 10 AS smallint)
        AND p_size BETWEEN CAST (1 AS smallint) AND CAST (5 AS smallint)
        AND l_shipmode IN ('AIR', 'AIR REG')
        AND l_shipinstruct = 'DELIVER IN PERSON'
    )
    or
    (
        p_partkey = l_partkey
        AND p_brand = 'Brand#23'
        AND p_container IN ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')
        AND l_quantity >= CAST (10 AS smallint) AND l_quantity <= CAST (10 + 10 AS smallint)
        AND p_size BETWEEN CAST (1 AS smallint) AND CAST (10 AS smallint)
        AND l_shipmode IN ('AIR', 'AIR REG')
        AND l_shipinstruct = 'DELIVER IN PERSON'
    )
    or
    (
        p_partkey = l_partkey
        AND p_brand = 'Brand#34'
        AND p_container IN ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')
        AND l_quantity >= CAST (20 AS smallint) AND l_quantity <= CAST (20 + 10 AS smallint)
        AND p_size BETWEEN CAST (1 AS smallint) AND CAST (15 AS smallint)
        AND l_shipmode IN ('AIR', 'AIR REG')
        AND l_shipinstruct = 'DELIVER IN PERSON'
    )
----
Source materialize.public.part (u4):
{
  "expressions": [],
  "predicates": [
    [
      6,
      {
        "CallBinary": {
          "func": "Gte",
          "expr1": {
            "Column": 5
          },
          "expr2": {
            "Literal": [
              {
                "Ok": {
                  "data": [
                    4,
                    1,
                    0,
                    0,
                    0
                  ]
                }
              },
              {
                "scalar_type": "Int32",
                "nullable": false
              }
            ]
          }
        }
      }
    ],
    [
      7,
      {
        "CallVariadic": {
          "func": "Or",
          "exprs": [
            {
              "CallVariadic": {
                "func": "And",
                "exprs": [
                  {
                    "CallBinary": {
                      "func": "Eq",
                      "expr1": {
                        "Column": 3
                      },
                      "expr2": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                19,
                                8,
                                66,
                                114,
                                97,
                                110,
                                100,
                                35,
                                49,
                                50
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Char": {
                                "length": null
                              }
                            },
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  {
                    "CallBinary": {
                      "func": "Lte",
                      "expr1": {
                        "Column": 5
                      },
                      "expr2": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                4,
                                5,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Int32",
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  {
                    "CallVariadic": {
                      "func": "Or",
                      "exprs": [
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      6,
                                      83,
                                      77,
                                      32,
                                      66,
                                      79,
                                      88
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      6,
                                      83,
                                      77,
                                      32,
                                      80,
                                      75,
                                      71
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      7,
                                      83,
                                      77,
                                      32,
                                      67,
                                      65,
                                      83,
                                      69
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      7,
                                      83,
                                      77,
                                      32,
                                      80,
                                      65,
                                      67,
                                      75
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "CallVariadic": {
                "func": "And",
                "exprs": [
                  {
                    "CallBinary": {
                      "func": "Eq",
                      "expr1": {
                        "Column": 3
                      },
                      "expr2": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                19,
                                8,
                                66,
                                114,
                                97,
                                110,
                                100,
                                35,
                                50,
                                51
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Char": {
                                "length": null
                              }
                            },
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  {
                    "CallBinary": {
                      "func": "Lte",
                      "expr1": {
                        "Column": 5
                      },
                      "expr2": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                4,
                                10,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Int32",
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  {
                    "CallVariadic": {
                      "func": "Or",
                      "exprs": [
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      7,
                                      77,
                                      69,
                                      68,
                                      32,
                                      66,
                                      65,
                                      71
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      7,
                                      77,
                                      69,
                                      68,
                                      32,
                                      66,
                                      79,
                                      88
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      7,
                                      77,
                                      69,
                                      68,
                                      32,
                                      80,
                                      75,
                                      71
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      8,
                                      77,
                                      69,
                                      68,
                                      32,
                                      80,
                                      65,
                                      67,
                                      75
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "CallVariadic": {
                "func": "And",
                "exprs": [
                  {
                    "CallBinary": {
                      "func": "Eq",
                      "expr1": {
                        "Column": 3
                      },
                      "expr2": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                19,
                                8,
                                66,
                                114,
                                97,
                                110,
                                100,
                                35,
                                51,
                                52
                              ]
                            }
                          },
                          {
                            "scalar_type": {
                              "Char": {
                                "length": null
                              }
                            },
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  {
                    "CallBinary": {
                      "func": "Lte",
                      "expr1": {
                        "Column": 5
                      },
                      "expr2": {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                4,
                                15,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Int32",
                            "nullable": false
                          }
                        ]
                      }
                    }
                  },
                  {
                    "CallVariadic": {
                      "func": "Or",
                      "exprs": [
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      6,
                                      76,
                                      71,
                                      32,
                                      66,
                                      79,
                                      88
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      6,
                                      76,
                                      71,
                                      32,
                                      80,
                                      75,
                                      71
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      7,
                                      76,
                                      71,
                                      32,
                                      67,
                                      65,
                                      83,
                                      69
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        },
                        {
                          "CallBinary": {
                            "func": "Eq",
                            "expr1": {
                              "Column": 6
                            },
                            "expr2": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      19,
                                      7,
                                      76,
                                      71,
                                      32,
                                      80,
                                      65,
                                      67,
                                      75
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": {
                                    "Char": {
                                      "length": null
                                    }
                                  },
                                  "nullable": false
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    ]
  ],
  "projection": [
    0,
    3,
    5,
    6
  ],
  "input_arity": 9
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "Reduce": {
        "input": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 14
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 1,
                              "1": 0,
                              "2": 2,
                              "3": 3,
                              "4": 4,
                              "5": 5,
                              "6": 6,
                              "7": 7,
                              "8": 8,
                              "9": 9,
                              "10": 10,
                              "11": 11,
                              "12": 12,
                              "13": 13,
                              "14": 14,
                              "15": 15
                            },
                            [
                              0,
                              2,
                              3,
                              4,
                              5,
                              6,
                              7,
                              8,
                              9,
                              10,
                              11,
                              12,
                              13,
                              14,
                              15
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 1
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      1,
                      0,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ],
                    "input_arity": 16
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1,
                            2,
                            3
                          ],
                          "input_arity": 4
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3
                        },
                        [
                          1,
                          2,
                          3
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3
                    ],
                    "input_arity": 4
                  }
                }
              }
            ],
            "plan": {
              "Delta": {
                "path_plans": [
                  {
                    "source_relation": 0,
                    "source_key": [
                      {
                        "Column": 1
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [
                            {
                              "CallBinary": {
                                "func": "Lte",
                                "expr1": {
                                  "Column": 4
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          29,
                                          1,
                                          1,
                                          0,
                                          2,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Numeric": {
                                          "max_scale": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Gte",
                                "expr1": {
                                  "Column": 4
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          29,
                                          1,
                                          1,
                                          0,
                                          1,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Numeric": {
                                          "max_scale": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Lte",
                                "expr1": {
                                  "Column": 4
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          29,
                                          1,
                                          1,
                                          0,
                                          3,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Numeric": {
                                          "max_scale": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Gte",
                                "expr1": {
                                  "Column": 4
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          29,
                                          1,
                                          1,
                                          0,
                                          2,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Numeric": {
                                          "max_scale": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Lte",
                                "expr1": {
                                  "Column": 4
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          29,
                                          2,
                                          0,
                                          0,
                                          11,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Numeric": {
                                          "max_scale": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "CallBinary": {
                                "func": "Gte",
                                "expr1": {
                                  "Column": 4
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          29,
                                          1,
                                          0,
                                          0,
                                          1,
                                          0
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Numeric": {
                                          "max_scale": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          "predicates": [
                            [
                              14,
                              {
                                "CallBinary": {
                                  "func": "Eq",
                                  "expr1": {
                                    "Column": 13
                                  },
                                  "expr2": {
                                    "Literal": [
                                      {
                                        "Ok": {
                                          "data": [
                                            19,
                                            17,
                                            68,
                                            69,
                                            76,
                                            73,
                                            86,
                                            69,
                                            82,
                                            32,
                                            73,
                                            78,
                                            32,
                                            80,
                                            69,
                                            82,
                                            83,
                                            79,
                                            78
                                          ]
                                        }
                                      },
                                      {
                                        "scalar_type": {
                                          "Char": {
                                            "length": null
                                          }
                                        },
                                        "nullable": false
                                      }
                                    ]
                                  }
                                }
                              }
                            ],
                            [
                              15,
                              {
                                "CallVariadic": {
                                  "func": "Or",
                                  "exprs": [
                                    {
                                      "CallBinary": {
                                        "func": "Eq",
                                        "expr1": {
                                          "Column": 14
                                        },
                                        "expr2": {
                                          "Literal": [
                                            {
                                              "Ok": {
                                                "data": [
                                                  19,
                                                  3,
                                                  65,
                                                  73,
                                                  82
                                                ]
                                              }
                                            },
                                            {
                                              "scalar_type": {
                                                "Char": {
                                                  "length": null
                                                }
                                              },
                                              "nullable": false
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "CallBinary": {
                                        "func": "Eq",
                                        "expr1": {
                                          "Column": 14
                                        },
                                        "expr2": {
                                          "Literal": [
                                            {
                                              "Ok": {
                                                "data": [
                                                  19,
                                                  7,
                                                  65,
                                                  73,
                                                  82,
                                                  32,
                                                  82,
                                                  69,
                                                  71
                                                ]
                                              }
                                            },
                                            {
                                              "scalar_type": {
                                                "Char": {
                                                  "length": null
                                                }
                                              },
                                              "nullable": false
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ],
                            [
                              22,
                              {
                                "CallVariadic": {
                                  "func": "Or",
                                  "exprs": [
                                    {
                                      "CallVariadic": {
                                        "func": "And",
                                        "exprs": [
                                          {
                                            "Column": 16
                                          },
                                          {
                                            "Column": 17
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "CallVariadic": {
                                        "func": "And",
                                        "exprs": [
                                          {
                                            "Column": 18
                                          },
                                          {
                                            "Column": 19
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "CallVariadic": {
                                        "func": "And",
                                        "exprs": [
                                          {
                                            "Column": 20
                                          },
                                          {
                                            "Column": 21
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          ],
                          "projection": [
                            0,
                            5,
                            6,
                            16,
                            17,
                            18,
                            19,
                            20,
                            21
                          ],
                          "input_arity": 16
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [
                                [
                                  12,
                                  {
                                    "CallVariadic": {
                                      "func": "Or",
                                      "exprs": [
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "Column": 3
                                              },
                                              {
                                                "Column": 4
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Eq",
                                                  "expr1": {
                                                    "Column": 9
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            19,
                                                            8,
                                                            66,
                                                            114,
                                                            97,
                                                            110,
                                                            100,
                                                            35,
                                                            50,
                                                            51
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": {
                                                          "Char": {
                                                            "length": null
                                                          }
                                                        },
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Lte",
                                                  "expr1": {
                                                    "Column": 10
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            4,
                                                            10,
                                                            0,
                                                            0,
                                                            0
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": "Int32",
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  77,
                                                                  69,
                                                                  68,
                                                                  32,
                                                                  66,
                                                                  65,
                                                                  71
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  77,
                                                                  69,
                                                                  68,
                                                                  32,
                                                                  66,
                                                                  79,
                                                                  88
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  77,
                                                                  69,
                                                                  68,
                                                                  32,
                                                                  80,
                                                                  75,
                                                                  71
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  8,
                                                                  77,
                                                                  69,
                                                                  68,
                                                                  32,
                                                                  80,
                                                                  65,
                                                                  67,
                                                                  75
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "Column": 5
                                              },
                                              {
                                                "Column": 6
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Eq",
                                                  "expr1": {
                                                    "Column": 9
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            19,
                                                            8,
                                                            66,
                                                            114,
                                                            97,
                                                            110,
                                                            100,
                                                            35,
                                                            51,
                                                            52
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": {
                                                          "Char": {
                                                            "length": null
                                                          }
                                                        },
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Lte",
                                                  "expr1": {
                                                    "Column": 10
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            4,
                                                            15,
                                                            0,
                                                            0,
                                                            0
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": "Int32",
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  6,
                                                                  76,
                                                                  71,
                                                                  32,
                                                                  66,
                                                                  79,
                                                                  88
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  6,
                                                                  76,
                                                                  71,
                                                                  32,
                                                                  80,
                                                                  75,
                                                                  71
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  76,
                                                                  71,
                                                                  32,
                                                                  67,
                                                                  65,
                                                                  83,
                                                                  69
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  76,
                                                                  71,
                                                                  32,
                                                                  80,
                                                                  65,
                                                                  67,
                                                                  75
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "Column": 7
                                              },
                                              {
                                                "Column": 8
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Eq",
                                                  "expr1": {
                                                    "Column": 9
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            19,
                                                            8,
                                                            66,
                                                            114,
                                                            97,
                                                            110,
                                                            100,
                                                            35,
                                                            49,
                                                            50
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": {
                                                          "Char": {
                                                            "length": null
                                                          }
                                                        },
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Lte",
                                                  "expr1": {
                                                    "Column": 10
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            4,
                                                            5,
                                                            0,
                                                            0,
                                                            0
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": "Int32",
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  6,
                                                                  83,
                                                                  77,
                                                                  32,
                                                                  66,
                                                                  79,
                                                                  88
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  6,
                                                                  83,
                                                                  77,
                                                                  32,
                                                                  80,
                                                                  75,
                                                                  71
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  83,
                                                                  77,
                                                                  32,
                                                                  67,
                                                                  65,
                                                                  83,
                                                                  69
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 11
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  83,
                                                                  77,
                                                                  32,
                                                                  80,
                                                                  65,
                                                                  67,
                                                                  75
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                1,
                                2
                              ],
                              "input_arity": 12
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  },
                  {
                    "source_relation": 1,
                    "source_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "initial_closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1,
                            2,
                            3
                          ],
                          "input_arity": 4
                        }
                      }
                    },
                    "stage_plans": [
                      {
                        "lookup_relation": 0,
                        "stream_key": [
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1,
                          2,
                          3
                        ],
                        "lookup_key": [
                          {
                            "Column": 1
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [
                                {
                                  "CallBinary": {
                                    "func": "Lte",
                                    "expr1": {
                                      "Column": 7
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              29,
                                              1,
                                              1,
                                              0,
                                              2,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": {
                                            "Numeric": {
                                              "max_scale": null
                                            }
                                          },
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Gte",
                                    "expr1": {
                                      "Column": 7
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              29,
                                              1,
                                              1,
                                              0,
                                              1,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": {
                                            "Numeric": {
                                              "max_scale": null
                                            }
                                          },
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Lte",
                                    "expr1": {
                                      "Column": 7
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              29,
                                              1,
                                              1,
                                              0,
                                              3,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": {
                                            "Numeric": {
                                              "max_scale": null
                                            }
                                          },
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Gte",
                                    "expr1": {
                                      "Column": 7
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              29,
                                              1,
                                              1,
                                              0,
                                              2,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": {
                                            "Numeric": {
                                              "max_scale": null
                                            }
                                          },
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Lte",
                                    "expr1": {
                                      "Column": 7
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              29,
                                              2,
                                              0,
                                              0,
                                              11,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": {
                                            "Numeric": {
                                              "max_scale": null
                                            }
                                          },
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Gte",
                                    "expr1": {
                                      "Column": 7
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              29,
                                              1,
                                              0,
                                              0,
                                              1,
                                              0
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": {
                                            "Numeric": {
                                              "max_scale": null
                                            }
                                          },
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ],
                              "predicates": [
                                [
                                  17,
                                  {
                                    "CallBinary": {
                                      "func": "Eq",
                                      "expr1": {
                                        "Column": 16
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                19,
                                                17,
                                                68,
                                                69,
                                                76,
                                                73,
                                                86,
                                                69,
                                                82,
                                                32,
                                                73,
                                                78,
                                                32,
                                                80,
                                                69,
                                                82,
                                                83,
                                                79,
                                                78
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": {
                                              "Char": {
                                                "length": null
                                              }
                                            },
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                [
                                  18,
                                  {
                                    "CallVariadic": {
                                      "func": "Or",
                                      "exprs": [
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 17
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      3,
                                                      65,
                                                      73,
                                                      82
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": {
                                                    "Char": {
                                                      "length": null
                                                    }
                                                  },
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 17
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      7,
                                                      65,
                                                      73,
                                                      82,
                                                      32,
                                                      82,
                                                      69,
                                                      71
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": {
                                                    "Char": {
                                                      "length": null
                                                    }
                                                  },
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                [
                                  25,
                                  {
                                    "CallVariadic": {
                                      "func": "Or",
                                      "exprs": [
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "Column": 19
                                              },
                                              {
                                                "Column": 20
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "Column": 21
                                              },
                                              {
                                                "Column": 22
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "Column": 23
                                              },
                                              {
                                                "Column": 24
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ],
                                [
                                  25,
                                  {
                                    "CallVariadic": {
                                      "func": "Or",
                                      "exprs": [
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "Column": 19
                                              },
                                              {
                                                "Column": 20
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Eq",
                                                  "expr1": {
                                                    "Column": 1
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            19,
                                                            8,
                                                            66,
                                                            114,
                                                            97,
                                                            110,
                                                            100,
                                                            35,
                                                            50,
                                                            51
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": {
                                                          "Char": {
                                                            "length": null
                                                          }
                                                        },
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Lte",
                                                  "expr1": {
                                                    "Column": 2
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            4,
                                                            10,
                                                            0,
                                                            0,
                                                            0
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": "Int32",
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  77,
                                                                  69,
                                                                  68,
                                                                  32,
                                                                  66,
                                                                  65,
                                                                  71
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  77,
                                                                  69,
                                                                  68,
                                                                  32,
                                                                  66,
                                                                  79,
                                                                  88
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  77,
                                                                  69,
                                                                  68,
                                                                  32,
                                                                  80,
                                                                  75,
                                                                  71
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  8,
                                                                  77,
                                                                  69,
                                                                  68,
                                                                  32,
                                                                  80,
                                                                  65,
                                                                  67,
                                                                  75
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "Column": 21
                                              },
                                              {
                                                "Column": 22
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Eq",
                                                  "expr1": {
                                                    "Column": 1
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            19,
                                                            8,
                                                            66,
                                                            114,
                                                            97,
                                                            110,
                                                            100,
                                                            35,
                                                            51,
                                                            52
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": {
                                                          "Char": {
                                                            "length": null
                                                          }
                                                        },
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Lte",
                                                  "expr1": {
                                                    "Column": 2
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            4,
                                                            15,
                                                            0,
                                                            0,
                                                            0
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": "Int32",
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  6,
                                                                  76,
                                                                  71,
                                                                  32,
                                                                  66,
                                                                  79,
                                                                  88
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  6,
                                                                  76,
                                                                  71,
                                                                  32,
                                                                  80,
                                                                  75,
                                                                  71
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  76,
                                                                  71,
                                                                  32,
                                                                  67,
                                                                  65,
                                                                  83,
                                                                  69
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  76,
                                                                  71,
                                                                  32,
                                                                  80,
                                                                  65,
                                                                  67,
                                                                  75
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "CallVariadic": {
                                            "func": "And",
                                            "exprs": [
                                              {
                                                "Column": 23
                                              },
                                              {
                                                "Column": 24
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Eq",
                                                  "expr1": {
                                                    "Column": 1
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            19,
                                                            8,
                                                            66,
                                                            114,
                                                            97,
                                                            110,
                                                            100,
                                                            35,
                                                            49,
                                                            50
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": {
                                                          "Char": {
                                                            "length": null
                                                          }
                                                        },
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallBinary": {
                                                  "func": "Lte",
                                                  "expr1": {
                                                    "Column": 2
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            4,
                                                            5,
                                                            0,
                                                            0,
                                                            0
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": "Int32",
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              {
                                                "CallVariadic": {
                                                  "func": "Or",
                                                  "exprs": [
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  6,
                                                                  83,
                                                                  77,
                                                                  32,
                                                                  66,
                                                                  79,
                                                                  88
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  6,
                                                                  83,
                                                                  77,
                                                                  32,
                                                                  80,
                                                                  75,
                                                                  71
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  83,
                                                                  77,
                                                                  32,
                                                                  67,
                                                                  65,
                                                                  83,
                                                                  69
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "CallBinary": {
                                                        "func": "Eq",
                                                        "expr1": {
                                                          "Column": 3
                                                        },
                                                        "expr2": {
                                                          "Literal": [
                                                            {
                                                              "Ok": {
                                                                "data": [
                                                                  19,
                                                                  7,
                                                                  83,
                                                                  77,
                                                                  32,
                                                                  80,
                                                                  65,
                                                                  67,
                                                                  75
                                                                ]
                                                              }
                                                            },
                                                            {
                                                              "scalar_type": {
                                                                "Char": {
                                                                  "length": null
                                                                }
                                                              },
                                                              "nullable": false
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                8,
                                9
                              ],
                              "input_arity": 19
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                ]
              }
            }
          }
        },
        "key_val_plan": {
          "key_plan": {
            "mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [],
              "input_arity": 2
            }
          },
          "val_plan": {
            "mfp": {
              "expressions": [
                {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 1
                        }
                      }
                    }
                  }
                }
              ],
              "predicates": [],
              "projection": [
                2
              ],
              "input_arity": 2
            }
          }
        },
        "plan": {
          "Accumulable": {
            "full_aggrs": [
              {
                "func": "SumNumeric",
                "expr": {
                  "CallBinary": {
                    "func": "MulNumeric",
                    "expr1": {
                      "Column": 0
                    },
                    "expr2": {
                      "CallBinary": {
                        "func": "SubNumeric",
                        "expr1": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  29,
                                  1,
                                  0,
                                  0,
                                  1,
                                  0
                                ]
                              }
                            },
                            {
                              "scalar_type": {
                                "Numeric": {
                                  "max_scale": null
                                }
                              },
                              "nullable": false
                            }
                          ]
                        },
                        "expr2": {
                          "Column": 1
                        }
                      }
                    }
                  }
                },
                "distinct": false
              }
            ],
            "simple_aggrs": [
              [
                0,
                0,
                {
                  "func": "SumNumeric",
                  "expr": {
                    "CallBinary": {
                      "func": "MulNumeric",
                      "expr1": {
                        "Column": 0
                      },
                      "expr2": {
                        "CallBinary": {
                          "func": "SubNumeric",
                          "expr1": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    29,
                                    1,
                                    0,
                                    0,
                                    1,
                                    0
                                  ]
                                }
                              },
                              {
                                "scalar_type": {
                                  "Numeric": {
                                    "max_scale": null
                                  }
                                },
                                "nullable": false
                              }
                            ]
                          },
                          "expr2": {
                            "Column": 1
                          }
                        }
                      }
                    }
                  },
                  "distinct": false
                }
              ]
            ],
            "distinct_aggrs": []
          }
        },
        "input_key": null
      }
    },
    "body": {
      "Union": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [],
                        {
                          "0": 0
                        },
                        [
                          0
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": true,
                "arranged": []
              },
              "input_key": [],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          },
          {
            "Mfp": {
              "input": {
                "Union": {
                  "inputs": [
                    {
                      "Negate": {
                        "input": {
                          "Get": {
                            "id": {
                              "Local": 0
                            },
                            "keys": {
                              "raw": false,
                              "arranged": [
                                [
                                  [],
                                  {
                                    "0": 0
                                  },
                                  [
                                    0
                                  ]
                                ]
                              ]
                            },
                            "plan": {
                              "Arrangement": [
                                [],
                                null,
                                {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [],
                                  "input_arity": 1
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "Constant": {
                        "rows": {
                          "Ok": [
                            [
                              {
                                "data": []
                              },
                              0,
                              1
                            ]
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              "mfp": {
                "expressions": [
                  {
                    "Literal": [
                      {
                        "Ok": {
                          "data": [
                            0
                          ]
                        }
                      },
                      {
                        "scalar_type": {
                          "Numeric": {
                            "max_scale": null
                          }
                        },
                        "nullable": true
                      }
                    ]
                  }
                ],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 0
              },
              "input_key_val": null
            }
          }
        ]
      }
    }
  }
}

EOF


query T multiline
-- Query 20
EXPLAIN physical PLAN FOR SELECT
    s_name,
    s_address
FROM
    supplier,
    nation
WHERE
    s_suppkey IN (
        SELECT
            ps_suppkey
        FROM
            partsupp
        WHERE
            ps_partkey IN (
                SELECT
                    p_partkey
                FROM
                    part
                WHERE
                    p_name like 'forest%'
            )
            AND ps_availqty > (
                SELECT
                    0.5 * sum(l_quantity)
                FROM
                    lineitem
                WHERE
                    l_partkey = ps_partkey
                    AND l_suppkey = ps_suppkey
                    AND l_shipdate >= DATE '1995-01-01'
                    AND l_shipdate < DATE '1995-01-01' + INTERVAL '1' year
            )
    )
    AND s_nationkey = n_nationkey
    AND n_name = 'CANADA'
ORDER BY
    s_name
----
Source materialize.public.part (u4):
{
  "expressions": [],
  "predicates": [
    [
      2,
      {
        "CallUnary": {
          "func": {
            "IsLikeMatch": {
              "pattern": "forest%",
              "case_insensitive": false,
              "matcher_impl": {
                "String": [
                  {
                    "consume": 0,
                    "many": false,
                    "suffix": "forest"
                  },
                  {
                    "consume": 0,
                    "many": true,
                    "suffix": ""
                  }
                ]
              }
            }
          },
          "expr": {
            "CallUnary": {
              "func": {
                "CastVarCharToString": null
              },
              "expr": {
                "Column": 1
              }
            }
          }
        }
      }
    ]
  ],
  "projection": [
    0
  ],
  "input_arity": 9
}

Query:
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 5
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 3
                      }
                    ],
                    {
                      "0": 1,
                      "1": 2,
                      "2": 3,
                      "3": 0,
                      "4": 4,
                      "5": 5,
                      "6": 6
                    },
                    [
                      0,
                      1,
                      2,
                      4,
                      5,
                      6
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 3
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  1,
                  2,
                  3,
                  0,
                  4,
                  5,
                  6
                ],
                "input_arity": 7
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 1
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            3,
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          6,
                                          67,
                                          65,
                                          78,
                                          65,
                                          68,
                                          65
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          1
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Delta": {
            "path_plans": [
              {
                "source_relation": 0,
                "source_key": [
                  {
                    "Column": 3
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        0
                      ],
                      "input_arity": 7
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 3
                      }
                    ],
                    "stream_thinning": [
                      0,
                      1,
                      2
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3
                          ],
                          "input_arity": 4
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              },
              {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        0
                      ],
                      "input_arity": 1
                    }
                  }
                },
                "stage_plans": [
                  {
                    "lookup_relation": 0,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [],
                    "lookup_key": [
                      {
                        "Column": 3
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2,
                            3
                          ],
                          "input_arity": 7
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            ]
          }
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "Join": {
            "inputs": [
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Local": 0
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0
                          ],
                          "input_arity": 3
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [],
                        {
                          "0": 0
                        },
                        [
                          0
                        ]
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 7
                        }
                      },
                      "keys": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1,
                              "2": 2,
                              "3": 3,
                              "4": 4
                            },
                            [
                              1,
                              2,
                              3,
                              4
                            ]
                          ]
                        ]
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4
                        },
                        [
                          1,
                          2,
                          3,
                          4
                        ]
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 0
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "input_arity": 5
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Get": {
                      "id": {
                        "Global": {
                          "User": 4
                        }
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": {
                        "Collection": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0
                          ],
                          "input_arity": 1
                        }
                      }
                    }
                  },
                  "forms": {
                    "raw": true,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": null,
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 1,
                "source_key": [
                  {
                    "Column": 0
                  }
                ],
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 2,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2,
                      3,
                      4
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0,
                            1,
                            2
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  },
                  {
                    "lookup_relation": 0,
                    "stream_key": [],
                    "stream_thinning": [
                      0,
                      1,
                      2
                    ],
                    "lookup_key": [],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            3,
                            0,
                            1,
                            2
                          ],
                          "input_arity": 4
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "body": {
          "Join": {
            "inputs": [
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": "PassArrangements"
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Reduce": {
                      "input": {
                        "Join": {
                          "inputs": [
                            {
                              "Get": {
                                "id": {
                                  "Local": 1
                                },
                                "keys": {
                                  "raw": true,
                                  "arranged": []
                                },
                                "plan": {
                                  "Collection": {
                                    "expressions": [],
                                    "predicates": [
                                      [
                                        3,
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 0
                                            },
                                            "expr2": {
                                              "Column": 2
                                            }
                                          }
                                        }
                                      ]
                                    ],
                                    "projection": [
                                      0,
                                      1,
                                      3
                                    ],
                                    "input_arity": 4
                                  }
                                }
                              }
                            },
                            {
                              "ArrangeBy": {
                                "input": {
                                  "Reduce": {
                                    "input": {
                                      "Join": {
                                        "inputs": [
                                          {
                                            "ArrangeBy": {
                                              "input": {
                                                "Reduce": {
                                                  "input": {
                                                    "Get": {
                                                      "id": {
                                                        "Local": 1
                                                      },
                                                      "keys": {
                                                        "raw": true,
                                                        "arranged": []
                                                      },
                                                      "plan": {
                                                        "Collection": {
                                                          "expressions": [],
                                                          "predicates": [],
                                                          "projection": [
                                                            1,
                                                            2
                                                          ],
                                                          "input_arity": 4
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "key_val_plan": {
                                                    "key_plan": {
                                                      "mfp": {
                                                        "expressions": [],
                                                        "predicates": [],
                                                        "projection": [
                                                          0,
                                                          1
                                                        ],
                                                        "input_arity": 2
                                                      }
                                                    },
                                                    "val_plan": {
                                                      "mfp": {
                                                        "expressions": [],
                                                        "predicates": [],
                                                        "projection": [],
                                                        "input_arity": 2
                                                      }
                                                    }
                                                  },
                                                  "plan": "Distinct",
                                                  "input_key": null
                                                }
                                              },
                                              "forms": {
                                                "raw": false,
                                                "arranged": [
                                                  [
                                                    [
                                                      {
                                                        "Column": 0
                                                      },
                                                      {
                                                        "Column": 1
                                                      }
                                                    ],
                                                    {
                                                      "0": 0,
                                                      "1": 1
                                                    },
                                                    []
                                                  ]
                                                ]
                                              },
                                              "input_key": [
                                                {
                                                  "Column": 0
                                                },
                                                {
                                                  "Column": 1
                                                }
                                              ],
                                              "input_mfp": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  0,
                                                  1
                                                ],
                                                "input_arity": 2
                                              }
                                            }
                                          },
                                          {
                                            "ArrangeBy": {
                                              "input": {
                                                "Get": {
                                                  "id": {
                                                    "Global": {
                                                      "User": 14
                                                    }
                                                  },
                                                  "keys": {
                                                    "raw": false,
                                                    "arranged": [
                                                      [
                                                        [
                                                          {
                                                            "Column": 1
                                                          },
                                                          {
                                                            "Column": 2
                                                          }
                                                        ],
                                                        {
                                                          "0": 2,
                                                          "1": 0,
                                                          "2": 1,
                                                          "3": 3,
                                                          "4": 4,
                                                          "5": 5,
                                                          "6": 6,
                                                          "7": 7,
                                                          "8": 8,
                                                          "9": 9,
                                                          "10": 10,
                                                          "11": 11,
                                                          "12": 12,
                                                          "13": 13,
                                                          "14": 14,
                                                          "15": 15
                                                        },
                                                        [
                                                          0,
                                                          3,
                                                          4,
                                                          5,
                                                          6,
                                                          7,
                                                          8,
                                                          9,
                                                          10,
                                                          11,
                                                          12,
                                                          13,
                                                          14,
                                                          15
                                                        ]
                                                      ]
                                                    ]
                                                  },
                                                  "plan": "PassArrangements"
                                                }
                                              },
                                              "forms": {
                                                "raw": false,
                                                "arranged": [
                                                  [
                                                    [
                                                      {
                                                        "Column": 1
                                                      },
                                                      {
                                                        "Column": 2
                                                      }
                                                    ],
                                                    {
                                                      "0": 2,
                                                      "1": 0,
                                                      "2": 1,
                                                      "3": 3,
                                                      "4": 4,
                                                      "5": 5,
                                                      "6": 6,
                                                      "7": 7,
                                                      "8": 8,
                                                      "9": 9,
                                                      "10": 10,
                                                      "11": 11,
                                                      "12": 12,
                                                      "13": 13,
                                                      "14": 14,
                                                      "15": 15
                                                    },
                                                    [
                                                      0,
                                                      3,
                                                      4,
                                                      5,
                                                      6,
                                                      7,
                                                      8,
                                                      9,
                                                      10,
                                                      11,
                                                      12,
                                                      13,
                                                      14,
                                                      15
                                                    ]
                                                  ]
                                                ]
                                              },
                                              "input_key": [
                                                {
                                                  "Column": 1
                                                },
                                                {
                                                  "Column": 2
                                                }
                                              ],
                                              "input_mfp": {
                                                "expressions": [],
                                                "predicates": [],
                                                "projection": [
                                                  2,
                                                  0,
                                                  1,
                                                  3,
                                                  4,
                                                  5,
                                                  6,
                                                  7,
                                                  8,
                                                  9,
                                                  10,
                                                  11,
                                                  12,
                                                  13,
                                                  14,
                                                  15
                                                ],
                                                "input_arity": 16
                                              }
                                            }
                                          }
                                        ],
                                        "plan": {
                                          "Delta": {
                                            "path_plans": [
                                              {
                                                "source_relation": 0,
                                                "source_key": [
                                                  {
                                                    "Column": 0
                                                  },
                                                  {
                                                    "Column": 1
                                                  }
                                                ],
                                                "initial_closure": {
                                                  "ready_equivalences": [],
                                                  "before": {
                                                    "mfp": {
                                                      "expressions": [],
                                                      "predicates": [],
                                                      "projection": [
                                                        0,
                                                        1
                                                      ],
                                                      "input_arity": 2
                                                    }
                                                  }
                                                },
                                                "stage_plans": [
                                                  {
                                                    "lookup_relation": 1,
                                                    "stream_key": [
                                                      {
                                                        "Column": 0
                                                      },
                                                      {
                                                        "Column": 1
                                                      }
                                                    ],
                                                    "stream_thinning": [],
                                                    "lookup_key": [
                                                      {
                                                        "Column": 1
                                                      },
                                                      {
                                                        "Column": 2
                                                      }
                                                    ],
                                                    "closure": {
                                                      "ready_equivalences": [],
                                                      "before": {
                                                        "mfp": {
                                                          "expressions": [],
                                                          "predicates": [
                                                            [
                                                              11,
                                                              {
                                                                "CallBinary": {
                                                                  "func": "Gte",
                                                                  "expr1": {
                                                                    "Column": 10
                                                                  },
                                                                  "expr2": {
                                                                    "Literal": [
                                                                      {
                                                                        "Ok": {
                                                                          "data": [
                                                                            10,
                                                                            222,
                                                                            248,
                                                                            255,
                                                                            255
                                                                          ]
                                                                        }
                                                                      },
                                                                      {
                                                                        "scalar_type": "Date",
                                                                        "nullable": false
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ],
                                                            [
                                                              11,
                                                              {
                                                                "CallBinary": {
                                                                  "func": "Lt",
                                                                  "expr1": {
                                                                    "CallUnary": {
                                                                      "func": {
                                                                        "CastDateToTimestamp": null
                                                                      },
                                                                      "expr": {
                                                                        "Column": 10
                                                                      }
                                                                    }
                                                                  },
                                                                  "expr2": {
                                                                    "Literal": [
                                                                      {
                                                                        "Ok": {
                                                                          "data": [
                                                                            12,
                                                                            204,
                                                                            7,
                                                                            0,
                                                                            0,
                                                                            1,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0,
                                                                            0
                                                                          ]
                                                                        }
                                                                      },
                                                                      {
                                                                        "scalar_type": "Timestamp",
                                                                        "nullable": false
                                                                      }
                                                                    ]
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          ],
                                                          "projection": [
                                                            0,
                                                            1,
                                                            4
                                                          ],
                                                          "input_arity": 16
                                                        }
                                                      }
                                                    }
                                                  }
                                                ],
                                                "final_closure": null
                                              },
                                              {
                                                "source_relation": 1,
                                                "source_key": [
                                                  {
                                                    "Column": 1
                                                  },
                                                  {
                                                    "Column": 2
                                                  }
                                                ],
                                                "initial_closure": {
                                                  "ready_equivalences": [],
                                                  "before": {
                                                    "mfp": {
                                                      "expressions": [],
                                                      "predicates": [
                                                        [
                                                          11,
                                                          {
                                                            "CallBinary": {
                                                              "func": "Gte",
                                                              "expr1": {
                                                                "Column": 10
                                                              },
                                                              "expr2": {
                                                                "Literal": [
                                                                  {
                                                                    "Ok": {
                                                                      "data": [
                                                                        10,
                                                                        222,
                                                                        248,
                                                                        255,
                                                                        255
                                                                      ]
                                                                    }
                                                                  },
                                                                  {
                                                                    "scalar_type": "Date",
                                                                    "nullable": false
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        ],
                                                        [
                                                          11,
                                                          {
                                                            "CallBinary": {
                                                              "func": "Lt",
                                                              "expr1": {
                                                                "CallUnary": {
                                                                  "func": {
                                                                    "CastDateToTimestamp": null
                                                                  },
                                                                  "expr": {
                                                                    "Column": 10
                                                                  }
                                                                }
                                                              },
                                                              "expr2": {
                                                                "Literal": [
                                                                  {
                                                                    "Ok": {
                                                                      "data": [
                                                                        12,
                                                                        204,
                                                                        7,
                                                                        0,
                                                                        0,
                                                                        1,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0,
                                                                        0
                                                                      ]
                                                                    }
                                                                  },
                                                                  {
                                                                    "scalar_type": "Timestamp",
                                                                    "nullable": false
                                                                  }
                                                                ]
                                                              }
                                                            }
                                                          }
                                                        ]
                                                      ],
                                                      "projection": [
                                                        0,
                                                        1,
                                                        4
                                                      ],
                                                      "input_arity": 16
                                                    }
                                                  }
                                                },
                                                "stage_plans": [
                                                  {
                                                    "lookup_relation": 0,
                                                    "stream_key": [
                                                      {
                                                        "Column": 0
                                                      },
                                                      {
                                                        "Column": 1
                                                      }
                                                    ],
                                                    "stream_thinning": [
                                                      2
                                                    ],
                                                    "lookup_key": [
                                                      {
                                                        "Column": 0
                                                      },
                                                      {
                                                        "Column": 1
                                                      }
                                                    ],
                                                    "closure": {
                                                      "ready_equivalences": [],
                                                      "before": {
                                                        "mfp": {
                                                          "expressions": [],
                                                          "predicates": [],
                                                          "projection": [
                                                            0,
                                                            1,
                                                            2
                                                          ],
                                                          "input_arity": 3
                                                        }
                                                      }
                                                    }
                                                  }
                                                ],
                                                "final_closure": null
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "key_val_plan": {
                                      "key_plan": {
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            0,
                                            1
                                          ],
                                          "input_arity": 3
                                        }
                                      },
                                      "val_plan": {
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            2
                                          ],
                                          "input_arity": 3
                                        }
                                      }
                                    },
                                    "plan": {
                                      "Accumulable": {
                                        "full_aggrs": [
                                          {
                                            "func": "SumNumeric",
                                            "expr": {
                                              "Column": 2
                                            },
                                            "distinct": false
                                          }
                                        ],
                                        "simple_aggrs": [
                                          [
                                            0,
                                            0,
                                            {
                                              "func": "SumNumeric",
                                              "expr": {
                                                "Column": 2
                                              },
                                              "distinct": false
                                            }
                                          ]
                                        ],
                                        "distinct_aggrs": []
                                      }
                                    },
                                    "input_key": null
                                  }
                                },
                                "forms": {
                                  "raw": false,
                                  "arranged": [
                                    [
                                      [
                                        {
                                          "Column": 0
                                        },
                                        {
                                          "Column": 1
                                        }
                                      ],
                                      {
                                        "0": 0,
                                        "1": 1,
                                        "2": 2
                                      },
                                      [
                                        2
                                      ]
                                    ]
                                  ]
                                },
                                "input_key": [
                                  {
                                    "Column": 0
                                  },
                                  {
                                    "Column": 1
                                  }
                                ],
                                "input_mfp": {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [
                                    0,
                                    1,
                                    2
                                  ],
                                  "input_arity": 3
                                }
                              }
                            }
                          ],
                          "plan": {
                            "Linear": {
                              "source_relation": 0,
                              "source_key": null,
                              "initial_closure": null,
                              "stage_plans": [
                                {
                                  "lookup_relation": 1,
                                  "stream_key": [
                                    {
                                      "Column": 1
                                    },
                                    {
                                      "Column": 0
                                    }
                                  ],
                                  "stream_thinning": [
                                    2
                                  ],
                                  "lookup_key": [
                                    {
                                      "Column": 0
                                    },
                                    {
                                      "Column": 1
                                    }
                                  ],
                                  "closure": {
                                    "ready_equivalences": [],
                                    "before": {
                                      "mfp": {
                                        "expressions": [],
                                        "predicates": [
                                          [
                                            4,
                                            {
                                              "CallBinary": {
                                                "func": "Gt",
                                                "expr1": {
                                                  "CallUnary": {
                                                    "func": {
                                                      "CastInt32ToNumeric": null
                                                    },
                                                    "expr": {
                                                      "Column": 2
                                                    }
                                                  }
                                                },
                                                "expr2": {
                                                  "CallBinary": {
                                                    "func": "MulNumeric",
                                                    "expr1": {
                                                      "Literal": [
                                                        {
                                                          "Ok": {
                                                            "data": [
                                                              29,
                                                              1,
                                                              255,
                                                              0,
                                                              5,
                                                              0
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "scalar_type": {
                                                            "Numeric": {
                                                              "max_scale": null
                                                            }
                                                          },
                                                          "nullable": false
                                                        }
                                                      ]
                                                    },
                                                    "expr2": {
                                                      "Column": 3
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        ],
                                        "projection": [
                                          1
                                        ],
                                        "input_arity": 4
                                      }
                                    }
                                  }
                                }
                              ],
                              "final_closure": null
                            }
                          }
                        }
                      },
                      "key_val_plan": {
                        "key_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              0
                            ],
                            "input_arity": 1
                          }
                        },
                        "val_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [],
                            "input_arity": 1
                          }
                        }
                      },
                      "plan": "Distinct",
                      "input_key": null
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0
                        },
                        []
                      ]
                    ]
                  },
                  "input_key": [
                    {
                      "Column": 0
                    }
                  ],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 1
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 0,
                "source_key": null,
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "stream_thinning": [
                      1,
                      2
                    ],
                    "lookup_key": [
                      {
                        "Column": 0
                      }
                    ],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            2
                          ],
                          "input_arity": 3
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        }
      }
    }
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0, #1)

EOF


query T multiline
-- Query 21
EXPLAIN physical PLAN FOR SELECT
    s_name,
    count(*) AS numwait
FROM
    supplier,
    lineitem l1,
    orders,
    nation
WHERE
    s_suppkey = l1.l_suppkey
    AND o_orderkey = l1.l_orderkey
    AND o_orderstatus = 'F'
    AND l1.l_receiptdate > l1.l_commitdate
    AND EXISTS (
        SELECT
            *
        FROM
            lineitem l2
        WHERE
            l2.l_orderkey = l1.l_orderkey
            AND l2.l_suppkey <> l1.l_suppkey
    )
    AND not EXISTS (
        SELECT
            *
        FROM
            lineitem l3
        WHERE
            l3.l_orderkey = l1.l_orderkey
            AND l3.l_suppkey <> l1.l_suppkey
            AND l3.l_receiptdate > l3.l_commitdate
    )
    AND s_nationkey = n_nationkey
    AND n_name = 'SAUDI ARABIA'
GROUP BY
    s_name
ORDER BY
    numwait DESC,
    s_name
----
{
  "Let": {
    "id": 0,
    "value": {
      "Join": {
        "inputs": [
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 5
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 3
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 3,
                          "3": 0,
                          "4": 4,
                          "5": 5,
                          "6": 6
                        },
                        [
                          0,
                          1,
                          2,
                          4,
                          5,
                          6
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 3
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          1,
                          2,
                          0
                        ],
                        "input_arity": 7
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2
                    },
                    [
                      1,
                      2
                    ]
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2
                ],
                "input_arity": 3
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 14
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 0
                          }
                        ],
                        {
                          "0": 0,
                          "1": 1,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ],
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8,
                          "9": 9,
                          "10": 10,
                          "11": 11,
                          "12": 12,
                          "13": 13,
                          "14": 14,
                          "15": 15
                        },
                        [
                          0,
                          1,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14,
                          15
                        ]
                      ]
                    ]
                  },
                  "plan": "PassArrangements"
                }
              },
              "forms": {
                "raw": false,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0,
                      "1": 1,
                      "2": 2,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9,
                      "10": 10,
                      "11": 11,
                      "12": 12,
                      "13": 13,
                      "14": 14,
                      "15": 15
                    },
                    [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ]
                  ],
                  [
                    [
                      {
                        "Column": 2
                      }
                    ],
                    {
                      "0": 1,
                      "1": 2,
                      "2": 0,
                      "3": 3,
                      "4": 4,
                      "5": 5,
                      "6": 6,
                      "7": 7,
                      "8": 8,
                      "9": 9,
                      "10": 10,
                      "11": 11,
                      "12": 12,
                      "13": 13,
                      "14": 14,
                      "15": 15
                    },
                    [
                      0,
                      1,
                      3,
                      4,
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14,
                      15
                    ]
                  ]
                ]
              },
              "input_key": [
                {
                  "Column": 0
                }
              ],
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15
                ],
                "input_arity": 16
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 12
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 1
                          }
                        ],
                        {
                          "0": 1,
                          "1": 0,
                          "2": 2,
                          "3": 3,
                          "4": 4,
                          "5": 5,
                          "6": 6,
                          "7": 7,
                          "8": 8
                        },
                        [
                          0,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 1
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            3,
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          1,
                                          70
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          1
                        ],
                        "input_arity": 9
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          },
          {
            "ArrangeBy": {
              "input": {
                "Get": {
                  "id": {
                    "Global": {
                      "User": 1
                    }
                  },
                  "keys": {
                    "raw": false,
                    "arranged": [
                      [
                        [
                          {
                            "Column": 2
                          }
                        ],
                        {
                          "0": 1,
                          "1": 2,
                          "2": 0,
                          "3": 3
                        },
                        [
                          0,
                          1,
                          3
                        ]
                      ]
                    ]
                  },
                  "plan": {
                    "Arrangement": [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      null,
                      {
                        "expressions": [],
                        "predicates": [
                          [
                            3,
                            {
                              "CallBinary": {
                                "func": "Eq",
                                "expr1": {
                                  "Column": 2
                                },
                                "expr2": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          19,
                                          12,
                                          83,
                                          65,
                                          85,
                                          68,
                                          73,
                                          32,
                                          65,
                                          82,
                                          65,
                                          66,
                                          73,
                                          65
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": {
                                        "Char": {
                                          "length": null
                                        }
                                      },
                                      "nullable": false
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        ],
                        "projection": [
                          1
                        ],
                        "input_arity": 4
                      }
                    ]
                  }
                }
              },
              "forms": {
                "raw": true,
                "arranged": [
                  [
                    [
                      {
                        "Column": 0
                      }
                    ],
                    {
                      "0": 0
                    },
                    []
                  ]
                ]
              },
              "input_key": null,
              "input_mfp": {
                "expressions": [],
                "predicates": [],
                "projection": [
                  0
                ],
                "input_arity": 1
              }
            }
          }
        ],
        "plan": {
          "Linear": {
            "source_relation": 1,
            "source_key": [
              {
                "Column": 2
              }
            ],
            "initial_closure": {
              "ready_equivalences": [],
              "before": {
                "mfp": {
                  "expressions": [],
                  "predicates": [],
                  "projection": [
                    1,
                    2,
                    0,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                  ],
                  "input_arity": 16
                }
              }
            },
            "stage_plans": [
              {
                "lookup_relation": 0,
                "stream_key": [
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [
                        [
                          13,
                          {
                            "CallBinary": {
                              "func": "Gt",
                              "expr1": {
                                "Column": 12
                              },
                              "expr2": {
                                "Column": 11
                              }
                            }
                          }
                        ]
                      ],
                      "projection": [
                        0,
                        16,
                        17,
                        1
                      ],
                      "input_arity": 18
                    }
                  }
                }
              },
              {
                "lookup_relation": 2,
                "stream_key": [
                  {
                    "Column": 3
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  2
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3,
                        0
                      ],
                      "input_arity": 4
                    }
                  }
                }
              },
              {
                "lookup_relation": 3,
                "stream_key": [
                  {
                    "Column": 2
                  }
                ],
                "stream_thinning": [
                  0,
                  1,
                  3
                ],
                "lookup_key": [
                  {
                    "Column": 0
                  }
                ],
                "closure": {
                  "ready_equivalences": [],
                  "before": {
                    "mfp": {
                      "expressions": [],
                      "predicates": [],
                      "projection": [
                        1,
                        2,
                        3
                      ],
                      "input_arity": 4
                    }
                  }
                }
              }
            ],
            "final_closure": null
          }
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "ArrangeBy": {
            "input": {
              "Get": {
                "id": {
                  "Global": {
                    "User": 14
                  }
                },
                "keys": {
                  "raw": false,
                  "arranged": [
                    [
                      [
                        {
                          "Column": 0
                        }
                      ],
                      {
                        "0": 0,
                        "1": 1,
                        "2": 2,
                        "3": 3,
                        "4": 4,
                        "5": 5,
                        "6": 6,
                        "7": 7,
                        "8": 8,
                        "9": 9,
                        "10": 10,
                        "11": 11,
                        "12": 12,
                        "13": 13,
                        "14": 14,
                        "15": 15
                      },
                      [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                      ]
                    ],
                    [
                      [
                        {
                          "Column": 2
                        }
                      ],
                      {
                        "0": 1,
                        "1": 2,
                        "2": 0,
                        "3": 3,
                        "4": 4,
                        "5": 5,
                        "6": 6,
                        "7": 7,
                        "8": 8,
                        "9": 9,
                        "10": 10,
                        "11": 11,
                        "12": 12,
                        "13": 13,
                        "14": 14,
                        "15": 15
                      },
                      [
                        0,
                        1,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15
                      ]
                    ]
                  ]
                },
                "plan": "PassArrangements"
              }
            },
            "forms": {
              "raw": false,
              "arranged": [
                [
                  [
                    {
                      "Column": 0
                    }
                  ],
                  {
                    "0": 0,
                    "1": 1,
                    "2": 2,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9,
                    "10": 10,
                    "11": 11,
                    "12": 12,
                    "13": 13,
                    "14": 14,
                    "15": 15
                  },
                  [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                  ]
                ],
                [
                  [
                    {
                      "Column": 2
                    }
                  ],
                  {
                    "0": 1,
                    "1": 2,
                    "2": 0,
                    "3": 3,
                    "4": 4,
                    "5": 5,
                    "6": 6,
                    "7": 7,
                    "8": 8,
                    "9": 9,
                    "10": 10,
                    "11": 11,
                    "12": 12,
                    "13": 13,
                    "14": 14,
                    "15": 15
                  },
                  [
                    0,
                    1,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15
                  ]
                ]
              ]
            },
            "input_key": [
              {
                "Column": 0
              }
            ],
            "input_mfp": {
              "expressions": [],
              "predicates": [],
              "projection": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15
              ],
              "input_arity": 16
            }
          }
        },
        "body": {
          "Let": {
            "id": 2,
            "value": {
              "Join": {
                "inputs": [
                  {
                    "Get": {
                      "id": {
                        "Local": 0
                      },
                      "keys": {
                        "raw": true,
                        "arranged": []
                      },
                      "plan": "PassArrangements"
                    }
                  },
                  {
                    "ArrangeBy": {
                      "input": {
                        "Reduce": {
                          "input": {
                            "Join": {
                              "inputs": [
                                {
                                  "Reduce": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Local": 0
                                        },
                                        "keys": {
                                          "raw": true,
                                          "arranged": []
                                        },
                                        "plan": {
                                          "Collection": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0,
                                              2
                                            ],
                                            "input_arity": 3
                                          }
                                        }
                                      }
                                    },
                                    "key_val_plan": {
                                      "key_plan": {
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            1,
                                            0
                                          ],
                                          "input_arity": 2
                                        }
                                      },
                                      "val_plan": {
                                        "mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [],
                                          "input_arity": 2
                                        }
                                      }
                                    },
                                    "plan": "Distinct",
                                    "input_key": null
                                  }
                                },
                                {
                                  "Get": {
                                    "id": {
                                      "Local": 1
                                    },
                                    "keys": {
                                      "raw": false,
                                      "arranged": [
                                        [
                                          [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          {
                                            "0": 0,
                                            "1": 1,
                                            "2": 2,
                                            "3": 3,
                                            "4": 4,
                                            "5": 5,
                                            "6": 6,
                                            "7": 7,
                                            "8": 8,
                                            "9": 9,
                                            "10": 10,
                                            "11": 11,
                                            "12": 12,
                                            "13": 13,
                                            "14": 14,
                                            "15": 15
                                          },
                                          [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15
                                          ]
                                        ],
                                        [
                                          [
                                            {
                                              "Column": 2
                                            }
                                          ],
                                          {
                                            "0": 1,
                                            "1": 2,
                                            "2": 0,
                                            "3": 3,
                                            "4": 4,
                                            "5": 5,
                                            "6": 6,
                                            "7": 7,
                                            "8": 8,
                                            "9": 9,
                                            "10": 10,
                                            "11": 11,
                                            "12": 12,
                                            "13": 13,
                                            "14": 14,
                                            "15": 15
                                          },
                                          [
                                            0,
                                            1,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15
                                          ]
                                        ]
                                      ]
                                    },
                                    "plan": "PassArrangements"
                                  }
                                }
                              ],
                              "plan": {
                                "Linear": {
                                  "source_relation": 0,
                                  "source_key": [
                                    {
                                      "Column": 0
                                    },
                                    {
                                      "Column": 1
                                    }
                                  ],
                                  "initial_closure": null,
                                  "stage_plans": [
                                    {
                                      "lookup_relation": 1,
                                      "stream_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "stream_thinning": [
                                        1
                                      ],
                                      "lookup_key": [
                                        {
                                          "Column": 0
                                        }
                                      ],
                                      "closure": {
                                        "ready_equivalences": [],
                                        "before": {
                                          "mfp": {
                                            "expressions": [],
                                            "predicates": [
                                              [
                                                4,
                                                {
                                                  "CallBinary": {
                                                    "func": "NotEq",
                                                    "expr1": {
                                                      "Column": 1
                                                    },
                                                    "expr2": {
                                                      "Column": 3
                                                    }
                                                  }
                                                }
                                              ]
                                            ],
                                            "projection": [
                                              0,
                                              1
                                            ],
                                            "input_arity": 17
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "final_closure": null
                                }
                              }
                            }
                          },
                          "key_val_plan": {
                            "key_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  0,
                                  1
                                ],
                                "input_arity": 2
                              }
                            },
                            "val_plan": {
                              "mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [],
                                "input_arity": 2
                              }
                            }
                          },
                          "plan": "Distinct",
                          "input_key": null
                        }
                      },
                      "forms": {
                        "raw": false,
                        "arranged": [
                          [
                            [
                              {
                                "Column": 0
                              },
                              {
                                "Column": 1
                              }
                            ],
                            {
                              "0": 0,
                              "1": 1
                            },
                            []
                          ]
                        ]
                      },
                      "input_key": [
                        {
                          "Column": 0
                        },
                        {
                          "Column": 1
                        }
                      ],
                      "input_mfp": {
                        "expressions": [],
                        "predicates": [],
                        "projection": [
                          0,
                          1
                        ],
                        "input_arity": 2
                      }
                    }
                  }
                ],
                "plan": {
                  "Linear": {
                    "source_relation": 0,
                    "source_key": null,
                    "initial_closure": null,
                    "stage_plans": [
                      {
                        "lookup_relation": 1,
                        "stream_key": [
                          {
                            "Column": 2
                          },
                          {
                            "Column": 0
                          }
                        ],
                        "stream_thinning": [
                          1
                        ],
                        "lookup_key": [
                          {
                            "Column": 0
                          },
                          {
                            "Column": 1
                          }
                        ],
                        "closure": {
                          "ready_equivalences": [],
                          "before": {
                            "mfp": {
                              "expressions": [],
                              "predicates": [],
                              "projection": [
                                1,
                                2,
                                0
                              ],
                              "input_arity": 3
                            }
                          }
                        }
                      }
                    ],
                    "final_closure": null
                  }
                }
              }
            },
            "body": {
              "Let": {
                "id": 3,
                "value": {
                  "Reduce": {
                    "input": {
                      "Get": {
                        "id": {
                          "Local": 2
                        },
                        "keys": {
                          "raw": true,
                          "arranged": []
                        },
                        "plan": {
                          "Collection": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              0,
                              2
                            ],
                            "input_arity": 3
                          }
                        }
                      }
                    },
                    "key_val_plan": {
                      "key_plan": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            1,
                            0
                          ],
                          "input_arity": 2
                        }
                      },
                      "val_plan": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [],
                          "input_arity": 2
                        }
                      }
                    },
                    "plan": "Distinct",
                    "input_key": null
                  }
                },
                "body": {
                  "Reduce": {
                    "input": {
                      "Join": {
                        "inputs": [
                          {
                            "ArrangeBy": {
                              "input": {
                                "Get": {
                                  "id": {
                                    "Local": 2
                                  },
                                  "keys": {
                                    "raw": true,
                                    "arranged": []
                                  },
                                  "plan": "PassArrangements"
                                }
                              },
                              "forms": {
                                "raw": true,
                                "arranged": [
                                  [
                                    [
                                      {
                                        "Column": 0
                                      },
                                      {
                                        "Column": 2
                                      }
                                    ],
                                    {
                                      "0": 0,
                                      "1": 2,
                                      "2": 1
                                    },
                                    [
                                      1
                                    ]
                                  ]
                                ]
                              },
                              "input_key": null,
                              "input_mfp": {
                                "expressions": [],
                                "predicates": [],
                                "projection": [
                                  0,
                                  1,
                                  2
                                ],
                                "input_arity": 3
                              }
                            }
                          },
                          {
                            "Union": {
                              "inputs": [
                                {
                                  "Negate": {
                                    "input": {
                                      "ArrangeBy": {
                                        "input": {
                                          "Reduce": {
                                            "input": {
                                              "Join": {
                                                "inputs": [
                                                  {
                                                    "Get": {
                                                      "id": {
                                                        "Local": 3
                                                      },
                                                      "keys": {
                                                        "raw": false,
                                                        "arranged": [
                                                          [
                                                            [
                                                              {
                                                                "Column": 0
                                                              },
                                                              {
                                                                "Column": 1
                                                              }
                                                            ],
                                                            {
                                                              "0": 0,
                                                              "1": 1
                                                            },
                                                            []
                                                          ]
                                                        ]
                                                      },
                                                      "plan": "PassArrangements"
                                                    }
                                                  },
                                                  {
                                                    "Get": {
                                                      "id": {
                                                        "Local": 1
                                                      },
                                                      "keys": {
                                                        "raw": false,
                                                        "arranged": [
                                                          [
                                                            [
                                                              {
                                                                "Column": 0
                                                              }
                                                            ],
                                                            {
                                                              "0": 0,
                                                              "1": 1,
                                                              "2": 2,
                                                              "3": 3,
                                                              "4": 4,
                                                              "5": 5,
                                                              "6": 6,
                                                              "7": 7,
                                                              "8": 8,
                                                              "9": 9,
                                                              "10": 10,
                                                              "11": 11,
                                                              "12": 12,
                                                              "13": 13,
                                                              "14": 14,
                                                              "15": 15
                                                            },
                                                            [
                                                              1,
                                                              2,
                                                              3,
                                                              4,
                                                              5,
                                                              6,
                                                              7,
                                                              8,
                                                              9,
                                                              10,
                                                              11,
                                                              12,
                                                              13,
                                                              14,
                                                              15
                                                            ]
                                                          ],
                                                          [
                                                            [
                                                              {
                                                                "Column": 2
                                                              }
                                                            ],
                                                            {
                                                              "0": 1,
                                                              "1": 2,
                                                              "2": 0,
                                                              "3": 3,
                                                              "4": 4,
                                                              "5": 5,
                                                              "6": 6,
                                                              "7": 7,
                                                              "8": 8,
                                                              "9": 9,
                                                              "10": 10,
                                                              "11": 11,
                                                              "12": 12,
                                                              "13": 13,
                                                              "14": 14,
                                                              "15": 15
                                                            },
                                                            [
                                                              0,
                                                              1,
                                                              3,
                                                              4,
                                                              5,
                                                              6,
                                                              7,
                                                              8,
                                                              9,
                                                              10,
                                                              11,
                                                              12,
                                                              13,
                                                              14,
                                                              15
                                                            ]
                                                          ]
                                                        ]
                                                      },
                                                      "plan": "PassArrangements"
                                                    }
                                                  }
                                                ],
                                                "plan": {
                                                  "Linear": {
                                                    "source_relation": 0,
                                                    "source_key": [
                                                      {
                                                        "Column": 0
                                                      },
                                                      {
                                                        "Column": 1
                                                      }
                                                    ],
                                                    "initial_closure": null,
                                                    "stage_plans": [
                                                      {
                                                        "lookup_relation": 1,
                                                        "stream_key": [
                                                          {
                                                            "Column": 0
                                                          }
                                                        ],
                                                        "stream_thinning": [
                                                          1
                                                        ],
                                                        "lookup_key": [
                                                          {
                                                            "Column": 0
                                                          }
                                                        ],
                                                        "closure": {
                                                          "ready_equivalences": [],
                                                          "before": {
                                                            "mfp": {
                                                              "expressions": [],
                                                              "predicates": [
                                                                [
                                                                  4,
                                                                  {
                                                                    "CallBinary": {
                                                                      "func": "NotEq",
                                                                      "expr1": {
                                                                        "Column": 1
                                                                      },
                                                                      "expr2": {
                                                                        "Column": 3
                                                                      }
                                                                    }
                                                                  }
                                                                ],
                                                                [
                                                                  14,
                                                                  {
                                                                    "CallBinary": {
                                                                      "func": "Gt",
                                                                      "expr1": {
                                                                        "Column": 13
                                                                      },
                                                                      "expr2": {
                                                                        "Column": 12
                                                                      }
                                                                    }
                                                                  }
                                                                ]
                                                              ],
                                                              "projection": [
                                                                0,
                                                                1
                                                              ],
                                                              "input_arity": 17
                                                            }
                                                          }
                                                        }
                                                      }
                                                    ],
                                                    "final_closure": null
                                                  }
                                                }
                                              }
                                            },
                                            "key_val_plan": {
                                              "key_plan": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [
                                                    0,
                                                    1
                                                  ],
                                                  "input_arity": 2
                                                }
                                              },
                                              "val_plan": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [],
                                                  "input_arity": 2
                                                }
                                              }
                                            },
                                            "plan": "Distinct",
                                            "input_key": null
                                          }
                                        },
                                        "forms": {
                                          "raw": true,
                                          "arranged": []
                                        },
                                        "input_key": [
                                          {
                                            "Column": 0
                                          },
                                          {
                                            "Column": 1
                                          }
                                        ],
                                        "input_mfp": {
                                          "expressions": [],
                                          "predicates": [],
                                          "projection": [
                                            0,
                                            1
                                          ],
                                          "input_arity": 2
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "ArrangeBy": {
                                    "input": {
                                      "Get": {
                                        "id": {
                                          "Local": 3
                                        },
                                        "keys": {
                                          "raw": false,
                                          "arranged": [
                                            [
                                              [
                                                {
                                                  "Column": 0
                                                },
                                                {
                                                  "Column": 1
                                                }
                                              ],
                                              {
                                                "0": 0,
                                                "1": 1
                                              },
                                              []
                                            ]
                                          ]
                                        },
                                        "plan": "PassArrangements"
                                      }
                                    },
                                    "forms": {
                                      "raw": true,
                                      "arranged": []
                                    },
                                    "input_key": [
                                      {
                                        "Column": 0
                                      },
                                      {
                                        "Column": 1
                                      }
                                    ],
                                    "input_mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        0,
                                        1
                                      ],
                                      "input_arity": 2
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "plan": {
                          "Linear": {
                            "source_relation": 1,
                            "source_key": null,
                            "initial_closure": null,
                            "stage_plans": [
                              {
                                "lookup_relation": 0,
                                "stream_key": [
                                  {
                                    "Column": 1
                                  },
                                  {
                                    "Column": 0
                                  }
                                ],
                                "stream_thinning": [],
                                "lookup_key": [
                                  {
                                    "Column": 0
                                  },
                                  {
                                    "Column": 2
                                  }
                                ],
                                "closure": {
                                  "ready_equivalences": [],
                                  "before": {
                                    "mfp": {
                                      "expressions": [],
                                      "predicates": [],
                                      "projection": [
                                        2
                                      ],
                                      "input_arity": 3
                                    }
                                  }
                                }
                              }
                            ],
                            "final_closure": null
                          }
                        }
                      }
                    },
                    "key_val_plan": {
                      "key_plan": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [],
                          "projection": [
                            0
                          ],
                          "input_arity": 1
                        }
                      },
                      "val_plan": {
                        "mfp": {
                          "expressions": [
                            {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      2
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": "Bool",
                                  "nullable": false
                                }
                              ]
                            }
                          ],
                          "predicates": [],
                          "projection": [
                            1
                          ],
                          "input_arity": 1
                        }
                      }
                    },
                    "plan": {
                      "Accumulable": {
                        "full_aggrs": [
                          {
                            "func": "Count",
                            "expr": {
                              "Literal": [
                                {
                                  "Ok": {
                                    "data": [
                                      2
                                    ]
                                  }
                                },
                                {
                                  "scalar_type": "Bool",
                                  "nullable": false
                                }
                              ]
                            },
                            "distinct": false
                          }
                        ],
                        "simple_aggrs": [
                          [
                            0,
                            0,
                            {
                              "func": "Count",
                              "expr": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        2
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Bool",
                                    "nullable": false
                                  }
                                ]
                              },
                              "distinct": false
                            }
                          ]
                        ],
                        "distinct_aggrs": []
                      }
                    },
                    "input_key": null
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

Finish order_by=(#1 desc nulls_first, #0 asc nulls_last) limit=none offset=0 project=(#0, #1)

EOF


query T multiline
-- Query 22
EXPLAIN physical PLAN FOR SELECT
    cntrycode,
    count(*) AS numcust,
    sum(c_acctbal) AS totacctbal
FROM
    (
        SELECT
            substring(c_phone, 1, 2) AS cntrycode, c_acctbal
        FROM
            customer
        WHERE
            substring(c_phone, 1, 2)
            IN ('13', '31', '23', '29', '30', '18', '17')
            AND c_acctbal
                > (
                        SELECT
                            avg(c_acctbal)
                        FROM
                            customer
                        WHERE
                            c_acctbal > 0.00
                            AND substring(c_phone, 1, 2)
                                IN (
                                        '13',
                                        '31',
                                        '23',
                                        '29',
                                        '30',
                                        '18',
                                        '17'
                                    )
                    )
            AND NOT
                    EXISTS(
                        SELECT
                            *
                        FROM
                            orders
                        WHERE
                            o_custkey = c_custkey
                    )
    )
        AS custsale
GROUP BY
    cntrycode
ORDER BY
    cntrycode
----
{
  "Let": {
    "id": 0,
    "value": {
      "Get": {
        "id": {
          "Global": {
            "User": 10
          }
        },
        "keys": {
          "raw": false,
          "arranged": [
            [
              [
                {
                  "Column": 3
                }
              ],
              {
                "0": 1,
                "1": 2,
                "2": 3,
                "3": 0,
                "4": 4,
                "5": 5,
                "6": 6,
                "7": 7
              },
              [
                0,
                1,
                2,
                4,
                5,
                6,
                7
              ]
            ]
          ]
        },
        "plan": {
          "Arrangement": [
            [
              {
                "Column": 3
              }
            ],
            null,
            {
              "expressions": [
                {
                  "CallVariadic": {
                    "func": "Substr",
                    "exprs": [
                      {
                        "CallUnary": {
                          "func": {
                            "CastCharToString": null
                          },
                          "expr": {
                            "Column": 4
                          }
                        }
                      },
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                5,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Int64",
                            "nullable": false
                          }
                        ]
                      },
                      {
                        "Literal": [
                          {
                            "Ok": {
                              "data": [
                                5,
                                2,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0
                              ]
                            }
                          },
                          {
                            "scalar_type": "Int64",
                            "nullable": false
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "predicates": [],
              "projection": [
                1,
                2,
                3,
                0,
                4,
                5,
                6,
                7,
                8
              ],
              "input_arity": 8
            }
          ]
        }
      }
    },
    "body": {
      "Let": {
        "id": 1,
        "value": {
          "Join": {
            "inputs": [
              {
                "Get": {
                  "id": {
                    "Local": 0
                  },
                  "keys": {
                    "raw": true,
                    "arranged": []
                  },
                  "plan": {
                    "Collection": {
                      "expressions": [],
                      "predicates": [
                        [
                          9,
                          {
                            "CallVariadic": {
                              "func": "Or",
                              "exprs": [
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 8
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              2,
                                              49,
                                              51
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 8
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              2,
                                              49,
                                              55
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 8
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              2,
                                              49,
                                              56
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 8
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              2,
                                              50,
                                              51
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 8
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              2,
                                              50,
                                              57
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 8
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              2,
                                              51,
                                              48
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "CallBinary": {
                                    "func": "Eq",
                                    "expr1": {
                                      "Column": 8
                                    },
                                    "expr2": {
                                      "Literal": [
                                        {
                                          "Ok": {
                                            "data": [
                                              19,
                                              2,
                                              51,
                                              49
                                            ]
                                          }
                                        },
                                        {
                                          "scalar_type": "String",
                                          "nullable": false
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      ],
                      "projection": [
                        0,
                        4,
                        5
                      ],
                      "input_arity": 9
                    }
                  }
                }
              },
              {
                "ArrangeBy": {
                  "input": {
                    "Reduce": {
                      "input": {
                        "Get": {
                          "id": {
                            "Local": 0
                          },
                          "keys": {
                            "raw": true,
                            "arranged": []
                          },
                          "plan": {
                            "Collection": {
                              "expressions": [],
                              "predicates": [
                                [
                                  6,
                                  {
                                    "CallBinary": {
                                      "func": "Gt",
                                      "expr1": {
                                        "Column": 5
                                      },
                                      "expr2": {
                                        "Literal": [
                                          {
                                            "Ok": {
                                              "data": [
                                                29,
                                                1,
                                                0,
                                                0,
                                                0,
                                                0
                                              ]
                                            }
                                          },
                                          {
                                            "scalar_type": {
                                              "Numeric": {
                                                "max_scale": null
                                              }
                                            },
                                            "nullable": false
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ],
                                [
                                  9,
                                  {
                                    "CallVariadic": {
                                      "func": "Or",
                                      "exprs": [
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 8
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      2,
                                                      49,
                                                      51
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 8
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      2,
                                                      49,
                                                      55
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 8
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      2,
                                                      49,
                                                      56
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 8
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      2,
                                                      50,
                                                      51
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 8
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      2,
                                                      50,
                                                      57
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 8
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      2,
                                                      51,
                                                      48
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        },
                                        {
                                          "CallBinary": {
                                            "func": "Eq",
                                            "expr1": {
                                              "Column": 8
                                            },
                                            "expr2": {
                                              "Literal": [
                                                {
                                                  "Ok": {
                                                    "data": [
                                                      19,
                                                      2,
                                                      51,
                                                      49
                                                    ]
                                                  }
                                                },
                                                {
                                                  "scalar_type": "String",
                                                  "nullable": false
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              ],
                              "projection": [
                                5
                              ],
                              "input_arity": 9
                            }
                          }
                        }
                      },
                      "key_val_plan": {
                        "key_plan": {
                          "mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [],
                            "input_arity": 1
                          }
                        },
                        "val_plan": {
                          "mfp": {
                            "expressions": [
                              {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        2
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Bool",
                                    "nullable": false
                                  }
                                ]
                              }
                            ],
                            "predicates": [],
                            "projection": [
                              0,
                              1
                            ],
                            "input_arity": 1
                          }
                        }
                      },
                      "plan": {
                        "Accumulable": {
                          "full_aggrs": [
                            {
                              "func": "SumNumeric",
                              "expr": {
                                "Column": 0
                              },
                              "distinct": false
                            },
                            {
                              "func": "Count",
                              "expr": {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        2
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Bool",
                                    "nullable": false
                                  }
                                ]
                              },
                              "distinct": false
                            }
                          ],
                          "simple_aggrs": [
                            [
                              0,
                              0,
                              {
                                "func": "SumNumeric",
                                "expr": {
                                  "Column": 0
                                },
                                "distinct": false
                              }
                            ],
                            [
                              1,
                              1,
                              {
                                "func": "Count",
                                "expr": {
                                  "Literal": [
                                    {
                                      "Ok": {
                                        "data": [
                                          2
                                        ]
                                      }
                                    },
                                    {
                                      "scalar_type": "Bool",
                                      "nullable": false
                                    }
                                  ]
                                },
                                "distinct": false
                              }
                            ]
                          ],
                          "distinct_aggrs": []
                        }
                      },
                      "input_key": null
                    }
                  },
                  "forms": {
                    "raw": false,
                    "arranged": [
                      [
                        [],
                        {
                          "0": 0,
                          "1": 1
                        },
                        [
                          0,
                          1
                        ]
                      ]
                    ]
                  },
                  "input_key": [],
                  "input_mfp": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0,
                      1
                    ],
                    "input_arity": 2
                  }
                }
              }
            ],
            "plan": {
              "Linear": {
                "source_relation": 0,
                "source_key": null,
                "initial_closure": null,
                "stage_plans": [
                  {
                    "lookup_relation": 1,
                    "stream_key": [],
                    "stream_thinning": [
                      0,
                      1,
                      2
                    ],
                    "lookup_key": [],
                    "closure": {
                      "ready_equivalences": [],
                      "before": {
                        "mfp": {
                          "expressions": [],
                          "predicates": [
                            [
                              5,
                              {
                                "CallBinary": {
                                  "func": "Gt",
                                  "expr1": {
                                    "CallUnary": {
                                      "func": {
                                        "CastNumericToFloat64": null
                                      },
                                      "expr": {
                                        "Column": 2
                                      }
                                    }
                                  },
                                  "expr2": {
                                    "CallBinary": {
                                      "func": "DivFloat64",
                                      "expr1": {
                                        "CallUnary": {
                                          "func": {
                                            "CastNumericToFloat64": null
                                          },
                                          "expr": {
                                            "Column": 3
                                          }
                                        }
                                      },
                                      "expr2": {
                                        "CallUnary": {
                                          "func": {
                                            "CastInt64ToFloat64": null
                                          },
                                          "expr": {
                                            "If": {
                                              "cond": {
                                                "CallBinary": {
                                                  "func": "Eq",
                                                  "expr1": {
                                                    "Column": 4
                                                  },
                                                  "expr2": {
                                                    "Literal": [
                                                      {
                                                        "Ok": {
                                                          "data": [
                                                            5,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0,
                                                            0
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "scalar_type": "Int64",
                                                        "nullable": false
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              "then": {
                                                "Literal": [
                                                  {
                                                    "Ok": {
                                                      "data": [
                                                        0
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "scalar_type": "Int64",
                                                    "nullable": true
                                                  }
                                                ]
                                              },
                                              "els": {
                                                "Column": 4
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          ],
                          "projection": [
                            0,
                            1,
                            2
                          ],
                          "input_arity": 5
                        }
                      }
                    }
                  }
                ],
                "final_closure": null
              }
            }
          }
        },
        "body": {
          "Let": {
            "id": 2,
            "value": {
              "Get": {
                "id": {
                  "Local": 1
                },
                "keys": {
                  "raw": true,
                  "arranged": []
                },
                "plan": {
                  "Collection": {
                    "expressions": [],
                    "predicates": [],
                    "projection": [
                      0
                    ],
                    "input_arity": 3
                  }
                }
              }
            },
            "body": {
              "Reduce": {
                "input": {
                  "Join": {
                    "inputs": [
                      {
                        "ArrangeBy": {
                          "input": {
                            "Get": {
                              "id": {
                                "Local": 1
                              },
                              "keys": {
                                "raw": true,
                                "arranged": []
                              },
                              "plan": "PassArrangements"
                            }
                          },
                          "forms": {
                            "raw": true,
                            "arranged": [
                              [
                                [
                                  {
                                    "Column": 0
                                  }
                                ],
                                {
                                  "0": 0,
                                  "1": 1,
                                  "2": 2
                                },
                                [
                                  1,
                                  2
                                ]
                              ]
                            ]
                          },
                          "input_key": null,
                          "input_mfp": {
                            "expressions": [],
                            "predicates": [],
                            "projection": [
                              0,
                              1,
                              2
                            ],
                            "input_arity": 3
                          }
                        }
                      },
                      {
                        "Union": {
                          "inputs": [
                            {
                              "Negate": {
                                "input": {
                                  "Join": {
                                    "inputs": [
                                      {
                                        "Get": {
                                          "id": {
                                            "Local": 2
                                          },
                                          "keys": {
                                            "raw": true,
                                            "arranged": []
                                          },
                                          "plan": "PassArrangements"
                                        }
                                      },
                                      {
                                        "ArrangeBy": {
                                          "input": {
                                            "Reduce": {
                                              "input": {
                                                "Get": {
                                                  "id": {
                                                    "Global": {
                                                      "User": 12
                                                    }
                                                  },
                                                  "keys": {
                                                    "raw": false,
                                                    "arranged": [
                                                      [
                                                        [
                                                          {
                                                            "Column": 1
                                                          }
                                                        ],
                                                        {
                                                          "0": 1,
                                                          "1": 0,
                                                          "2": 2,
                                                          "3": 3,
                                                          "4": 4,
                                                          "5": 5,
                                                          "6": 6,
                                                          "7": 7,
                                                          "8": 8
                                                        },
                                                        [
                                                          0,
                                                          2,
                                                          3,
                                                          4,
                                                          5,
                                                          6,
                                                          7,
                                                          8
                                                        ]
                                                      ]
                                                    ]
                                                  },
                                                  "plan": {
                                                    "Arrangement": [
                                                      [
                                                        {
                                                          "Column": 1
                                                        }
                                                      ],
                                                      null,
                                                      {
                                                        "expressions": [],
                                                        "predicates": [],
                                                        "projection": [
                                                          0
                                                        ],
                                                        "input_arity": 9
                                                      }
                                                    ]
                                                  }
                                                }
                                              },
                                              "key_val_plan": {
                                                "key_plan": {
                                                  "mfp": {
                                                    "expressions": [],
                                                    "predicates": [],
                                                    "projection": [
                                                      0
                                                    ],
                                                    "input_arity": 1
                                                  }
                                                },
                                                "val_plan": {
                                                  "mfp": {
                                                    "expressions": [],
                                                    "predicates": [],
                                                    "projection": [],
                                                    "input_arity": 1
                                                  }
                                                }
                                              },
                                              "plan": "Distinct",
                                              "input_key": null
                                            }
                                          },
                                          "forms": {
                                            "raw": false,
                                            "arranged": [
                                              [
                                                [
                                                  {
                                                    "Column": 0
                                                  }
                                                ],
                                                {
                                                  "0": 0
                                                },
                                                []
                                              ]
                                            ]
                                          },
                                          "input_key": [
                                            {
                                              "Column": 0
                                            }
                                          ],
                                          "input_mfp": {
                                            "expressions": [],
                                            "predicates": [],
                                            "projection": [
                                              0
                                            ],
                                            "input_arity": 1
                                          }
                                        }
                                      }
                                    ],
                                    "plan": {
                                      "Linear": {
                                        "source_relation": 0,
                                        "source_key": null,
                                        "initial_closure": null,
                                        "stage_plans": [
                                          {
                                            "lookup_relation": 1,
                                            "stream_key": [
                                              {
                                                "Column": 0
                                              }
                                            ],
                                            "stream_thinning": [],
                                            "lookup_key": [
                                              {
                                                "Column": 0
                                              }
                                            ],
                                            "closure": {
                                              "ready_equivalences": [],
                                              "before": {
                                                "mfp": {
                                                  "expressions": [],
                                                  "predicates": [],
                                                  "projection": [
                                                    0
                                                  ],
                                                  "input_arity": 1
                                                }
                                              }
                                            }
                                          }
                                        ],
                                        "final_closure": null
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "Get": {
                                "id": {
                                  "Local": 2
                                },
                                "keys": {
                                  "raw": true,
                                  "arranged": []
                                },
                                "plan": "PassArrangements"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "plan": {
                      "Linear": {
                        "source_relation": 1,
                        "source_key": null,
                        "initial_closure": null,
                        "stage_plans": [
                          {
                            "lookup_relation": 0,
                            "stream_key": [
                              {
                                "Column": 0
                              }
                            ],
                            "stream_thinning": [],
                            "lookup_key": [
                              {
                                "Column": 0
                              }
                            ],
                            "closure": {
                              "ready_equivalences": [],
                              "before": {
                                "mfp": {
                                  "expressions": [],
                                  "predicates": [],
                                  "projection": [
                                    1,
                                    2
                                  ],
                                  "input_arity": 3
                                }
                              }
                            }
                          }
                        ],
                        "final_closure": null
                      }
                    }
                  }
                },
                "key_val_plan": {
                  "key_plan": {
                    "mfp": {
                      "expressions": [
                        {
                          "CallVariadic": {
                            "func": "Substr",
                            "exprs": [
                              {
                                "CallUnary": {
                                  "func": {
                                    "CastCharToString": null
                                  },
                                  "expr": {
                                    "Column": 0
                                  }
                                }
                              },
                              {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        5,
                                        1,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Int64",
                                    "nullable": false
                                  }
                                ]
                              },
                              {
                                "Literal": [
                                  {
                                    "Ok": {
                                      "data": [
                                        5,
                                        2,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0,
                                        0
                                      ]
                                    }
                                  },
                                  {
                                    "scalar_type": "Int64",
                                    "nullable": false
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "predicates": [],
                      "projection": [
                        2
                      ],
                      "input_arity": 2
                    }
                  },
                  "val_plan": {
                    "mfp": {
                      "expressions": [
                        {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  2
                                ]
                              }
                            },
                            {
                              "scalar_type": "Bool",
                              "nullable": false
                            }
                          ]
                        }
                      ],
                      "predicates": [],
                      "projection": [
                        2,
                        1
                      ],
                      "input_arity": 2
                    }
                  }
                },
                "plan": {
                  "Accumulable": {
                    "full_aggrs": [
                      {
                        "func": "Count",
                        "expr": {
                          "Literal": [
                            {
                              "Ok": {
                                "data": [
                                  2
                                ]
                              }
                            },
                            {
                              "scalar_type": "Bool",
                              "nullable": false
                            }
                          ]
                        },
                        "distinct": false
                      },
                      {
                        "func": "SumNumeric",
                        "expr": {
                          "Column": 1
                        },
                        "distinct": false
                      }
                    ],
                    "simple_aggrs": [
                      [
                        0,
                        0,
                        {
                          "func": "Count",
                          "expr": {
                            "Literal": [
                              {
                                "Ok": {
                                  "data": [
                                    2
                                  ]
                                }
                              },
                              {
                                "scalar_type": "Bool",
                                "nullable": false
                              }
                            ]
                          },
                          "distinct": false
                        }
                      ],
                      [
                        1,
                        1,
                        {
                          "func": "SumNumeric",
                          "expr": {
                            "Column": 1
                          },
                          "distinct": false
                        }
                      ]
                    ],
                    "distinct_aggrs": []
                  }
                },
                "input_key": null
              }
            }
          }
        }
      }
    }
  }
}

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0..=#2)

EOF

################################################################################
# end of optimized plans - below here is a sampling of other plan info
################################################################################

query T multiline
-- Query 20
EXPLAIN RAW PLAN FOR SELECT
    s_name,
    s_address
FROM
    supplier,
    nation
WHERE
    s_suppkey IN (
        SELECT
            ps_suppkey
        FROM
            partsupp
        WHERE
            ps_partkey IN (
                SELECT
                    p_partkey
                FROM
                    part
                WHERE
                    p_name like 'forest%'
            )
            AND ps_availqty > (
                SELECT
                    0.5 * sum(l_quantity)
                FROM
                    lineitem
                WHERE
                    l_partkey = ps_partkey
                    AND l_suppkey = ps_suppkey
                    AND l_shipdate >= DATE '1995-01-01'
                    AND l_shipdate < DATE '1995-01-01' + INTERVAL '1' year
            )
    )
    AND s_nationkey = n_nationkey
    AND n_name = 'CANADA'
ORDER BY
    s_name
----
%0 =
| Get materialize.public.supplier (u5)

%1 =
| Get materialize.public.nation (u1)

%2 =
| InnerJoin %0 %1 on true
| Filter ((select(%3) AND (#3 = #7)) AND (#8 = text_to_char("CANADA")))
| |
| | %3 =
| | | Get materialize.public.partsupp (u7)
| | | Filter (select(%4) AND (integer_to_numeric(#2) > select(%5)))
| | | |
| | | | %4 =
| | | | | Get materialize.public.part (u4)
| | | | | Filter (varchar_to_text(#1) like "forest%")
| | | | | Project (#0)
| | | | | Reduce group=() any(((#^0 = #0) AND true))
| | | |
| | | |
| | | | %5 =
| | | | | Get materialize.public.lineitem (u14)
| | | | | Filter ((((#1 = #^0) AND (#2 = #^1)) AND (#10 >= text_to_date("1995-01-01"))) AND (date_to_timestamp(#10) < (text_to_date("1995-01-01") + 1 year)))
| | | | | Reduce group=() sum(#4)
| | | | | Map (0.5 * #0)
| | | | | Project (#1)
| | | |
| | | Project (#1)
| | | Reduce group=() any(((#^0 = #0) AND true))
| |
| Project (#1, #2)

Finish order_by=(#0 asc nulls_last) limit=none offset=0 project=(#0, #1)

EOF
